<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2019-09-09 10:12:18">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description>This update set contains modified widget of report which enables users to view and drilldow reports on Portal </description>
<inserted/>
<name>SPReportViewer</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>2faf4a154fbf7f404b5c30318110c791</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2019-09-09 10:12:18</sys_created_on>
<sys_id>71b826d54f33bf404b5c30318110c722</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2019-09-09 10:12:18</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sp_widget_c02096554fbf7f404b5c30318110c7c6</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function($timeout) {

  var c = this;
	var reportId = c.options.report_id || '';
	c.rectangleId = c.widget.rectangle_id || c.data.rectangleId;

	c.showTitle = (c.options.show_title === true || c.options.show_title === 'true');
	c.title = '';

	if (c.options.widget_parameters){
		var widgetOpts = JSON.parse(c.options.widget_parameters);
		c.title = widgetOpts.report_id.displayValue;
		c.initialMessage = c.data.ch.i18n.building;
		window.chartHelpers = window.chartHelpers || {};
		$.extend(window.chartHelpers, c.data.ch);

		$timeout(function(){
			var targetEl = $("#report-widget-"+c.rectangleId);
			embedReportById(targetEl, reportId);
		});
	}
	else {
		c.initialMessage = c.data.ch.i18n.selectReport;
	}

}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.report-widget-wrap {&amp;#13;
	background:#fff;&amp;#13;
  padding:15px;&amp;#13;
  margin: 0 0 15px 0;&amp;#13;
}&amp;#13;
&amp;#13;
.report-widget-title {&amp;#13;
	padding:0 0 15px;&amp;#13;
  font-weight:bold;&amp;#13;
  font-size: 14px;&amp;#13;
  margin-top: 0;&amp;#13;
  margin-bottom: 0;&amp;#13;
}&amp;#13;
&amp;#13;
.highcharts-container g.highcharts-button *,&amp;#13;
.highcharts-container image.hc-image {&amp;#13;
  transition: fill-opacity 0.3s linear, stroke-opacity 0.3s linear, opacity 0.3s linear;&amp;#13;
  fill-opacity: 0;&amp;#13;
  stroke-opacity: 0;&amp;#13;
  opacity:0;&amp;#13;
}&amp;#13;
&amp;#13;
.highcharts-container:hover g.highcharts-button *,&amp;#13;
.highcharts-container:hover image.hc-image {&amp;#13;
  fill-opacity: 1;&amp;#13;
  stroke-opacity: 1;&amp;#13;
  opacity:1;&amp;#13;
}&amp;#13;
&amp;#13;
.highcharts-legend-item span::after,&amp;#13;
.highcharts-legend-item::after {&amp;#13;
  content: "\200E";&amp;#13;
}&amp;#13;
&amp;#13;
table.wide .pivot_cell,&amp;#13;
table.wide .pivot_caption,&amp;#13;
table.wide .pivot_caption_dark {&amp;#13;
	padding: 3px 5px;&amp;#13;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description&gt;Widget for embedding reports on the Service Portal.&lt;/description&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;true&lt;/has_preview&gt;&lt;id&gt;portal_report_viewer&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;Portal Report Viewer&lt;/name&gt;&lt;option_schema&gt;[{"displayValue":"Report","name":"report_id","label":"Report","type":"reference","value":"sys_report","ed":{"reference":"sys_report"}},{"hint":"","name":"show_title","default_value":"true","label":"Show title","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	options.report_id = options.report_id || '';

	var chartHelpers = chartHelpers || {};
	chartHelpers.i18n = chartHelpers.i18n || {};

	chartHelpers.i18n.selectReport = gs.getMessage('Select a report in widget options!');
	chartHelpers.i18n.building = gs.getMessage('Building chart, please wait...');
	chartHelpers.i18n.total = gs.getMessage('Total');
	chartHelpers.i18n.maxCells = gs.getMessage('The size of the pivot table is too big. Use filters to reduce it or switch to a modern browser.');
	chartHelpers.i18n.chartGenerationError = gs.getMessage('An error occurred while generating chart. Please try again later.');

	chartHelpers.i18n.showAsHeatmap = gs.getMessage('Show data as a heatmap visualization');
	chartHelpers.i18n.showAsMarkers = gs.getMessage('Show data using latitude and longitude');

	chartHelpers.i18n.highlightBasedOn = gs.getMessage('Highlight based on:');
	chartHelpers.i18n.isRTL = GlideI18NStyle().getDirection().equals('rtl');
	chartHelpers.i18n.weekNumberTitle = gs.getMessage('Week');
	chartHelpers.i18n.weekNumberTitleShort = gs.getMessage('W');
	chartHelpers.i18n.seeMoreEvents = gs.getMessage('See {0} more events');
	chartHelpers.i18n.viewEventsInList = gs.getMessage('View {0} events in a list');
	chartHelpers.i18n.viewAllEventsInList = gs.getMessage('View all events in a list');
	chartHelpers.i18n.viewAllRecords = gs.getMessage('View all records');
	chartHelpers.i18n.none = gs.getMessage('None');
	chartHelpers.i18n.plusMany = gs.getMessage('+ many');
	chartHelpers.i18n.plusMore = gs.getMessage('+ {0} more');
	chartHelpers.i18n.buttonText = {
		prevYear: "",
		nextYear: "",
		today: gs.getMessage('today'),
		year:	gs.getMessage('year'),
		month:gs.getMessage('month'),
		week:gs.getMessage('week'),
		day:gs.getMessage('day')
	};
	chartHelpers.i18n.allDayHtml = gs.getMessage('all-day');
	chartHelpers.i18n.daysNames = [
		gs.getMessage('Sunday'),
		gs.getMessage('Monday'),
		gs.getMessage('Tuesday'),
		gs.getMessage('Wednesday'),
		gs.getMessage('Thursday'),
		gs.getMessage('Friday'),
		gs.getMessage('Saturday')
	];
	chartHelpers.i18n.dayNamesShort = [
		gs.getMessage('Sun'),
		gs.getMessage('Mon'),
		gs.getMessage('Tue'),
		gs.getMessage('Wed'),
		gs.getMessage('Thu'),
		gs.getMessage('Fri'),
		gs.getMessage('Sat')
	];
	chartHelpers.i18n.monthNames = [
		gs.getMessage('January'),
		gs.getMessage('February'),
		gs.getMessage('March'),
		gs.getMessage('April'),
		gs.getMessage('May'),
		gs.getMessage('June'),
		gs.getMessage('July'),
		gs.getMessage('August'),
		gs.getMessage('September'),
		gs.getMessage('October'),
		gs.getMessage('November'),
		gs.getMessage('December')
	];
	chartHelpers.i18n.monthNamesShort = [
		gs.getMessage('Jan'),
		gs.getMessage('Feb'),
		gs.getMessage('Mar'),
		gs.getMessage('Apr'),
		gs.getMessage('May'),
		gs.getMessage('Jun'),
		gs.getMessage('Jul'),
		gs.getMessage('Aug'),
		gs.getMessage('Sep'),
		gs.getMessage('Oct'),
		gs.getMessage('Nov'),
		gs.getMessage('Dec')
	];
	chartHelpers.i18n.none = gs.getMessage('-- None --');
	chartHelpers.i18n.groupBy = gs.getMessage('Group by');
	chartHelpers.i18n.groupByTitle = gs.getMessage('Select a different group by field');
	chartHelpers.i18n.stackBy = gs.getMessage('Stacked by');
	chartHelpers.i18n.stackByTitle = gs.getMessage('Select a different stacked by field');
	chartHelpers.device = {};
	chartHelpers.device.type = GlideMobileExtensions.getDeviceType();

	chartHelpers.systemParams = {
		firstDay: (gs.getProperty("glide.ui.date_format.first_day_of_week", 2) - 1) % 7,
		defaultDate: SNC.ReportUtil.getNowTimeInUSFormat(),
		maxEventsDisplayedPerCell: gs.getProperty("glide.report.calendar.max_events_displayed_per_cell", 3),
		maxMoreEventsPerDay: gs.getProperty("glide.report.calendar.max_more_events_per_day", 30),
		defaultEventDuration: gs.getProperty("glide.report.calendar.default_event_duration", "01:00:00"),
		maxDaysBack: gs.getProperty("glide.report.calendar.max_days_back", 30),
		enablePreviewOnHover: gs.getProperty("glide.report.calendar.enable_preview_on_hover", false)
	};

		data.rectangleId = gs.generateGUID();
		data.ch = chartHelpers;
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-09 08:24:52&lt;/sys_created_on&gt;&lt;sys_id&gt;c02096554fbf7f404b5c30318110c7c6&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Portal Report Viewer&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_c02096554fbf7f404b5c30318110c7c6&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-09-09 08:25:28&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="report-widget-wrap"&gt;

	&lt;h2 ng-if="c.showTitle" tabindex="0" id="{{'title-' + c.widget.rectangle_id }}" class="report-widget-title"&gt;{{c.title}}&lt;/h2&gt;

	&lt;div id="report-widget-{{c.rectangleId}}"&gt;
     {{::c.initialMessage}}
  &lt;/div&gt;
&lt;/div&gt;
]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1749281489</payload_hash>
<remote_update_set display_value="SPReportViewer">71b826d54f33bf404b5c30318110c722</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2019-09-09 10:12:18</sys_created_on>
<sys_id>06b8ee594f33bf404b5c30318110c716</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d1520b8150000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2019-09-09 10:12:18</sys_updated_on>
<table/>
<target_name>Portal Report Viewer</target_name>
<type>Widget</type>
<update_domain>global</update_domain>
<update_guid>8940965577bf7f407ca63cadaef562d0</update_guid>
<update_guid_history>8940965577bf7f407ca63cadaef562d0:-1749281489,c820965560bf7f409138b081a7a839c7:-746324122</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sp_rel_widget_clone_cc2096554fbf7f404b5c30318110c7ca</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone"><sp_rel_widget_clone action="INSERT_OR_UPDATE"><child display_value="Copy of Report">c02096554fbf7f404b5c30318110c7c6</child><cloned>2019-09-09 08:24:52</cloned><last_validated>2019-09-09 08:24:52</last_validated><parent display_value="Report">e41aa2d29f0222008252baac757fcfce</parent><payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category/&gt;&lt;client_script&gt;&lt;![CDATA[function($timeout) {

  var c = this;
	var reportId = c.options.report_id || '';
	c.rectangleId = c.widget.rectangle_id || c.data.rectangleId;

	c.showTitle = (c.options.show_title === true || c.options.show_title === 'true');
	c.title = '';

	if (c.options.widget_parameters){
		var widgetOpts = JSON.parse(c.options.widget_parameters);
		c.title = widgetOpts.report_id.displayValue;
		c.initialMessage = c.data.ch.i18n.building;
		window.chartHelpers = window.chartHelpers || {};
		$.extend(window.chartHelpers, c.data.ch);

		$timeout(function(){
			var targetEl = $("#report-widget-"+c.rectangleId);
			embedReportById(targetEl, reportId);
		});
	}
	else {
		c.initialMessage = c.data.ch.i18n.selectReport;
	}

}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.report-widget-wrap {&amp;#13;
	background:#fff;&amp;#13;
  padding:15px;&amp;#13;
  margin: 0 0 15px 0;&amp;#13;
}&amp;#13;
&amp;#13;
.report-widget-title {&amp;#13;
	padding:0 0 15px;&amp;#13;
  font-weight:bold;&amp;#13;
  font-size: 14px;&amp;#13;
  margin-top: 0;&amp;#13;
  margin-bottom: 0;&amp;#13;
}&amp;#13;
&amp;#13;
.highcharts-container g.highcharts-button *,&amp;#13;
.highcharts-container image.hc-image {&amp;#13;
  transition: fill-opacity 0.3s linear, stroke-opacity 0.3s linear, opacity 0.3s linear;&amp;#13;
  fill-opacity: 0;&amp;#13;
  stroke-opacity: 0;&amp;#13;
  opacity:0;&amp;#13;
}&amp;#13;
&amp;#13;
.highcharts-container:hover g.highcharts-button *,&amp;#13;
.highcharts-container:hover image.hc-image {&amp;#13;
  fill-opacity: 1;&amp;#13;
  stroke-opacity: 1;&amp;#13;
  opacity:1;&amp;#13;
}&amp;#13;
&amp;#13;
.highcharts-legend-item span::after,&amp;#13;
.highcharts-legend-item::after {&amp;#13;
  content: "\200E";&amp;#13;
}&amp;#13;
&amp;#13;
table.wide .pivot_cell,&amp;#13;
table.wide .pivot_caption,&amp;#13;
table.wide .pivot_caption_dark {&amp;#13;
	padding: 3px 5px;&amp;#13;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description&gt;Widget for embedding reports on the Service Portal.&lt;/description&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;true&lt;/has_preview&gt;&lt;id&gt;report&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link/&gt;&lt;name&gt;Report&lt;/name&gt;&lt;option_schema&gt;[{"displayValue":"Report","name":"report_id","label":"Report","type":"reference","value":"sys_report","ed":{"reference":"sys_report"}},{"hint":"","name":"show_title","default_value":"true","label":"Show title","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	options.report_id = options.report_id || '';

	var chartHelpers = chartHelpers || {};
	chartHelpers.i18n = chartHelpers.i18n || {};

	chartHelpers.i18n.selectReport = gs.getMessage('Select a report in widget options!');
	chartHelpers.i18n.building = gs.getMessage('Building chart, please wait...');
	chartHelpers.i18n.total = gs.getMessage('Total');
	chartHelpers.i18n.maxCells = gs.getMessage('The size of the pivot table is too big. Use filters to reduce it or switch to a modern browser.');
	chartHelpers.i18n.chartGenerationError = gs.getMessage('An error occurred while generating chart. Please try again later.');

	chartHelpers.i18n.showAsHeatmap = gs.getMessage('Show data as a heatmap visualization');
	chartHelpers.i18n.showAsMarkers = gs.getMessage('Show data using latitude and longitude');

	chartHelpers.i18n.highlightBasedOn = gs.getMessage('Highlight based on:');
	chartHelpers.i18n.isRTL = GlideI18NStyle().getDirection().equals('rtl');
	chartHelpers.i18n.weekNumberTitle = gs.getMessage('Week');
	chartHelpers.i18n.weekNumberTitleShort = gs.getMessage('W');
	chartHelpers.i18n.seeMoreEvents = gs.getMessage('See {0} more events');
	chartHelpers.i18n.viewEventsInList = gs.getMessage('View {0} events in a list');
	chartHelpers.i18n.viewAllEventsInList = gs.getMessage('View all events in a list');
	chartHelpers.i18n.viewAllRecords = gs.getMessage('View all records');
	chartHelpers.i18n.none = gs.getMessage('None');
	chartHelpers.i18n.plusMany = gs.getMessage('+ many');
	chartHelpers.i18n.plusMore = gs.getMessage('+ {0} more');
	chartHelpers.i18n.buttonText = {
		prevYear: "",
		nextYear: "",
		today: gs.getMessage('today'),
		year:	gs.getMessage('year'),
		month:gs.getMessage('month'),
		week:gs.getMessage('week'),
		day:gs.getMessage('day')
	};
	chartHelpers.i18n.allDayHtml = gs.getMessage('all-day');
	chartHelpers.i18n.daysNames = [
		gs.getMessage('Sunday'),
		gs.getMessage('Monday'),
		gs.getMessage('Tuesday'),
		gs.getMessage('Wednesday'),
		gs.getMessage('Thursday'),
		gs.getMessage('Friday'),
		gs.getMessage('Saturday')
	];
	chartHelpers.i18n.dayNamesShort = [
		gs.getMessage('Sun'),
		gs.getMessage('Mon'),
		gs.getMessage('Tue'),
		gs.getMessage('Wed'),
		gs.getMessage('Thu'),
		gs.getMessage('Fri'),
		gs.getMessage('Sat')
	];
	chartHelpers.i18n.monthNames = [
		gs.getMessage('January'),
		gs.getMessage('February'),
		gs.getMessage('March'),
		gs.getMessage('April'),
		gs.getMessage('May'),
		gs.getMessage('June'),
		gs.getMessage('July'),
		gs.getMessage('August'),
		gs.getMessage('September'),
		gs.getMessage('October'),
		gs.getMessage('November'),
		gs.getMessage('December')
	];
	chartHelpers.i18n.monthNamesShort = [
		gs.getMessage('Jan'),
		gs.getMessage('Feb'),
		gs.getMessage('Mar'),
		gs.getMessage('Apr'),
		gs.getMessage('May'),
		gs.getMessage('Jun'),
		gs.getMessage('Jul'),
		gs.getMessage('Aug'),
		gs.getMessage('Sep'),
		gs.getMessage('Oct'),
		gs.getMessage('Nov'),
		gs.getMessage('Dec')
	];
	chartHelpers.i18n.none = gs.getMessage('-- None --');
	chartHelpers.i18n.groupBy = gs.getMessage('Group by');
	chartHelpers.i18n.groupByTitle = gs.getMessage('Select a different group by field');
	chartHelpers.i18n.stackBy = gs.getMessage('Stacked by');
	chartHelpers.i18n.stackByTitle = gs.getMessage('Select a different stacked by field');
	chartHelpers.device = {};
	chartHelpers.device.type = GlideMobileExtensions.getDeviceType();

	chartHelpers.systemParams = {
		firstDay: (gs.getProperty("glide.ui.date_format.first_day_of_week", 2) - 1) % 7,
		defaultDate: SNC.ReportUtil.getNowTimeInUSFormat(),
		maxEventsDisplayedPerCell: gs.getProperty("glide.report.calendar.max_events_displayed_per_cell", 3),
		maxMoreEventsPerDay: gs.getProperty("glide.report.calendar.max_more_events_per_day", 30),
		defaultEventDuration: gs.getProperty("glide.report.calendar.default_event_duration", "01:00:00"),
		maxDaysBack: gs.getProperty("glide.report.calendar.max_days_back", 30),
		enablePreviewOnHover: gs.getProperty("glide.report.calendar.enable_preview_on_hover", false)
	};

		data.rectangleId = gs.generateGUID();
		data.ch = chartHelpers;
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-09-26 08:06:30&lt;/sys_created_on&gt;&lt;sys_id&gt;e41aa2d29f0222008252baac757fcfce&lt;/sys_id&gt;&lt;sys_mod_count&gt;124&lt;/sys_mod_count&gt;&lt;sys_name&gt;Report&lt;/sys_name&gt;&lt;sys_package display_value="Performance Analytics and Reporting - Service Portal Widgets" source="com.snc.pa.sp.widget"&gt;19a718904f1323004b5c30318110c788&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_e41aa2d29f0222008252baac757fcfce&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-03-12 15:36:49&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="report-widget-wrap"&gt;

	&lt;h2 ng-if="c.showTitle" tabindex="0" id="{{'title-' + c.widget.rectangle_id }}" class="report-widget-title"&gt;{{c.title}}&lt;/h2&gt;

	&lt;div id="report-widget-{{c.rectangleId}}"&gt;
     {{::c.initialMessage}}
  &lt;/div&gt;
&lt;/div&gt;
]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload><sys_class_name>sp_rel_widget_clone</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-09-09 08:24:52</sys_created_on><sys_id>cc2096554fbf7f404b5c30318110c7ca</sys_id><sys_mod_count>0</sys_mod_count><sys_name>c02096554fbf7f404b5c30318110c7c6</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_scope display_value="Global">global</sys_scope><sys_update_name>sp_rel_widget_clone_cc2096554fbf7f404b5c30318110c7ca</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-09-09 08:24:52</sys_updated_on></sp_rel_widget_clone></record_update>]]></payload>
<payload_hash>386087868</payload_hash>
<remote_update_set display_value="SPReportViewer">71b826d54f33bf404b5c30318110c722</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2019-09-09 10:12:18</sys_created_on>
<sys_id>71b8ee594f33bf404b5c30318110c716</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d152029180000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2019-09-09 10:12:18</sys_updated_on>
<table/>
<target_name>c02096554fbf7f404b5c30318110c7c6</target_name>
<type>Widget Clone</type>
<update_domain>global</update_domain>
<update_guid>88209655a8bf7f40f8fd5e2ae0db42cc</update_guid>
<update_guid_history>88209655a8bf7f40f8fd5e2ae0db42cc:386087868</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sp_js_include_be69f1d54f3f7f404b5c30318110c7b2</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_js_include"><sp_js_include action="INSERT_OR_UPDATE"><display_name>PortalifyReports</display_name><source>local</source><sys_class_name>sp_js_include</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-09-09 06:46:15</sys_created_on><sys_id>be69f1d54f3f7f404b5c30318110c7b2</sys_id><sys_mod_count>1</sys_mod_count><sys_name>PortalifyReports</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_scope display_value="Global">global</sys_scope><sys_ui_script display_value="PortalifyReports">de5096554fbf7f404b5c30318110c759</sys_ui_script><sys_update_name>sp_js_include_be69f1d54f3f7f404b5c30318110c7b2</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-09-09 08:30:12</sys_updated_on><url/></sp_js_include></record_update>]]></payload>
<payload_hash>-123488564</payload_hash>
<remote_update_set display_value="SPReportViewer">71b826d54f33bf404b5c30318110c722</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2019-09-09 10:12:18</sys_created_on>
<sys_id>b1b826d54f33bf404b5c30318110c723</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d15250b960000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2019-09-09 10:12:18</sys_updated_on>
<table/>
<target_name>PortalifyReports</target_name>
<type>JS Include</type>
<update_domain>global</update_domain>
<update_guid>5e5116d573bf7f4087256a5502edea5e</update_guid>
<update_guid_history>5e5116d573bf7f4087256a5502edea5e:-123488564,ab893915403f7f40e12a8d3904791d73:-574087987</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>m2m_sp_widget_dependency_482096554fbf7f404b5c30318110c7c8</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="m2m_sp_widget_dependency"><m2m_sp_widget_dependency action="INSERT_OR_UPDATE"><sp_dependency display_value="ReportingIncludes">d1b923de9f0222008252baac757fcfe4</sp_dependency><sp_widget display_value="Copy of Report">c02096554fbf7f404b5c30318110c7c6</sp_widget><sys_class_name>m2m_sp_widget_dependency</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-09-09 08:24:52</sys_created_on><sys_id>482096554fbf7f404b5c30318110c7c8</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ReportingIncludes.Copy of Report</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_scope display_value="Global">global</sys_scope><sys_update_name>m2m_sp_widget_dependency_482096554fbf7f404b5c30318110c7c8</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-09-09 08:24:52</sys_updated_on></m2m_sp_widget_dependency></record_update>]]></payload>
<payload_hash>1943851178</payload_hash>
<remote_update_set display_value="SPReportViewer">71b826d54f33bf404b5c30318110c722</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2019-09-09 10:12:18</sys_created_on>
<sys_id>b5b826d54f33bf404b5c30318110c722</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d152028b80000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2019-09-09 10:12:18</sys_updated_on>
<table/>
<target_name>ReportingIncludes.Copy of Report</target_name>
<type>Widget Dependency</type>
<update_domain>global</update_domain>
<update_guid>8c209655c3bf7f4047697d7de7c299c9</update_guid>
<update_guid_history>8c209655c3bf7f4047697d7de7c299c9:1943851178</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_de5096554fbf7f404b5c30318110c759</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;Modifications are at Line 5186&lt;/description&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;PortalifyReports&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*! RESOURCE: /scripts/GlideV2ChartingIncludesSP.js */
/*! RESOURCE: /scripts/reportlibs/fullcalendar.min.js */
/*!
 * FullCalendar v2.2.7
 * Docs &amp; License: http://arshaw.com/fullcalendar/
 * (c) 2013 Adam Shaw
 * (c) 2015 Tanguy Pruvot
 * The minimized version which we use is based on this customized version
 */
!function(t){"function"==typeof define&amp;&amp;define.amd?define(["jquery","moment"],t):t(jQuery,moment)}(function(t,e){function n(t){i(St,t)}function i(e){function n(n,s){t.isPlainObject(s)&amp;&amp;t.isPlainObject(e[n])&amp;&amp;!r(n)?e[n]=i({},e[n],s):void 0!==s&amp;&amp;(e[n]=s)}for(var s=1;s&lt;arguments.length;s++)t.each(arguments[s],n);return e}function r(t){return/(Time|Duration)$/.test(t)}function s(t){var n=e.localeData||e.langData;return n.call(e,t)||n.call(e,"en")}function o(t,e){e.left&amp;&amp;t.css({"border-left-width":1,"margin-left":e.left-1}),e.right&amp;&amp;t.css({"border-right-width":1,"margin-right":e.right-1})}function a(t){t.css({"margin-left":"","margin-right":"","border-left-width":"","border-right-width":""})}function l(){t("body").addClass("fc-not-allowed")}function d(){t("body").removeClass("fc-not-allowed")}function u(e,n,i){var r=Math.floor(n/e.length),s=Math.floor(n-r*(e.length-1)),o=[],a=[],l=[],d=0;c(e),e.each(function(n,i){var u=n===e.length-1?s:r,c=t(i).outerHeight(!0);u&gt;c?(o.push(i),a.push(c),l.push(t(i).height())):d+=c}),i&amp;&amp;(n-=d,r=Math.floor(n/o.length),s=Math.floor(n-r*(o.length-1))),t(o).each(function(e,n){var i=e===o.length-1?s:r,d=a[e],u=l[e],c=i-(d-u);i&gt;d&amp;&amp;t(n).height(c)})}function c(t){t.height("")}function h(e){var n=0;return e.find("&gt; *").each(function(e,i){var r=t(i).outerWidth();r&gt;n&amp;&amp;(n=r)}),n++,e.width(n),n}function f(t,e){return t.height(e).addClass("fc-scroller"),t[0].scrollHeight-1&gt;t[0].clientHeight?!0:(g(t),!1)}function g(t){t.height("").removeClass("fc-scroller")}function p(e){var n=e.css("position"),i=e.parents().filter(function(){var e=t(this);return/(auto|scroll)/.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==n&amp;&amp;i.length?i:t(e[0].ownerDocument||document)}function m(t){var e=t.offset().left,n=e+t.width(),i=t.children(),r=i.offset().left,s=r+i.outerWidth();return{left:r-e,right:n-s}}function v(t){return 1==t.which&amp;&amp;!t.ctrlKey}function y(t,e){var n,i,r,s,o=t.start,a=t.end,l=e.start,d=e.end;return a&gt;l&amp;&amp;d&gt;o?(o&gt;=l?(n=o.clone(),r=!0):(n=l.clone(),r=!1),d&gt;=a?(i=a.clone(),s=!0):(i=d.clone(),s=!1),{start:n,end:i,isStart:r,isEnd:s}):void 0}function w(t,e){if(t=t||{},void 0!==t[e])return t[e];for(var n,i=e.split(/(?=[A-Z])/),r=i.length-1;r&gt;=0;r--)if(n=t[i[r].toLowerCase()],void 0!==n)return n;return t["default"]}function b(t,n){return e.duration({days:t.clone().stripTime().diff(n.clone().stripTime(),"days"),ms:t.time()-n.time()})}function S(t,n){return e.duration({days:t.clone().stripTime().diff(n.clone().stripTime(),"days")})}function E(t,e){var n,i,r;for(n=0;n&lt;Nt.length&amp;&amp;(i=Nt[n],r=C(i,t,e),!(r&gt;=1&amp;&amp;L(r)));n++);return i}function C(t,n,i){return null!=i?i.diff(n,t,!0):e.isDuration(n)?n.as(t):n.end.diff(n.start,t,!0)}function D(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function T(t){return/^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(t)}function k(t){var e=function(){};return e.prototype=t,new e}function H(t,e){for(var n in t)R(t,n)&amp;&amp;(e[n]=t[n])}function x(t,e){var n,i,r=["constructor","toString","valueOf"];for(n=0;n&lt;r.length;n++)i=r[n],t[i]!==Object.prototype[i]&amp;&amp;(e[i]=t[i])}function R(t,e){return Vt.call(t,e)}function M(e){return/undefined|null|boolean|number|string/.test(t.type(e))}function F(e,n,i){if(t.isFunction(e)&amp;&amp;(e=[e]),e){var r,s;for(r=0;r&lt;e.length;r++)s=e[r].apply(n,i)||s;return s}}function G(){for(var t=0;t&lt;arguments.length;t++)if(void 0!==arguments[t])return arguments[t]}function N(t){return(t+"").replace(/&amp;/g,"&amp;amp;").replace(/&lt;/g,"&amp;lt;").replace(/&gt;/g,"&amp;gt;").replace(/'/g,"&amp;#039;").replace(/"/g,"&amp;quot;").replace(/\n/g,"&lt;br /&gt;")}function V(t){return t.replace(/&amp;.*?;/g,"")}function Y(t){return t.charAt(0).toUpperCase()+t.slice(1)}function z(t,e){return t-e}function L(t){return t%1===0}function _(t,e){var n,i,r,s,o=function(){var a=+new Date-s;e&gt;a&amp;&amp;a&gt;0?n=setTimeout(o,e-a):(n=null,t.apply(r,i),n||(r=i=null))};return function(){r=this,i=arguments,s=+new Date,n||(n=setTimeout(o,e))}}function P(n,i,r){var s,o,a,l,d=n[0],u=1==n.length&amp;&amp;"string"==typeof d;return e.isMoment(d)?(l=e.apply(null,n),O(d,l)):D(d)||void 0===d?l=e.apply(null,n):(s=!1,o=!1,u?Yt.test(d)?(d+="-01",n=[d],s=!0,o=!0):(a=zt.exec(d))&amp;&amp;(s=!a[5],o=!0):t.isArray(d)&amp;&amp;(o=!0),l=i||s?e.utc.apply(e,n):e.apply(null,n),s?(l._ambigTime=!0,l._ambigZone=!0):r&amp;&amp;(o?l._ambigZone=!0:u&amp;&amp;l.zone(d))),l._fullCalendar=!0,l}function A(t,n){var i,r,s=!1,o=!1,a=t.length,l=[];for(i=0;a&gt;i;i++)r=t[i],e.isMoment(r)||(r=Dt.moment.parseZone(r)),s=s||r._ambigTime,o=o||r._ambigZone,l.push(r);for(i=0;a&gt;i;i++)r=l[i],n||!s||r._ambigTime?o&amp;&amp;!r._ambigZone&amp;&amp;(l[i]=r.clone().stripZone()):l[i]=r.clone().stripTime();return l}function O(t,e){t._ambigTime?e._ambigTime=!0:e._ambigTime&amp;&amp;(e._ambigTime=!1),t._ambigZone?e._ambigZone=!0:e._ambigZone&amp;&amp;(e._ambigZone=!1)}function B(t,e){t.year(e[0]||0).month(e[1]||0).date(e[2]||0).hours(e[3]||0).minutes(e[4]||0).seconds(e[5]||0).milliseconds(e[6]||0)}function W(t,e){return _t.format.call(t,e)}function I(t,e){return Z(t,q(e))}function Z(t,e){var n,i="";for(n=0;n&lt;e.length;n++)i+=j(t,e[n]);return i}function j(t,e){var n,i;return"string"==typeof e?e:(n=e.token)?Pt[n]?Pt[n](t):W(t,n):e.maybe&amp;&amp;(i=Z(t,e.maybe),i.match(/[1-9]/))?i:""}function X(t,e,n,i,r){var s;return t=Dt.moment.parseZone(t),e=Dt.moment.parseZone(e),s=(t.localeData||t.lang).call(t),n=s.longDateFormat(n)||n,i=i||" - ",U(t,e,q(n),i,r)}function U(t,e,n,i,r){var s,o,a,l,d="",u="",c="",h="",f="";for(o=0;o&lt;n.length&amp;&amp;(s=$(t,e,n[o]),s!==!1);o++)d+=s;for(a=n.length-1;a&gt;o&amp;&amp;(s=$(t,e,n[a]),s!==!1);a--)u=s+u;for(l=o;a&gt;=l;l++)c+=j(t,n[l]),h+=j(e,n[l]);return(c||h)&amp;&amp;(f=r?h+i+c:c+i+h),d+f+u}function $(t,e,n){var i,r;return"string"==typeof n?n:(i=n.token)&amp;&amp;(r=At[i.charAt(0)],r&amp;&amp;t.isSame(e,r))?W(t,i):!1}function q(t){return t in Ot?Ot[t]:Ot[t]=K(t)}function K(t){for(var e,n=[],i=/\[([^\]]*)\]|\(([^\)]*)\)|(LT|(\w)\4*o?)|([^\w\[\(]+)/g;e=i.exec(t);)e[1]?n.push(e[1]):e[2]?n.push({maybe:K(e[2])}):e[3]?n.push({token:e[3]}):e[5]&amp;&amp;n.push(e[5]);return n}function Q(){}function J(t,e){return t||e?t&amp;&amp;e?t.grid===e.grid&amp;&amp;t.row===e.row&amp;&amp;t.col===e.col:!1:!0}function tt(t){var e=nt(t);return"background"===e||"inverse-background"===e}function et(t){return"inverse-background"===nt(t)}function nt(t){return G((t.source||{}).rendering,t.rendering)}function it(t){var e,n,i={};for(e=0;e&lt;t.length;e++)n=t[e],(i[n._id]||(i[n._id]=[])).push(n);return i}function rt(t,e){return t.eventStartMS-e.eventStartMS}function st(t,e){return t.eventStartMS-e.eventStartMS||e.eventDurationMS-t.eventDurationMS||e.event.allDay-t.event.allDay||(t.event.title||"").localeCompare(e.event.title)}function ot(n){var i,r,s,o,a=Dt.dataAttrPrefix;return a&amp;&amp;(a+="-"),i=n.data(a+"event")||null,i&amp;&amp;(i="object"==typeof i?t.extend({},i):{},r=i.start,null==r&amp;&amp;(r=i.time),s=i.duration,o=i.stick,delete i.start,delete i.time,delete i.duration,delete i.stick),null==r&amp;&amp;(r=n.data(a+"start")),null==r&amp;&amp;(r=n.data(a+"time")),null==s&amp;&amp;(s=n.data(a+"duration")),null==o&amp;&amp;(o=n.data(a+"stick")),r=null!=r?e.duration(r):null,s=null!=s?e.duration(s):null,o=Boolean(o),{eventProps:i,startTime:r,duration:s,stick:o}}function at(t,e){var n,i;for(n=0;n&lt;e.length;n++)if(i=e[n],i.leftCol&lt;=t.rightCol&amp;&amp;i.rightCol&gt;=t.leftCol)return!0;return!1}function lt(t,e){return t.leftCol-e.leftCol}function dt(t){var e,n,i;if(t.sort(st),e=ut(t),ct(e),n=e[0]){for(i=0;i&lt;n.length;i++)ht(n[i]);for(i=0;i&lt;n.length;i++)ft(n[i],0,0)}}function ut(t){var e,n,i,r=[];for(e=0;e&lt;t.length;e++){for(n=t[e],i=0;i&lt;r.length&amp;&amp;gt(n,r[i]).length;i++);n.level=i,(r[i]||(r[i]=[])).push(n)}return r}function ct(t){var e,n,i,r,s;for(e=0;e&lt;t.length;e++)for(n=t[e],i=0;i&lt;n.length;i++)for(r=n[i],r.forwardSegs=[],s=e+1;s&lt;t.length;s++)gt(r,t[s],r.forwardSegs)}function ht(t){var e,n,i=t.forwardSegs,r=0;if(void 0===t.forwardPressure){for(e=0;e&lt;i.length;e++)n=i[e],ht(n),r=Math.max(r,1+n.forwardPressure);t.forwardPressure=r}}function ft(t,e,n){var i,r=t.forwardSegs;if(void 0===t.forwardCoord)for(r.length?(r.sort(mt),ft(r[0],e+1,n),t.forwardCoord=r[0].backwardCoord):t.forwardCoord=1,t.backwardCoord=t.forwardCoord-(t.forwardCoord-n)/(e+1),i=0;i&lt;r.length;i++)ft(r[i],0,t.forwardCoord)}function gt(t,e,n){n=n||[];for(var i=0;i&lt;e.length;i++)pt(t,e[i])&amp;&amp;n.push(e[i]);return n}function pt(t,e){return t.bottom&gt;e.top&amp;&amp;t.top&lt;e.bottom}function mt(t,e){return e.forwardPressure-t.forwardPressure||(t.backwardCoord||0)-(e.backwardCoord||0)||st(t,e)}function vt(n,r){function o(t){return(t.locale||t.lang).call(t,Q.lang).humanize()}function a(t){it?u()&amp;&amp;(v(),c(t)):l()}function l(){rt=Q.theme?"ui":"fc",n.addClass("fc"),Q.isRTL?n.addClass("fc-rtl"):n.addClass("fc-ltr"),Q.theme?n.addClass("ui-widget"):n.addClass("fc-unthemed"),it=t("&lt;div class='fc-view-container'/&gt;").prependTo(n),et=new yt(q,Q),nt=et.render(),nt&amp;&amp;n.prepend(nt),c(Q.defaultView),Q.handleWindowResize&amp;&amp;(at=_(w,Q.windowResizeDelay),t(window).resize(at))}function d(){st&amp;&amp;st.destroyView(),et.destroy(),it.remove(),n.removeClass("fc fc-ltr fc-rtl fc-unthemed ui-widget"),t(window).unbind("resize",at)}function u(){return n.is(":visible")}function c(e){ft++,st&amp;&amp;e&amp;&amp;st.type!==e&amp;&amp;(et.deactivateButton(st.type),I(),st.start&amp;&amp;st.destroyView(),st.el.remove(),st=null),!st&amp;&amp;e&amp;&amp;(st=h(e),st.el=t("&lt;div class='fc-view fc-"+e+"-view' /&gt;").appendTo(it),et.activateButton(e)),st&amp;&amp;(lt=st.massageCurrentDate(lt),st.start&amp;&amp;lt.isWithin(st.intervalStart,st.intervalEnd)||u()&amp;&amp;(I(),st.start&amp;&amp;st.destroyView(),st.setDate(lt),st.renderView(),Z(),R(),M(),D())),Z(),ft--}function h(t){var e=f(t);return new e["class"](q,e.options,t)}function f(n){function i(e){"function"==typeof e?s=e:"object"==typeof e&amp;&amp;t.extend(r,e)}var r,s,a,l,d,u=Q.defaultButtonText||{},c=Q.buttonText||{},h=Q.views||{},f=n,g=[],p=!1;if(ht[n])return ht[n];for(;f&amp;&amp;!s;)r={},i(Tt[f]),i(h[f]),g.unshift(r),f=r.type;return g.unshift({}),r=t.extend.apply(t,g),s?(a=r.duration||s.duration,a&amp;&amp;(a=e.duration(a),l=E(a),p=1===a.as(l)),p&amp;&amp;h[l]&amp;&amp;(r=t.extend({},h[l],r)),d=c[n]||(p?c[l]:null)||u[n]||(p?u[l]:null)||r.buttonText||s.buttonText||(a?o(a):null)||n,ht[n]={"class":s,options:r,buttonText:d}):void 0}function g(t){return Boolean(f(t))}function p(t){var e=f(t);return e?e.buttonText:void 0}function m(t){return u()?(t&amp;&amp;y(),ft++,st.updateSize(!0),ft--,!0):void 0}function v(){u()&amp;&amp;y()}function y(){ot="number"==typeof Q.contentHeight?Q.contentHeight:"number"==typeof Q.height?Q.height-(nt?nt.outerHeight(!0):0):Math.round(it.width()/Math.max(Q.aspectRatio,.5))}function w(t){!ft&amp;&amp;t.target===window&amp;&amp;st.start&amp;&amp;m(!0)&amp;&amp;st.trigger("windowResize",ct)}function b(){C(),T()}function S(){u()&amp;&amp;(I(),st.destroyViewEvents(),st.renderViewEvents(gt),Z())}function C(){I(),st.destroyViewEvents(),Z()}function D(){!Q.lazyFetching||dt(st.start,st.end)?T():S()}function T(){ut(st.start,st.end)}function H(t){gt=t,S()}function x(){S()}function R(){et.updateTitle(st.title)}function M(){var t=q.getNow();t.isWithin(st.intervalStart,st.intervalEnd)?et.disableButton("today"):et.enableButton("today")}function F(t,e){t=q.moment(t),e=e?q.moment(e):t.hasTime()?t.clone().add(q.defaultTimedEventDuration):t.clone().add(q.defaultAllDayEventDuration),st.select({start:t,end:e})}function G(){st&amp;&amp;st.unselect()}function N(){lt=st.computePrevDate(lt),c()}function V(){lt=st.computeNextDate(lt),c()}function z(){lt.add(-1,"years"),c()}function L(){lt.add(1,"years"),c()}function P(){lt=q.getNow(),c()}function A(t){lt=q.moment(t),c()}function O(t){lt.add(e.duration(t)),c()}function B(t,e){var n,i;e&amp;&amp;g(e)||(e=e||"day",n=et.getViewsWithButtons().join(" "),i=n.match(new RegExp("\\w+"+Y(e))),i||(i=n.match(/\w+Day/)),e=i?i[0]:"agendaDay"),lt=t,c(e)}function W(){return lt.clone()}function I(){it.css({width:"100%",height:it.height(),overflow:"hidden"})}function Z(){it.css({width:"",height:"",overflow:""})}function j(){return q}function X(){return st}function U(t,e){return void 0===e?Q[t]:void(("height"==t||"contentHeight"==t||"aspectRatio"==t)&amp;&amp;(Q[t]=e,m(!0)))}function $(t,e){return Q[t]?Q[t].apply(e||ct,Array.prototype.slice.call(arguments,2)):void 0}var q=this;r=r||{};var K,Q=i({},St,r);K=Q.lang in kt?kt[Q.lang]:kt[St.lang],K&amp;&amp;(Q=i({},St,K,r)),Q.isRTL&amp;&amp;(Q=i({},St,Ct,K||{},r)),q.options=Q,q.render=a,q.destroy=d,q.refetchEvents=b,q.reportEvents=H,q.reportEventChange=x,q.rerenderEvents=S,q.changeView=c,q.select=F,q.unselect=G,q.prev=N,q.next=V,q.prevYear=z,q.nextYear=L,q.today=P,q.gotoDate=A,q.incrementDate=O,q.zoomTo=B,q.getDate=W,q.getCalendar=j,q.getView=X,q.option=U,q.trigger=$,q.isValidViewType=g,q.getViewButtonText=p;var J=k(s(Q.lang));if(Q.monthNames&amp;&amp;(J._months=Q.monthNames),Q.monthNamesShort&amp;&amp;(J._monthsShort=Q.monthNamesShort),Q.dayNames&amp;&amp;(J._weekdays=Q.dayNames),Q.dayNamesShort&amp;&amp;(J._weekdaysShort=Q.dayNamesShort),null!=Q.firstDay){var tt=k(J._week);tt.dow=Q.firstDay,J._week=tt}q.defaultAllDayEventDuration=e.duration(Q.defaultAllDayEventDuration),q.defaultTimedEventDuration=e.duration(Q.defaultTimedEventDuration),q.moment=function(){var t;return"local"===Q.timezone?(t=Dt.moment.apply(null,arguments),t.hasTime()&amp;&amp;t.local()):t="UTC"===Q.timezone?Dt.moment.utc.apply(null,arguments):Dt.moment.parseZone.apply(null,arguments),"_locale"in t?t._locale=J:t._lang=J,t},q.getIsAmbigTimezone=function(){return"local"!==Q.timezone&amp;&amp;"UTC"!==Q.timezone},q.rezoneDate=function(t){return q.moment(t.toArray())},q.getNow=function(){var t=Q.now;return"function"==typeof t&amp;&amp;(t=t()),q.moment(t)},q.calculateWeekNumber=function(t){var e=Q.weekNumberCalculation;return"function"==typeof e?e(t):"local"===e?t.week():"ISO"===e.toUpperCase()?t.isoWeek():void 0},q.getEventEnd=function(t){return t.end?t.end.clone():q.getDefaultEventEnd(t.allDay,t.start)},q.getDefaultEventEnd=function(t,e){var n=e.clone();return t?n.stripTime().add(q.defaultAllDayEventDuration):n.add(q.defaultTimedEventDuration),q.getIsAmbigTimezone()&amp;&amp;n.stripZone(),n},wt.call(q,Q);var et,nt,it,rt,st,ot,at,lt,dt=q.isFetchNeeded,ut=q.fetchEvents,ct=n[0],ht={},ft=0,gt=[];lt=null!=Q.defaultDate?q.moment(Q.defaultDate):q.getNow(),q.getSuggestedViewHeight=function(){return void 0===ot&amp;&amp;v(),ot},q.isHeightAuto=function(){return"auto"===Q.contentHeight||"auto"===Q.height}}function yt(e,n){function i(){var e=n.header;return f=n.theme?"ui":"fc",e?g=t("&lt;div class='fc-toolbar'/&gt;").append(s("left")).append(s("right")).append(s("center")).append('&lt;div class="fc-clear"/&gt;'):void 0}function r(){g.remove()}function s(i){var r=t('&lt;div class="fc-'+i+'"/&gt;'),s=n.header[i];return s&amp;&amp;t.each(s.split(" "),function(i){var s,o=t(),a=!0;t.each(this.split(","),function(i,r){var s,l,d,u,c,h,g,m,v;"title"==r?(o=o.add(t("&lt;h2&gt;&amp;nbsp;&lt;/h2&gt;")),a=!1):(e[r]?s=function(){e[r]()}:e.isValidViewType(r)&amp;&amp;(s=function(){e.changeView(r)},p.push(r),c=e.getViewButtonText(r)),s&amp;&amp;(l=w(n.themeButtonIcons,r),d=w(n.buttonIcons,r),u=w(n.defaultButtonText,r),h=w(n.buttonText,r),g=c||h?N(c||h):l&amp;&amp;n.theme?"&lt;span class='ui-icon ui-icon-"+l+"'&gt;&lt;/span&gt;":d&amp;&amp;!n.theme?"&lt;span class='fc-icon fc-icon-"+d+"'&gt;&lt;/span&gt;":N(u||r),m=["fc-"+r+"-button",f+"-button",f+"-state-default"],v=t('&lt;button type="button" class="'+m.join(" ")+'"&gt;'+g+"&lt;/button&gt;").click(function(){v.hasClass(f+"-state-disabled")||(s(),(v.hasClass(f+"-state-active")||v.hasClass(f+"-state-disabled"))&amp;&amp;v.removeClass(f+"-state-hover"))}).mousedown(function(){v.not("."+f+"-state-active").not("."+f+"-state-disabled").addClass(f+"-state-down")}).mouseup(function(){v.removeClass(f+"-state-down")}).hover(function(){v.not("."+f+"-state-active").not("."+f+"-state-disabled").addClass(f+"-state-hover")},function(){v.removeClass(f+"-state-hover").removeClass(f+"-state-down")}),o=o.add(v)))}),a&amp;&amp;o.first().addClass(f+"-corner-left").end().last().addClass(f+"-corner-right").end(),o.length&gt;1?(s=t("&lt;div/&gt;"),a&amp;&amp;s.addClass("fc-button-group"),s.append(o),r.append(s)):r.append(o)}),r}function o(t){g.find("h2").text(t)}function a(t){g.find(".fc-"+t+"-button").addClass(f+"-state-active")}function l(t){g.find(".fc-"+t+"-button").removeClass(f+"-state-active")}function d(t){g.find(".fc-"+t+"-button").attr("disabled","disabled").addClass(f+"-state-disabled")}function u(t){g.find(".fc-"+t+"-button").removeAttr("disabled").removeClass(f+"-state-disabled")}function c(){return p}var h=this;h.render=i,h.destroy=r,h.updateTitle=o,h.activateButton=a,h.deactivateButton=l,h.disableButton=d,h.enableButton=u,h.getViewsWithButtons=c;var f,g=t(),p=[]}function wt(n){function i(t,e){return!B||t.clone().stripZone()&lt;B.clone().stripZone()||e.clone().stripZone()&gt;W.clone().stripZone()}function r(t,e){B=t,W=e,Q=[];var n=++$,i=U.length;q=i;for(var r=0;i&gt;r;r++)s(U[r],n)}function s(e,n){o(e,function(i){var r,s,o,a=t.isArray(e.events);if(n==$){if(i)for(r=0;r&lt;i.length;r++)s=i[r],o=a?s:E(s,e),o&amp;&amp;Q.push.apply(Q,H(o));q--,q||j(Q)}})}function o(e,i){var r,s,a=Dt.sourceFetchers;for(r=0;r&lt;a.length;r++){if(s=a[r].call(O,e,B.clone(),W.clone(),n.timezone,i),s===!0)return;if("object"==typeof s)return void o(s,i)}var l=e.events;if(l)t.isFunction(l)?(y(),l.call(O,B.clone(),W.clone(),n.timezone,function(t){i(t),w()})):t.isArray(l)?i(l):i();else{var d=e.url;if(d){var u,c=e.success,h=e.error,f=e.complete;u=t.isFunction(e.data)?e.data():e.data;var g=t.extend({},u||{}),p=G(e.startParam,n.startParam),m=G(e.endParam,n.endParam),v=G(e.timezoneParam,n.timezoneParam);p&amp;&amp;(g[p]=B.format()),m&amp;&amp;(g[m]=W.format()),n.timezone&amp;&amp;"local"!=n.timezone&amp;&amp;(g[v]=n.timezone),y(),t.ajax(t.extend({},Qt,e,{data:g,success:function(e){e=e||[];var n=F(c,this,arguments);t.isArray(n)&amp;&amp;(e=n),i(e)},error:function(){F(h,this,arguments),i()},complete:function(){F(f,this,arguments),w()}}))}else i()}}function a(t){var e=l(t);e&amp;&amp;(U.push(e),q++,s(e,$))}function l(e){var n,i,r=Dt.sourceNormalizers;if(t.isFunction(e)||t.isArray(e)?n={events:e}:"string"==typeof e?n={url:e}:"object"==typeof e&amp;&amp;(n=t.extend({},e)),n){for(n.className?"string"==typeof n.className&amp;&amp;(n.className=n.className.split(/\s+/)):n.className=[],t.isArray(n.events)&amp;&amp;(n.origArray=n.events,n.events=t.map(n.events,function(t){return E(t,n)})),i=0;i&lt;r.length;i++)r[i].call(O,n);return n}}function d(e){U=t.grep(U,function(t){return!u(t,e)}),Q=t.grep(Q,function(t){return!u(t.source,e)}),j(Q)}function u(t,e){return t&amp;&amp;e&amp;&amp;c(t)==c(e)}function c(t){return("object"==typeof t?t.origArray||t.googleCalendarId||t.url||t.events:null)||t}function h(t){t.start=O.moment(t.start),t.end?t.end=O.moment(t.end):t.end=null,x(t,f(t)),j(Q)}function f(e){var n={};return t.each(e,function(t,e){g(t)&amp;&amp;void 0!==e&amp;&amp;M(e)&amp;&amp;(n[t]=e)}),n}function g(t){return!/^_|^(id|allDay|start|end)$/.test(t)}function p(t,e){var n,i,r,s=E(t);if(s){for(n=H(s),i=0;i&lt;n.length;i++)r=n[i],r.source||(e&amp;&amp;(X.events.push(r),r.source=X),Q.push(r));return j(Q),n}return[]}function m(e){var n,i;for(null==e?e=function(){return!0}:t.isFunction(e)||(n=e+"",e=function(t){return t._id==n}),Q=t.grep(Q,e,!0),i=0;i&lt;U.length;i++)t.isArray(U[i].events)&amp;&amp;(U[i].events=t.grep(U[i].events,e,!0));j(Q)}function v(e){return t.isFunction(e)?t.grep(Q,e):null!=e?(e+="",t.grep(Q,function(t){return t._id==e})):Q}function y(){K++||I("loading",null,!0,Z())}function w(){--K||I("loading",null,!1,Z())}function E(i,r){var s,o,a,l={};if(n.eventDataTransform&amp;&amp;(i=n.eventDataTransform(i)),r&amp;&amp;r.eventDataTransform&amp;&amp;(i=r.eventDataTransform(i)),t.extend(l,i),r&amp;&amp;(l.source=r),l._id=i._id||(void 0===i.id?"_fc"+Jt++:i.id+""),i.className?"string"==typeof i.className?l.className=i.className.split(/\s+/):l.className=i.className:l.className=[],s=i.start||i.date,o=i.end,T(s)&amp;&amp;(s=e.duration(s)),T(o)&amp;&amp;(o=e.duration(o)),i.dow||e.isDuration(s)||e.isDuration(o))l.start=s?e.duration(s):null,l.end=o?e.duration(o):null,l._recurring=!0;else{if(s&amp;&amp;(s=O.moment(s),!s.isValid()))return!1;o&amp;&amp;(o=O.moment(o),o.isValid()||(o=null)),a=i.allDay,void 0===a&amp;&amp;(a=G(r?r.allDayDefault:void 0,n.allDayDefault)),C(s,o,a,l)}return l}function C(t,e,n,i){i.start=t,i.end=e,i.allDay=n,D(i),bt(i)}function D(t){null==t.allDay&amp;&amp;(t.allDay=!(t.start.hasTime()||t.end&amp;&amp;t.end.hasTime())),t.allDay?(t.start.stripTime(),t.end&amp;&amp;t.end.stripTime()):(t.start.hasTime()||(t.start=O.rezoneDate(t.start)),t.end&amp;&amp;!t.end.hasTime()&amp;&amp;(t.end=O.rezoneDate(t.end))),t.end&amp;&amp;!t.end.isAfter(t.start)&amp;&amp;(t.end=null),t.end||(n.forceEventDuration?t.end=O.getDefaultEventEnd(t.allDay,t.start):t.end=null)}function k(t){var e;return t.end||(e=t.allDay,null==e&amp;&amp;(e=!t.start.hasTime()),t={start:t.start,end:O.getDefaultEventEnd(e,t.start)}),t}function H(e,n,i){var r,s,o,a,l,d,u,c,h,f=[];if(n=n||B,i=i||W,e)if(e._recurring){if(s=e.dow)for(r={},o=0;o&lt;s.length;o++)r[s[o]]=!0;for(a=n.clone().stripTime();a.isBefore(i);)(!r||r[a.day()])&amp;&amp;(l=e.start,d=e.end,u=a.clone(),c=null,l&amp;&amp;(u=u.time(l)),d&amp;&amp;(c=a.clone().time(d)),h=t.extend({},e),C(u,c,!l&amp;&amp;!d,h),f.push(h)),a.add(1,"days")}else f.push(e);return f}function x(e,n){var i,r,s,o,a={};return n=n||{},n.start||(n.start=e.start.clone()),void 0===n.end&amp;&amp;(n.end=e.end?e.end.clone():null),null==n.allDay&amp;&amp;(n.allDay=e.allDay),D(n),i=null!==e._end&amp;&amp;null===n.end,r=n.allDay?S(n.start,e._start):b(n.start,e._start),!i&amp;&amp;n.end&amp;&amp;(s=b(n.end,n.start).subtract(b(e._end||O.getDefaultEventEnd(e._allDay,e._start),e._start))),t.each(n,function(t,e){g(t)&amp;&amp;void 0!==e&amp;&amp;(a[t]=e)}),o=R(v(e._id),i,n.allDay,r,s,a),{dateDelta:r,durationDelta:s,undo:o}}function R(e,n,i,r,s,o){var a=O.getIsAmbigTimezone(),l=[];return r&amp;&amp;!r.valueOf()&amp;&amp;(r=null),s&amp;&amp;!s.valueOf()&amp;&amp;(s=null),t.each(e,function(e,d){var u,c;u={start:d.start.clone(),end:d.end?d.end.clone():null,allDay:d.allDay},t.each(o,function(t){u[t]=d[t]}),c={start:d._start,end:d._end,allDay:d._allDay},n&amp;&amp;(c.end=null),c.allDay=i,D(c),r&amp;&amp;(c.start.add(r),c.end&amp;&amp;c.end.add(r)),s&amp;&amp;(c.end||(c.end=O.getDefaultEventEnd(c.allDay,c.start)),c.end.add(s)),a&amp;&amp;!c.allDay&amp;&amp;(r||s)&amp;&amp;(c.start.stripZone(),c.end&amp;&amp;c.end.stripZone()),t.extend(d,o,c),bt(d),l.push(function(){t.extend(d,u),bt(d)})}),function(){for(var t=0;t&lt;l.length;t++)l[t]()}}function N(){var e,i=n.businessHours,r={className:"fc-nonbusiness",start:"09:00",end:"17:00",dow:[1,2,3,4,5],rendering:"inverse-background"},s=O.getView();return i&amp;&amp;(e="object"==typeof i?t.extend({},r,i):r),e?H(E(e),s.start,s.end):[]}function V(t,e){var i=e.source||{},r=G(e.constraint,i.constraint,n.eventConstraint),s=G(e.overlap,i.overlap,n.eventOverlap);return t=k(t),L(t,r,s,e)}function Y(t){return L(t,n.selectConstraint,n.selectOverlap)}function z(e,n){var i,r;return n&amp;&amp;(i=t.extend({},n,e),r=H(E(i))[0]),r?V(e,r):(e=k(e),Y(e))}function L(t,e,n,i){var r,s,o,a,l;if(t={start:t.start.clone().stripZone(),end:t.end.clone().stripZone()},null!=e){for(r=_(e),s=!1,o=0;o&lt;r.length;o++)if(P(r[o],t)){s=!0;break}if(!s)return!1}for(o=0;o&lt;Q.length;o++)if(a=Q[o],(!i||i._id!==a._id)&amp;&amp;A(a,t)){if(n===!1)return!1;if("function"==typeof n&amp;&amp;!n(a,i))return!1;if(i){if(l=G(a.overlap,(a.source||{}).overlap),l===!1)return!1;if("function"==typeof l&amp;&amp;!l(i,a))return!1}}return!0}function _(t){return"businessHours"===t?N():"object"==typeof t?H(E(t)):v(t)}function P(t,e){var n=t.start.clone().stripZone(),i=O.getEventEnd(t).stripZone();return e.start&gt;=n&amp;&amp;e.end&lt;=i}function A(t,e){var n=t.start.clone().stripZone(),i=O.getEventEnd(t).stripZone();return e.start&lt;i&amp;&amp;e.end&gt;n}var O=this;O.isFetchNeeded=i,O.fetchEvents=r,O.addEventSource=a,O.removeEventSource=d,O.updateEvent=h,O.renderEvent=p,O.removeEvents=m,O.clientEvents=v,O.mutateEvent=x,O.normalizeEventDateProps=D,O.ensureVisibleEventRange=k;var B,W,I=O.trigger,Z=O.getView,j=O.reportEvents,X={events:[]},U=[X],$=0,q=0,K=0,Q=[];t.each((n.events?[n.events]:[]).concat(n.eventSources||[]),function(t,e){var n=l(e);n&amp;&amp;U.push(n)}),O.getBusinessHoursEvents=N,O.isEventRangeAllowed=V,O.isSelectionRangeAllowed=Y,O.isExternalDropRangeAllowed=z}function bt(t){t._allDay=t.allDay,t._start=t.start.clone(),t._end=t.end?t.end.clone():null}var St={titleRangeSeparator:" — ",monthYearFormat:"MMMM YYYY",defaultTimedEventDuration:"02:00:00",defaultAllDayEventDuration:{days:1},forceEventDuration:!1,nextDayThreshold:"09:00:00",defaultView:"month",aspectRatio:1.35,header:{left:"title",center:"",right:"today prev,next"},weekends:!0,weekNumbers:!1,weekNumberTitle:"W",weekNumberCalculation:"local",lazyFetching:!0,startParam:"start",endParam:"end",timezoneParam:"timezone",timezone:!1,minDate:null,maxDate:null,firstDay:0,yearTitleFormat:"YYYY",yearFormat:"YYYY",isRTL:!1,defaultButtonText:{prev:"prev",next:"next",prevYear:"prev year",nextYear:"next year",today:"today",year:"year",month:"month",week:"week",day:"day"},buttonIcons:{prev:"left-single-arrow",next:"right-single-arrow",prevYear:"left-double-arrow",nextYear:"right-double-arrow"},theme:!1,themeButtonIcons:{prev:"circle-triangle-w",next:"circle-triangle-e",prevYear:"seek-prev",nextYear:"seek-next"},dragOpacity:.75,dragRevertDuration:500,dragScroll:!0,unselectAuto:!0,dropAccept:"*",eventLimit:!1,eventLimitText:"more",eventLimitClick:"popover",dayPopoverFormat:"LL",handleWindowResize:!0,windowResizeDelay:200},Et={dayPopoverFormat:"dddd, MMMM D"},Ct={header:{left:"next,prev today",center:"",right:"title"},buttonIcons:{prev:"right-single-arrow",next:"left-single-arrow",prevYear:"right-double-arrow",nextYear:"left-double-arrow"},themeButtonIcons:{prev:"circle-triangle-e",next:"circle-triangle-w",nextYear:"seek-prev",prevYear:"seek-next"}},Dt=t.fullCalendar={version:"2.2.7"},Tt=Dt.views={};t.fn.fullCalendar=function(e){var n=Array.prototype.slice.call(arguments,1),i=this;return this.each(function(r,s){var o,a=t(s),l=a.data("fullCalendar");"string"==typeof e?l&amp;&amp;t.isFunction(l[e])&amp;&amp;(o=l[e].apply(l,n),r||(i=o),"destroy"===e&amp;&amp;a.removeData("fullCalendar")):l||(l=new vt(a,e),a.data("fullCalendar",l),l.render())}),i};var kt=Dt.langs={};Dt.datepickerLang=function(e,n,i){var r=kt[e]||(kt[e]={});r.isRTL=i.isRTL,r.weekNumberTitle=i.weekHeader,t.each(Ht,function(t,e){r[t]=e(i)}),t.datepicker&amp;&amp;(t.datepicker.regional[n]=t.datepicker.regional[e]=i,t.datepicker.regional.en=t.datepicker.regional[""],t.datepicker.setDefaults(i))},Dt.lang=function(e,n){var r,o;r=kt[e]||(kt[e]={}),n&amp;&amp;i(r,n),o=s(e),t.each(xt,function(t,e){void 0===r[t]&amp;&amp;(r[t]=e(o,r))}),St.lang=e};var Ht={defaultButtonText:function(t){return{prev:V(t.prevText),next:V(t.nextText),today:V(t.currentText)}},monthYearFormat:function(t){return t.showMonthAfterYear?"YYYY["+t.yearSuffix+"] MMMM":"MMMM YYYY["+t.yearSuffix+"]"}},xt={dayOfMonthFormat:function(t,e){var n=t.longDateFormat("l");return n=n.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g,""),e.isRTL?n+=" ddd":n="ddd "+n,n},smallTimeFormat:function(t){return t.longDateFormat("LT").replace(":mm","(:mm)").replace(/(\Wmm)$/,"($1)").replace(/\s*a$/i,"a")},extraSmallTimeFormat:function(t){return t.longDateFormat("LT").replace(":mm","(:mm)").replace(/(\Wmm)$/,"($1)").replace(/\s*a$/i,"t")},noMeridiemTimeFormat:function(t){return t.longDateFormat("LT").replace(/\s*a$/i,"")}};Dt.lang("en",Et),Dt.intersectionToSeg=y,Dt.applyAll=F,Dt.debounce=_;var Rt,Mt,Ft,Gt=["sun","mon","tue","wed","thu","fri","sat"],Nt=["year","month","week","day","hour","minute","second","millisecond"],Vt={}.hasOwnProperty,Yt=/^\s*\d{4}-\d\d$/,zt=/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/,Lt=e.fn,_t=t.extend({},Lt);Dt.moment=function(){return P(arguments)},Dt.moment.utc=function(){var t=P(arguments,!0);return t.hasTime()&amp;&amp;t.utc(),t},Dt.moment.parseZone=function(){return P(arguments,!0,!0)},Lt.clone=function(){var t=_t.clone.apply(this,arguments);return O(this,t),this._fullCalendar&amp;&amp;(t._fullCalendar=!0),t},Lt.time=function(t){if(!this._fullCalendar)return _t.time.apply(this,arguments);if(null==t)return e.duration({hours:this.hours(),minutes:this.minutes(),seconds:this.seconds(),milliseconds:this.milliseconds()});this._ambigTime=!1,e.isDuration(t)||e.isMoment(t)||(t=e.duration(t));var n=0;return e.isDuration(t)&amp;&amp;(n=24*Math.floor(t.asDays())),this.hours(n+t.hours()).minutes(t.minutes()).seconds(t.seconds()).milliseconds(t.milliseconds())},Lt.stripTime=function(){var t;return this._ambigTime||(t=this.toArray(),this.utc(),Mt(this,t.slice(0,3)),this._ambigTime=!0,this._ambigZone=!0),this},Lt.hasTime=function(){return!this._ambigTime},Lt.stripZone=function(){var t,e;return this._ambigZone||(t=this.toArray(),e=this._ambigTime,this.utc(),Mt(this,t),this._ambigTime=e||!1,this._ambigZone=!0),this},Lt.hasZone=function(){return!this._ambigZone},Lt.local=function(){var t=this.toArray(),e=this._ambigZone;return _t.local.apply(this,arguments),this._ambigTime=!1,this._ambigZone=!1,e&amp;&amp;Ft(this,t),this},Lt.utc=function(){return _t.utc.apply(this,arguments),this._ambigTime=!1,this._ambigZone=!1,this},t.each(["zone","utcOffset"],function(t,e){_t[e]&amp;&amp;(Lt[e]=function(t){return null!=t&amp;&amp;(this._ambigTime=!1,this._ambigZone=!1),_t[e].apply(this,arguments)})}),Lt.format=function(){return this._fullCalendar&amp;&amp;arguments[0]?I(this,arguments[0]):this._ambigTime?W(this,"YYYY-MM-DD"):this._ambigZone?W(this,"YYYY-MM-DD[T]HH:mm:ss"):_t.format.apply(this,arguments)},Lt.toISOString=function(){return this._ambigTime?W(this,"YYYY-MM-DD"):this._ambigZone?W(this,"YYYY-MM-DD[T]HH:mm:ss"):_t.toISOString.apply(this,arguments)},Lt.isWithin=function(t,e){var n=A([this,t,e]);return n[0]&gt;=n[1]&amp;&amp;n[0]&lt;n[2]},Lt.isSame=function(t,e){var n;return this._fullCalendar?e?(n=A([this,t],!0),_t.isSame.call(n[0],n[1],e)):(t=Dt.moment.parseZone(t),_t.isSame.call(this,t)&amp;&amp;Boolean(this._ambigTime)===Boolean(t._ambigTime)&amp;&amp;Boolean(this._ambigZone)===Boolean(t._ambigZone)):_t.isSame.apply(this,arguments)},t.each(["isBefore","isAfter"],function(t,e){Lt[e]=function(t,n){var i;return this._fullCalendar?(i=A([this,t]),_t[e].call(i[0],i[1],n)):_t[e].apply(this,arguments)}}),Rt="_d"in e()&amp;&amp;"updateOffset"in e,Mt=Rt?function(t,n){t._d.setTime(Date.UTC.apply(Date,n)),e.updateOffset(t,!1)}:B,Ft=Rt?function(t,n){t._d.setTime(+new Date(n[0]||0,n[1]||0,n[2]||0,n[3]||0,n[4]||0,n[5]||0,n[6]||0)),e.updateOffset(t,!1)}:B;var Pt={t:function(t){return W(t,"a").charAt(0)},T:function(t){return W(t,"A").charAt(0)}};Dt.formatRange=X;var At={Y:"year",M:"month",D:"day",d:"day",A:"second",a:"second",T:"second",t:"second",H:"second",h:"second",m:"second",s:"second"},Ot={};Dt.Class=Q,Q.extend=function(t){var e,n=this;return t=t||{},R(t,"constructor")&amp;&amp;(e=t.constructor),"function"!=typeof e&amp;&amp;(e=t.constructor=function(){n.apply(this,arguments)}),e.prototype=k(n.prototype),H(t,e.prototype),x(t,e.prototype),H(n,e),e},Q.mixin=function(t){H(t.prototype||t,this.prototype)};var Bt=Q.extend({isHidden:!0,options:null,el:null,documentMousedownProxy:null,margin:10,constructor:function(t){this.options=t||{}},show:function(){this.isHidden&amp;&amp;(this.el||this.render(),this.el.show(),this.position(),this.isHidden=!1,this.trigger("show"))},hide:function(){this.isHidden||(this.el.hide(),this.isHidden=!0,this.trigger("hide"))},render:function(){var e=this,n=this.options;this.el=t('&lt;div class="fc-popover"/&gt;').addClass(n.className||"").css({top:0,left:0}).append(n.content).appendTo(n.parentEl),this.el.on("click",".fc-close",function(){e.hide()}),n.autoHide&amp;&amp;t(document).on("mousedown",this.documentMousedownProxy=t.proxy(this,"documentMousedown"))},documentMousedown:function(e){this.el&amp;&amp;!t(e.target).closest(this.el).length&amp;&amp;this.hide()},destroy:function(){this.hide(),this.el&amp;&amp;(this.el.remove(),this.el=null),t(document).off("mousedown",this.documentMousedownProxy)},position:function(){var e,n,i,r,s,o=this.options,a=this.el.offsetParent().offset(),l=this.el.outerWidth(),d=(this.el.outerHeight(),t(window)),u=p(this.el);r=o.top||0,s=void 0!==o.left?o.left:void 0!==o.right?o.right-l:0,u.is(window)||u.is(document)?(u=d,e=0,n=0):(i=u.offset(),e=i.top,n=i.left),e+=d.scrollTop(),n+=d.scrollLeft(),o.viewportConstrain!==!1&amp;&amp;(s=Math.min(s,n+u.outerWidth()-l-this.margin),s=Math.max(s,n+this.margin)),this.el.css({top:r-a.top,left:s-a.left})},trigger:function(t){this.options[t]&amp;&amp;this.options[t].apply(this,Array.prototype.slice.call(arguments,1))}}),Wt=Q.extend({grid:null,rowCoords:null,colCoords:null,containerEl:null,minX:null,maxX:null,minY:null,maxY:null,constructor:function(t){this.grid=t},build:function(){this.rowCoords=this.grid.computeRowCoords(),this.colCoords=this.grid.computeColCoords(),this.computeBounds()},clear:function(){this.rowCoords=null,this.colCoords=null},getCell:function(e,n){var i,r,s=this.rowCoords,o=this.colCoords,a=null,l=null,d=null,u=this.inBounds(e,n);if(!u&amp;&amp;"year"==this.grid.view.name)return t.each(this.grid.view.dayGrids,function(t,i){
    var r=i.coordMap;return r.computeBounds(),r.inBounds(e,n)?(r.build(),d=r.getCell(e,n),!1):void 0}),d;for(i=0;i&lt;s.length;i++)if(r=s[i],n&gt;=r.top&amp;&amp;n&lt;r.bottom){a=i;break}for(i=0;i&lt;o.length;i++)if(r=o[i],e&gt;=r.left&amp;&amp;e&lt;r.right){l=i;break}return null!==a&amp;&amp;null!==l?(d=this.grid.getCell(a,l),d.grid=this.grid,d):null},computeBounds:function(){var t;this.containerEl&amp;&amp;(t=this.containerEl.offset(),this.minX=t.left,this.maxX=t.left+this.containerEl.outerWidth(),this.minY=t.top,this.maxY=t.top+this.containerEl.outerHeight())},inBounds:function(t,e){return this.containerEl?t&gt;=this.minX&amp;&amp;t&lt;this.maxX&amp;&amp;e&gt;=this.minY&amp;&amp;e&lt;this.maxY:!0}}),It=Q.extend({coordMaps:null,constructor:function(t){this.coordMaps=t},build:function(){var t,e=this.coordMaps;for(t=0;t&lt;e.length;t++)e[t].build()},getCell:function(t,e){var n,i=this.coordMaps,r=null;for(n=0;n&lt;i.length&amp;&amp;!r;n++)r=i[n].getCell(t,e);return r},clear:function(){var t,e=this.coordMaps;for(t=0;t&lt;e.length;t++)e[t].clear()}}),Zt=Q.extend({coordMap:null,options:null,isListening:!1,isDragging:!1,origCell:null,cell:null,mouseX0:null,mouseY0:null,mousemoveProxy:null,mouseupProxy:null,scrollEl:null,scrollBounds:null,scrollTopVel:null,scrollLeftVel:null,scrollIntervalId:null,scrollHandlerProxy:null,scrollSensitivity:30,scrollSpeed:200,scrollIntervalMs:50,constructor:function(t,e){this.coordMap=t,this.options=e||{}},mousedown:function(t){v(t)&amp;&amp;(t.preventDefault(),this.startListening(t),this.options.distance||this.startDrag(t))},startListening:function(e){var n,i;this.isListening||(e&amp;&amp;this.options.scroll&amp;&amp;(n=p(t(e.target)),n.is(window)||n.is(document)||(this.scrollEl=n,this.scrollHandlerProxy=_(t.proxy(this,"scrollHandler"),100),this.scrollEl.on("scroll",this.scrollHandlerProxy))),this.computeCoords(),e&amp;&amp;(i=this.getCell(e),this.origCell=i,this.mouseX0=e.pageX,this.mouseY0=e.pageY),t(document).on("mousemove",this.mousemoveProxy=t.proxy(this,"mousemove")).on("mouseup",this.mouseupProxy=t.proxy(this,"mouseup")).on("selectstart",this.preventDefault),this.isListening=!0,this.trigger("listenStart",e))},computeCoords:function(){this.coordMap.build(),this.computeScrollBounds()},mousemove:function(t){var e,n;this.isDragging||(e=this.options.distance||1,n=Math.pow(t.pageX-this.mouseX0,2)+Math.pow(t.pageY-this.mouseY0,2),n&gt;=e*e&amp;&amp;this.startDrag(t)),this.isDragging&amp;&amp;this.drag(t)},startDrag:function(t){var e;this.isListening||this.startListening(),this.isDragging||(this.isDragging=!0,this.trigger("dragStart",t),e=this.getCell(t),e&amp;&amp;this.cellOver(e))},drag:function(t){var e;this.isDragging&amp;&amp;(e=this.getCell(t),J(e,this.cell)||(this.cell&amp;&amp;this.cellOut(),e&amp;&amp;this.cellOver(e)),this.dragScroll(t))},cellOver:function(t){this.cell=t,this.trigger("cellOver",t,J(t,this.origCell))},cellOut:function(){this.cell&amp;&amp;(this.trigger("cellOut",this.cell),this.cell=null)},mouseup:function(t){this.stopDrag(t),this.stopListening(t)},stopDrag:function(t){this.isDragging&amp;&amp;(this.stopScrolling(),this.trigger("dragStop",t),this.isDragging=!1)},stopListening:function(e){this.isListening&amp;&amp;(this.scrollEl&amp;&amp;(this.scrollEl.off("scroll",this.scrollHandlerProxy),this.scrollHandlerProxy=null),t(document).off("mousemove",this.mousemoveProxy).off("mouseup",this.mouseupProxy).off("selectstart",this.preventDefault),this.mousemoveProxy=null,this.mouseupProxy=null,this.isListening=!1,this.trigger("listenStop",e),this.origCell=this.cell=null,this.coordMap.clear())},getCell:function(t){return this.coordMap.getCell(t.pageX,t.pageY)},trigger:function(t){this.options[t]&amp;&amp;this.options[t].apply(this,Array.prototype.slice.call(arguments,1))},preventDefault:function(t){t.preventDefault()},computeScrollBounds:function(){var t,e=this.scrollEl;e&amp;&amp;(t=e.offset(),this.scrollBounds={top:t.top,left:t.left,bottom:t.top+e.outerHeight(),right:t.left+e.outerWidth()})},dragScroll:function(t){var e,n,i,r,s=this.scrollSensitivity,o=this.scrollBounds,a=0,l=0;o&amp;&amp;(e=(s-(t.pageY-o.top))/s,n=(s-(o.bottom-t.pageY))/s,i=(s-(t.pageX-o.left))/s,r=(s-(o.right-t.pageX))/s,e&gt;=0&amp;&amp;1&gt;=e?a=e*this.scrollSpeed*-1:n&gt;=0&amp;&amp;1&gt;=n&amp;&amp;(a=n*this.scrollSpeed),i&gt;=0&amp;&amp;1&gt;=i?l=i*this.scrollSpeed*-1:r&gt;=0&amp;&amp;1&gt;=r&amp;&amp;(l=r*this.scrollSpeed)),this.setScrollVel(a,l)},setScrollVel:function(e,n){this.scrollTopVel=e,this.scrollLeftVel=n,this.constrainScrollVel(),!this.scrollTopVel&amp;&amp;!this.scrollLeftVel||this.scrollIntervalId||(this.scrollIntervalId=setInterval(t.proxy(this,"scrollIntervalFunc"),this.scrollIntervalMs))},constrainScrollVel:function(){var t=this.scrollEl;this.scrollTopVel&lt;0?t.scrollTop()&lt;=0&amp;&amp;(this.scrollTopVel=0):this.scrollTopVel&gt;0&amp;&amp;t.scrollTop()+t[0].clientHeight&gt;=t[0].scrollHeight&amp;&amp;(this.scrollTopVel=0),this.scrollLeftVel&lt;0?t.scrollLeft()&lt;=0&amp;&amp;(this.scrollLeftVel=0):this.scrollLeftVel&gt;0&amp;&amp;t.scrollLeft()+t[0].clientWidth&gt;=t[0].scrollWidth&amp;&amp;(this.scrollLeftVel=0)},scrollIntervalFunc:function(){var t=this.scrollEl,e=this.scrollIntervalMs/1e3;this.scrollTopVel&amp;&amp;t.scrollTop(t.scrollTop()+this.scrollTopVel*e),this.scrollLeftVel&amp;&amp;t.scrollLeft(t.scrollLeft()+this.scrollLeftVel*e),this.constrainScrollVel(),this.scrollTopVel||this.scrollLeftVel||this.stopScrolling()},stopScrolling:function(){this.scrollIntervalId&amp;&amp;(clearInterval(this.scrollIntervalId),this.scrollIntervalId=null,this.computeCoords())},scrollHandler:function(){this.scrollIntervalId||this.computeCoords()}}),jt=Q.extend({options:null,sourceEl:null,el:null,parentEl:null,top0:null,left0:null,mouseY0:null,mouseX0:null,topDelta:null,leftDelta:null,mousemoveProxy:null,isFollowing:!1,isHidden:!1,isAnimating:!1,constructor:function(e,n){this.options=n=n||{},this.sourceEl=e,this.parentEl=n.parentEl?t(n.parentEl):e.parent()},start:function(e){this.isFollowing||(this.isFollowing=!0,this.mouseY0=e.pageY,this.mouseX0=e.pageX,this.topDelta=0,this.leftDelta=0,this.isHidden||this.updatePosition(),t(document).on("mousemove",this.mousemoveProxy=t.proxy(this,"mousemove")))},stop:function(e,n){function i(){this.isAnimating=!1,r.destroyEl(),this.top0=this.left0=null,n&amp;&amp;n()}var r=this,s=this.options.revertDuration;this.isFollowing&amp;&amp;!this.isAnimating&amp;&amp;(this.isFollowing=!1,t(document).off("mousemove",this.mousemoveProxy),e&amp;&amp;s&amp;&amp;!this.isHidden?(this.isAnimating=!0,this.el.animate({top:this.top0,left:this.left0},{duration:s,complete:i})):i())},getEl:function(){var t=this.el;return t||(this.sourceEl.width(),t=this.el=this.sourceEl.clone().css({position:"absolute",visibility:"",display:this.isHidden?"none":"",margin:0,right:"auto",bottom:"auto",width:this.sourceEl.width(),height:this.sourceEl.height(),opacity:this.options.opacity||"",zIndex:this.options.zIndex}).appendTo(this.parentEl)),t},destroyEl:function(){this.el&amp;&amp;(this.el.remove(),this.el=null)},updatePosition:function(){var t,e;this.getEl(),null===this.top0&amp;&amp;(this.sourceEl.width(),t=this.sourceEl.offset(),e=this.el.offsetParent().offset(),this.top0=t.top-e.top,this.left0=t.left-e.left),this.el.css({top:this.top0+this.topDelta,left:this.left0+this.leftDelta})},mousemove:function(t){this.topDelta=t.pageY-this.mouseY0,this.leftDelta=t.pageX-this.mouseX0,this.isHidden||this.updatePosition()},hide:function(){this.isHidden||(this.isHidden=!0,this.el&amp;&amp;this.el.hide())},show:function(){this.isHidden&amp;&amp;(this.isHidden=!1,this.updatePosition(),this.getEl().show())}}),Xt=Q.extend({view:null,isRTL:null,cellHtml:"&lt;td/&gt;",constructor:function(t){this.view=t,this.isRTL=t.opt("isRTL")},rowHtml:function(t,e){var n,i,r=this.getHtmlRenderer("cell",t),s="";for(e=e||0,n=0;n&lt;this.colCnt;n++)i=this.getCell(e,n),s+=r(i);return s=this.bookendCells(s,t,e),"&lt;tr&gt;"+s+"&lt;/tr&gt;"},bookendCells:function(t,e,n){var i=this.getHtmlRenderer("intro",e)(n||0,this),r=this.getHtmlRenderer("outro",e)(n||0,this),s=this.isRTL?r:i,o=this.isRTL?i:r;return"string"==typeof t?s+t+o:t.prepend(s).append(o)},getHtmlRenderer:function(t,e){var n,i,r,s,o=this.view;return n=t+"Html",e&amp;&amp;(i=e+Y(t)+"Html"),i&amp;&amp;(s=o[i])?r=o:i&amp;&amp;(s=this[i])?r=this:(s=o[n])?r=o:(s=this[n])&amp;&amp;(r=this),"function"==typeof s?function(){return s.apply(r,arguments)||""}:function(){return s||""}}}),Ut=Dt.Grid=Xt.extend({start:null,end:null,rowCnt:0,colCnt:0,rowData:null,colData:null,el:null,coordMap:null,elsByFill:null,documentDragStartProxy:null,colHeadFormat:null,eventTimeFormat:null,displayEventEnd:null,constructor:function(){Xt.apply(this,arguments),this.coordMap=new Wt(this),this.elsByFill={},this.documentDragStartProxy=t.proxy(this,"documentDragStart")},render:function(){this.bindHandlers()},destroy:function(){this.unbindHandlers()},computeColHeadFormat:function(){},computeEventTimeFormat:function(){return this.view.opt("smallTimeFormat")},computeDisplayEventEnd:function(){return!1},setRange:function(t){var e=this.view;this.start=t.start.clone(),this.end=t.end.clone(),this.rowData=[],this.colData=[],this.updateCells(),this.colHeadFormat=e.opt("columnFormat")||this.computeColHeadFormat(),this.eventTimeFormat=e.opt("timeFormat")||this.computeEventTimeFormat(),this.displayEventEnd=e.opt("displayEventEnd"),null==this.displayEventEnd&amp;&amp;(this.displayEventEnd=this.computeDisplayEventEnd())},updateCells:function(){},rangeToSegs:function(t){},getCell:function(e,n){var i;return null==n&amp;&amp;("number"==typeof e?(n=e%this.colCnt,e=Math.floor(e/this.colCnt)):(n=e.col,e=e.row)),i={row:e,col:n},t.extend(i,this.getRowData(e),this.getColData(n)),t.extend(i,this.computeCellRange(i)),i},computeCellRange:function(t){},getRowData:function(t){return this.rowData[t]||{}},getColData:function(t){return this.colData[t]||{}},getRowEl:function(t){},getColEl:function(t){},getCellDayEl:function(t){return this.getColEl(t.col)||this.getRowEl(t.row)},computeRowCoords:function(){var t,e,n,i=[];for(t=0;t&lt;this.rowCnt;t++)e=this.getRowEl(t),n={top:e.offset().top},t&gt;0&amp;&amp;(i[t-1].bottom=n.top),i.push(n);return n.bottom=n.top+e.outerHeight(),i},computeColCoords:function(){var t,e,n,i=[];for(t=0;t&lt;this.colCnt;t++)e=this.getColEl(t),n={left:e.offset().left},t&gt;0&amp;&amp;(i[t-1].right=n.left),i.push(n);return n.right=n.left+e.outerWidth(),i},bindHandlers:function(){var e=this;this.el.on("mousedown",function(n){t(n.target).is(".fc-event-container *, .fc-more")||t(n.target).closest(".fc-popover").length||e.dayMousedown(n)}),this.bindSegHandlers(),t(document).on("dragstart",this.documentDragStartProxy)},unbindHandlers:function(){t(document).off("dragstart",this.documentDragStartProxy)},dayMousedown:function(t){var e,n,i=this,r=this.view,s=r.opt("selectable"),o=new Zt(this.coordMap,{scroll:r.opt("dragScroll"),dragStart:function(){r.unselect()},cellOver:function(t,r){var a=o.origCell;a&amp;&amp;(e=r?t:null,s&amp;&amp;(n=i.computeSelection(a,t),n?i.renderSelection(n):l()))},cellOut:function(t){e=null,n=null,i.destroySelection(),d()},listenStop:function(t){e&amp;&amp;r.trigger("dayClick",i.getCellDayEl(e),e.start,t),n&amp;&amp;r.reportSelection(n,t),d()}});o.mousedown(t)},renderRangeHelper:function(t,e){var n;n=e?k(e.event):{},n.start=t.start.clone(),n.end=t.end?t.end.clone():null,n.allDay=null,this.view.calendar.normalizeEventDateProps(n),n.className=(n.className||[]).concat("fc-helper"),e||(n.editable=!1),this.renderHelper(n,e)},renderHelper:function(t,e){},destroyHelper:function(){},renderSelection:function(t){"year"!=this.view.name||t.rendered||(this.view.destroySelection(),t.rendered=!0,this.view.renderSelection(t,this)),this.renderHighlight(t)},destroySelection:function(){this.destroyHighlight()},computeSelection:function(t,e){var n,i=[t.start,t.end,e.start,e.end];return i.sort(z),n={start:i[0].clone(),end:i[3].clone()},this.view.calendar.isSelectionRangeAllowed(n)?n:null},renderHighlight:function(t){this.renderFill("highlight",this.rangeToSegs(t))},destroyHighlight:function(){this.destroyFill("highlight")},highlightSegClasses:function(){return["fc-highlight"]},renderFill:function(t,e){},destroyFill:function(t){var e=this.elsByFill[t];e&amp;&amp;(e.remove(),delete this.elsByFill[t])},renderFillSegEls:function(e,n){var i,r=this,s=this[e+"SegEl"],o="",a=[];if(n.length){for(i=0;i&lt;n.length;i++)o+=this.fillSegHtml(e,n[i]);t(o).each(function(e,i){var o=n[e],l=t(i);s&amp;&amp;(l=s.call(r,o,l)),l&amp;&amp;(l=t(l),l.is(r.fillSegTag)&amp;&amp;(o.el=l,a.push(o)))})}return a},fillSegTag:"div",fillSegHtml:function(t,e){var n=this[t+"SegClasses"],i=this[t+"SegStyles"],r=n?n.call(this,e):[],s=i?i.call(this,e):"";return"&lt;"+this.fillSegTag+(r.length?' class="'+r.join(" ")+'"':"")+(s?' style="'+s+'"':"")+" /&gt;"},headHtml:function(){return'&lt;div class="fc-row '+this.view.widgetHeaderClass+'"&gt;&lt;table&gt;&lt;thead&gt;'+this.rowHtml("head")+"&lt;/thead&gt;&lt;/table&gt;&lt;/div&gt;"},headCellHtml:function(t){var e=this.view,n=t.start;return'&lt;th class="fc-day-header '+e.widgetHeaderClass+" fc-"+Gt[n.day()]+'"&gt;'+N(n.format(this.colHeadFormat))+"&lt;/th&gt;"},bgCellHtml:function(t){var e=this.view,n=t.start,i=this.getDayClasses(n);return i.unshift("fc-day",e.widgetContentClass),'&lt;td class="'+i.join(" ")+'" data-date="'+n.format("YYYY-MM-DD")+'"&gt;&lt;/td&gt;'},getDayClasses:function(t){var e=this.view,n=e.calendar.getNow().stripTime(),i=["fc-"+Gt[t.day()]];return"month"===e.name&amp;&amp;t.month()!=e.intervalStart.month()&amp;&amp;i.push("fc-other-month"),t.isSame(n,"day")?i.push("fc-today",e.highlightStateClass):n&gt;t?i.push("fc-past"):i.push("fc-future"),i}});Ut.mixin({mousedOverSeg:null,isDraggingSeg:!1,isResizingSeg:!1,segs:null,renderEvents:function(t){var e,n,i=this.eventsToSegs(t),r=[],s=[];for(e=0;e&lt;i.length;e++)n=i[e],tt(n.event)?r.push(n):s.push(n);r=this.renderBgSegs(r)||r,s=this.renderFgSegs(s)||s,this.segs=r.concat(s)},destroyEvents:function(){this.triggerSegMouseout(),this.destroyFgSegs(),this.destroyBgSegs(),this.segs=null},getEventSegs:function(){return this.segs||[]},renderFgSegs:function(t){},destroyFgSegs:function(){},renderFgSegEls:function(e,n){var i,r=this.view,s="",o=[];if(e.length){for(i=0;i&lt;e.length;i++)s+=this.fgSegHtml(e[i],n);t(s).each(function(n,i){var s=e[n],a=r.resolveEventEl(s.event,t(i));a&amp;&amp;(a.data("fc-seg",s),s.el=a,o.push(s))})}return o},fgSegHtml:function(t,e){},renderBgSegs:function(t){return this.renderFill("bgEvent",t)},destroyBgSegs:function(){this.destroyFill("bgEvent")},bgEventSegEl:function(t,e){return this.view.resolveEventEl(t.event,e)},bgEventSegClasses:function(t){var e=t.event,n=e.source||{};return["fc-bgevent"].concat(e.className,n.className||[])},bgEventSegStyles:function(t){var e=this.view,n=t.event,i=n.source||{},r=n.color,s=i.color,o=e.opt("eventColor"),a=n.backgroundColor||r||i.backgroundColor||s||e.opt("eventBackgroundColor")||o;return a?"background-color:"+a:""},businessHoursSegClasses:function(t){return["fc-nonbusiness","fc-bgevent"]},bindSegHandlers:function(){var e=this,n=this.view;t.each({mouseenter:function(t,n){e.triggerSegMouseover(t,n)},mouseleave:function(t,n){e.triggerSegMouseout(t,n)},click:function(t,e){return n.trigger("eventClick",this,t.event,e)},mousedown:function(i,r){t(r.target).is(".fc-resizer")&amp;&amp;n.isEventResizable(i.event)?e.segResizeMousedown(i,r):n.isEventDraggable(i.event)&amp;&amp;e.segDragMousedown(i,r)}},function(n,i){e.el.on(n,".fc-event-container &gt; *",function(n){var r=t(this).data("fc-seg");return!r||e.isDraggingSeg||e.isResizingSeg?void 0:i.call(this,r,n)})})},triggerSegMouseover:function(t,e){this.mousedOverSeg||(this.mousedOverSeg=t,this.view.trigger("eventMouseover",t.el[0],t.event,e))},triggerSegMouseout:function(t,e){e=e||{},this.mousedOverSeg&amp;&amp;(t=t||this.mousedOverSeg,this.mousedOverSeg=null,this.view.trigger("eventMouseout",t.el[0],t.event,e))},segDragMousedown:function(e,n){var i,r=this,s=this.view,o=e.el,a=e.event;if("year"==s.name){var u=t(o).closest("td.fc-year-monthly-td"),c=u.closest("table").find(".fc-year-monthly-td"),h=c.index(u);s.dayGrid=s.dayGrids[h]}var f=new jt(e.el,{parentEl:s.el,opacity:s.opt("dragOpacity"),revertDuration:s.opt("dragRevertDuration"),zIndex:2}),g=new Zt(s.coordMap,{distance:5,scroll:s.opt("dragScroll"),listenStart:function(t){f.hide(),f.start(t)},dragStart:function(t){r.triggerSegMouseout(e,t),r.isDraggingSeg=!0,s.hideEvent(a),s.trigger("eventDragStart",o[0],a,t,{})},cellOver:function(t,n){var o=e.cell||g.origCell;i=r.computeEventDrop(o,t,a),i?(s.renderDrag(i,e)?f.hide():f.show(),n&amp;&amp;(i=null)):(f.show(),l())},cellOut:function(){i=null,s.destroyDrag(),f.show(),d()},dragStop:function(t){f.stop(!i,function(){r.isDraggingSeg=!1,s.destroyDrag(),s.showEvent(a),s.trigger("eventDragStop",o[0],a,t,{}),i&amp;&amp;s.reportEventDrop(a,i,o,t)}),d()},listenStop:function(){f.stop()}});g.mousedown(n)},computeEventDrop:function(t,e,n){var i,r,s,o,a,l=t.start,d=e.start;return l.hasTime()===d.hasTime()?(i=b(d,l),r=n.start.clone().add(i),s=null===n.end?null:n.end.clone().add(i),o=n.allDay):(r=d.clone(),s=null,o=!d.hasTime()),a={start:r,end:s,allDay:o},this.view.calendar.isEventRangeAllowed(a,n)?a:null},documentDragStart:function(e,n){var i,r,s=this.view;s.opt("droppable")&amp;&amp;(i=t(e.target),r=s.opt("dropAccept"),(t.isFunction(r)?r.call(i[0],i):i.is(r))&amp;&amp;this.startExternalDrag(i,e,n))},startExternalDrag:function(e,n,i){var r,s,o=this,a=ot(e);r=new Zt(this.coordMap,{cellOver:function(t){s=o.computeExternalDrop(t,a),s?o.renderDrag(s):l()},cellOut:function(){s=null,o.destroyDrag(),d()}}),t(document).one("dragstop",function(t,n){o.destroyDrag(),d(),s&amp;&amp;o.view.reportExternalDrop(a,s,e,t,n)}),r.startDrag(n)},computeExternalDrop:function(t,e){var n={start:t.start.clone(),end:null};return e.startTime&amp;&amp;!n.start.hasTime()&amp;&amp;n.start.time(e.startTime),e.duration&amp;&amp;(n.end=n.start.clone().add(e.duration)),this.view.calendar.isExternalDropRangeAllowed(n,e.eventProps)?n:null},renderDrag:function(t,e){},destroyDrag:function(){},segResizeMousedown:function(e,n){function i(){o.destroyEventResize(),a.showEvent(h),d()}var r,s,o=this,a=this.view,u=a.calendar,c=e.el,h=e.event,f=h.start,g=u.getEventEnd(h);s=new Zt(this.coordMap,{distance:5,scroll:a.opt("dragScroll"),dragStart:function(t){o.triggerSegMouseout(e,t),o.isResizingSeg=!0,a.trigger("eventResizeStart",c[0],h,t,{})},cellOver:function(n){r=n.end,r.isAfter(f)||(r=f.clone().add(b(n.end,n.start))),r.isSame(g)?r=null:u.isEventRangeAllowed({start:f,end:r},h)?(o.renderEventResize({start:f,end:r},e),"year"==a.name&amp;&amp;t.each(a.dayGrids,function(t,n){n!==o&amp;&amp;(n.destroyEventResize(),n.renderEventResize({start:f,end:r},e))}),a.hideEvent(h)):(r=null,l())},cellOut:function(){r=null,i()},dragStop:function(t){o.isResizingSeg=!1,i(),a.trigger("eventResizeStop",c[0],h,t,{}),r&amp;&amp;a.reportEventResize(h,r,c,t)}}),s.mousedown(n)},renderEventResize:function(t,e){},destroyEventResize:function(){},getEventTimeText:function(t,e){return e=e||this.eventTimeFormat,t.end&amp;&amp;this.displayEventEnd?this.view.formatRange(t,e):t.start.format(e)},getSegClasses:function(t,e,n){var i=t.event,r=["fc-event",t.isStart?"fc-start":"fc-not-start",t.isEnd?"fc-end":"fc-not-end"].concat(i.className,i.source?i.source.className:[]);return e&amp;&amp;r.push("fc-draggable"),n&amp;&amp;r.push("fc-resizable"),r},getEventSkinCss:function(t){var e=this.view,n=t.source||{},i=t.color,r=n.color,s=e.opt("eventColor"),o=t.backgroundColor||i||n.backgroundColor||r||e.opt("eventBackgroundColor")||s,a=t.borderColor||i||n.borderColor||r||e.opt("eventBorderColor")||s,l=t.textColor||n.textColor||e.opt("eventTextColor"),d=[];return o&amp;&amp;d.push("background-color:"+o),a&amp;&amp;d.push("border-color:"+a),l&amp;&amp;d.push("color:"+l),d.join(";")},eventsToSegs:function(t,e){var n,i=this.eventsToRanges(t),r=[];for(n=0;n&lt;i.length;n++)r.push.apply(r,this.eventRangeToSegs(i[n],e));return r},eventsToRanges:function(e){var n=this,i=it(e),r=[];return t.each(i,function(t,e){e.length&amp;&amp;r.push.apply(r,et(e[0])?n.eventsToInverseRanges(e):n.eventsToNormalRanges(e))}),r},eventsToNormalRanges:function(t){var e,n,i,r,s=this.view.calendar,o=[];for(e=0;e&lt;t.length;e++)n=t[e],i=n.start.clone().stripZone(),r=s.getEventEnd(n).stripZone(),o.push({event:n,start:i,end:r,eventStartMS:+i,eventDurationMS:r-i});return o},eventsToInverseRanges:function(t){var e,n,i=this.view,r=i.start.clone().stripZone(),s=i.end.clone().stripZone(),o=this.eventsToNormalRanges(t),a=[],l=t[0],d=r;for(o.sort(rt),e=0;e&lt;o.length;e++)n=o[e],n.start&gt;d&amp;&amp;a.push({event:l,start:d,end:n.start}),d=n.end;return s&gt;d&amp;&amp;a.push({event:l,start:d,end:s}),a},eventRangeToSegs:function(t,e){var n,i,r;for(n=e?e(t):this.rangeToSegs(t),i=0;i&lt;n.length;i++)r=n[i],r.event=t.event,r.eventStartMS=t.eventStartMS,r.eventDurationMS=t.eventDurationMS;return n}}),Dt.compareSegs=st,Dt.dataAttrPrefix="";var $t=Ut.extend({numbersVisible:!1,bottomCoordPadding:0,breakOnWeeks:null,cellDates:null,dayToCellOffsets:null,rowEls:null,dayEls:null,helperEls:null,render:function(t){var e,n,i,r=this.view,s=this.rowCnt,o=this.colCnt,a=s*o,l="";for(e=0;s&gt;e;e++)l+=this.dayRowHtml(e,t);for(this.el.html(l),this.rowEls=this.el.find(".fc-row"),this.dayEls=this.el.find(".fc-day"),n=0;a&gt;n;n++)i=this.getCell(n),r.trigger("dayRender",null,i.start,this.dayEls.eq(n));Ut.prototype.render.call(this)},destroy:function(){this.destroySegPopover(),Ut.prototype.destroy.call(this)},dayRowHtml:function(t,e){var n=this.view,i=["fc-row","fc-week",n.widgetContentClass];return e&amp;&amp;i.push("fc-rigid"),'&lt;div class="'+i.join(" ")+'"&gt;&lt;div class="fc-bg"&gt;&lt;table&gt;'+this.rowHtml("day",t)+'&lt;/table&gt;&lt;/div&gt;&lt;div class="fc-content-skeleton"&gt;&lt;table&gt;'+(this.numbersVisible?"&lt;thead&gt;"+this.rowHtml("number",t)+"&lt;/thead&gt;":"")+"&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;"},dayCellHtml:function(t){return this.bgCellHtml(t)},computeColHeadFormat:function(){return this.rowCnt&gt;1?"ddd":this.colCnt&gt;1?this.view.opt("dayOfMonthFormat"):"dddd"},computeEventTimeFormat:function(){return this.view.opt("extraSmallTimeFormat")},computeDisplayEventEnd:function(){return 1==this.colCnt},updateCells:function(){var t,e,n,i;if(this.updateCellDates(),t=this.cellDates,this.breakOnWeeks){for(e=t[0].day(),i=1;i&lt;t.length&amp;&amp;t[i].day()!=e;i++);n=Math.ceil(t.length/i)}else n=1,i=t.length;this.rowCnt=n,this.colCnt=i},updateCellDates:function(){for(var t=this.view,e=this.start.clone(),n=[],i=-1,r=[];e.isBefore(this.end);)t.isHiddenDay(e)?r.push(i+.5):(i++,r.push(i),n.push(e.clone())),e.add(1,"days");this.cellDates=n,this.dayToCellOffsets=r},computeCellRange:function(t){var e=this.colCnt,n=t.row*e+(this.isRTL?e-t.col-1:t.col),i=this.cellDates[n].clone(),r=i.clone().add(1,"day");return{start:i,end:r}},getRowEl:function(t){return this.rowEls.eq(t)},getColEl:function(t){return this.dayEls.eq(t)},getCellDayEl:function(t){return this.dayEls.eq(t.row*this.colCnt+t.col)},computeRowCoords:function(){var t=Ut.prototype.computeRowCoords.call(this);return t[t.length-1].bottom+=this.bottomCoordPadding,t},rangeToSegs:function(t){var e,n,i,r,s,o,a,l,d,u,c=this.isRTL,h=this.rowCnt,f=this.colCnt,g=[];for(t=this.view.computeDayRange(t),e=this.dateToCellOffset(t.start),n=this.dateToCellOffset(t.end.subtract(1,"days")),i=0;h&gt;i;i++)r=i*f,s=r+f-1,l=Math.max(r,e),d=Math.min(s,n),l=Math.ceil(l),d=Math.floor(d),d&gt;=l&amp;&amp;(o=l===e,a=d===n,l-=r,d-=r,u={row:i,isStart:o,isEnd:a},c?(u.leftCol=f-d-1,u.rightCol=f-l-1):(u.leftCol=l,u.rightCol=d),g.push(u));return g},dateToCellOffset:function(t){var e=this.dayToCellOffsets,n=t.diff(this.start,"days");return 0&gt;n?e[0]-1:n&gt;=e.length?e[e.length-1]+1:e[n]},renderDrag:function(t,e){var n;return this.renderHighlight(this.view.calendar.ensureVisibleEventRange(t)),e&amp;&amp;!e.el.closest(this.view.el).length?(this.renderRangeHelper(t,e),n=this.view.opt("dragOpacity"),void 0!==n&amp;&amp;this.helperEls.css("opacity",n),!0):void 0},destroyDrag:function(){this.destroyHighlight(),this.destroyHelper()},renderEventResize:function(t,e){this.renderHighlight(t),this.renderRangeHelper(t,e)},destroyEventResize:function(){this.destroyHighlight(),this.destroyHelper()},renderHelper:function(e,n){var i,r=[],s=this.eventsToSegs([e]);s=this.renderFgSegEls(s),i=this.renderSegRows(s),this.rowEls.each(function(e,s){var o,a=t(s),l=t('&lt;div class="fc-helper-skeleton"&gt;&lt;table/&gt;&lt;/div&gt;');o=n&amp;&amp;n.row===e?n.el.position().top:a.find(".fc-content-skeleton tbody").position().top,l.css("top",o).find("table").append(i[e].tbodyEl),a.append(l),r.push(l[0])}),this.helperEls=t(r)},destroyHelper:function(){this.helperEls&amp;&amp;(this.helperEls.remove(),this.helperEls=null)},fillSegTag:"td",renderFill:function(e,n){var i,r,s,o=[];for(n=this.renderFillSegEls(e,n),i=0;i&lt;n.length;i++)r=n[i],s=this.renderFillRow(e,r),this.rowEls.eq(r.row).append(s),o.push(s[0]);return this.elsByFill[e]=t(o),n},renderFillRow:function(e,n){var i,r,s=this.colCnt,o=n.leftCol,a=n.rightCol+1;return i=t('&lt;div class="fc-'+e.toLowerCase()+'-skeleton"&gt;&lt;table&gt;&lt;tr/&gt;&lt;/table&gt;&lt;/div&gt;'),r=i.find("tr"),o&gt;0&amp;&amp;r.append('&lt;td colspan="'+o+'"/&gt;'),r.append(n.el.attr("colspan",a-o)),s&gt;a&amp;&amp;r.append('&lt;td colspan="'+(s-a)+'"/&gt;'),this.bookendCells(r,e),i}});$t.mixin({rowStructs:null,destroyEvents:function(){this.destroySegPopover(),Ut.prototype.destroyEvents.apply(this,arguments)},getEventSegs:function(){return Ut.prototype.getEventSegs.call(this).concat(this.popoverSegs||[])},renderBgSegs:function(e){var n=t.grep(e,function(t){return t.event.allDay});return Ut.prototype.renderBgSegs.call(this,n)},renderFgSegs:function(e){var n;return e=this.renderFgSegEls(e),n=this.rowStructs=this.renderSegRows(e),this.rowEls.each(function(e,i){e&lt;n.length&amp;&amp;t(i).find(".fc-content-skeleton &gt; table").append(n[e].tbodyEl)}),e},destroyFgSegs:function(){for(var t,e=this.rowStructs||[];t=e.pop();)t.tbodyEl.remove();this.rowStructs=null},renderSegRows:function(t){var e,n,i=[];for(e=this.groupSegRows(t),n=0;n&lt;e.length;n++)i.push(this.renderSegRow(n,e[n]));return i},fgSegHtml:function(t,e){var n,i=this.view,r=t.event,s=i.isEventDraggable(r),o=!e&amp;&amp;r.allDay&amp;&amp;t.isEnd&amp;&amp;i.isEventResizable(r),a=this.getSegClasses(t,s,o),l=this.getEventSkinCss(r),d="";return a.unshift("fc-day-grid-event"),!r.allDay&amp;&amp;t.isStart&amp;&amp;(d='&lt;span class="fc-time"&gt;'+N(this.getEventTimeText(r))+"&lt;/span&gt;"),n='&lt;span class="fc-title"&gt;'+(N(r.title||"")||"&amp;nbsp;")+"&lt;/span&gt;",'&lt;a class="'+a.join(" ")+'"'+(r.url?' href="'+N(r.url)+'"':"")+(l?' style="'+l+'"':"")+'&gt;&lt;div class="fc-content"&gt;'+(this.isRTL?n+" "+d:d+" "+n)+"&lt;/div&gt;"+(o?'&lt;div class="fc-resizer"/&gt;':"")+"&lt;/a&gt;"},renderSegRow:function(e,n){function i(e){for(;e&gt;o;)u=(v[r-1]||[])[o],u?u.attr("rowspan",parseInt(u.attr("rowspan")||1,10)+1):(u=t("&lt;td/&gt;"),a.append(u)),m[r][o]=u,v[r][o]=u,o++}var r,s,o,a,l,d,u,c=this.colCnt,h=this.buildSegLevels(n),f=Math.max(1,h.length),g=t("&lt;tbody/&gt;"),p=[],m=[],v=[];for(r=0;f&gt;r;r++){if(s=h[r],o=0,a=t("&lt;tr/&gt;"),p.push([]),m.push([]),v.push([]),s)for(l=0;l&lt;s.length;l++){for(d=s[l],i(d.leftCol),u=t('&lt;td class="fc-event-container"/&gt;').append(d.el),d.leftCol!=d.rightCol?u.attr("colspan",d.rightCol-d.leftCol+1):v[r][o]=u;o&lt;=d.rightCol;)m[r][o]=u,p[r][o]=d,o++;a.append(u)}i(c),this.bookendCells(a,"eventSkeleton"),g.append(a)}return{row:e,tbodyEl:g,cellMatrix:m,segMatrix:p,segLevels:h,segs:n}},buildSegLevels:function(t){var e,n,i,r=[];for(t.sort(st),e=0;e&lt;t.length;e++){for(n=t[e],i=0;i&lt;r.length&amp;&amp;at(n,r[i]);i++);n.level=i,(r[i]||(r[i]=[])).push(n)}for(i=0;i&lt;r.length;i++)r[i].sort(lt);return r},groupSegRows:function(t){var e,n=[];for(e=0;e&lt;this.rowCnt;e++)n.push([]);for(e=0;e&lt;t.length;e++)n[t[e].row].push(t[e]);return n}}),$t.mixin({segPopover:null,popoverSegs:null,destroySegPopover:function(){this.segPopover&amp;&amp;this.segPopover.hide()},limitRows:function(t){var e,n,i=this.rowStructs||[];for(e=0;e&lt;i.length;e++)this.unlimitRow(e),n=t?"number"==typeof t?t:this.computeRowLevelLimit(e):!1,n!==!1&amp;&amp;this.limitRow(e,n)},computeRowLevelLimit:function(t){var e,n,i=this.rowEls.eq(t),r=i.height(),s=this.rowStructs[t].tbodyEl.children();for(e=0;e&lt;s.length;e++)if(n=s.eq(e).removeClass("fc-limited"),n.position().top+n.outerHeight()&gt;r)return e;return!1},limitRow:function(e,n){function i(i){for(;i&gt;C;)r=b.getCell(e,C),u=b.getCellSegs(r,n),u.length&amp;&amp;(f=o[n-1][C],w=b.renderMoreLink(r,u),y=t("&lt;div/&gt;").append(w),f.append(y),E.push(y[0])),C++}var r,s,o,a,l,d,u,c,h,f,g,p,m,v,y,w,b=this,S=this.rowStructs[e],E=[],C=0;if(n&amp;&amp;n&lt;S.segLevels.length){for(s=S.segLevels[n-1],o=S.cellMatrix,a=S.tbodyEl.children().slice(n).addClass("fc-limited").get(),l=0;l&lt;s.length;l++){for(d=s[l],i(d.leftCol),h=[],c=0;C&lt;=d.rightCol;)r=this.getCell(e,C),u=this.getCellSegs(r,n),h.push(u),c+=u.length,C++;if(c){for(f=o[n-1][d.leftCol],g=f.attr("rowspan")||1,p=[],m=0;m&lt;h.length;m++)v=t('&lt;td class="fc-more-cell"/&gt;').attr("rowspan",g),u=h[m],r=this.getCell(e,d.leftCol+m),w=this.renderMoreLink(r,[d].concat(u)),y=t("&lt;div/&gt;").append(w),v.append(y),p.push(v[0]),E.push(v[0]);f.addClass("fc-limited").after(t(p)),a.push(f[0])}}i(this.colCnt),S.moreEls=t(E),S.limitedEls=t(a)}},unlimitRow:function(t){var e=this.rowStructs[t];e.moreEls&amp;&amp;(e.moreEls.remove(),e.moreEls=null),e.limitedEls&amp;&amp;(e.limitedEls.removeClass("fc-limited"),e.limitedEls=null)},renderMoreLink:function(e,n){var i=this,r=this.view;return t('&lt;a class="fc-more"/&gt;').text(this.getMoreLinkText(n.length)).on("click",function(s){var o=r.opt("eventLimitClick"),a=e.start,l=t(this),d=i.getCellDayEl(e),u=i.getCellSegs(e),c=i.resliceDaySegs(u,a),h=i.resliceDaySegs(n,a);"function"==typeof o&amp;&amp;(o=r.trigger("eventLimitClick",null,{date:a,dayEl:d,moreEl:l,segs:c,hiddenSegs:h},s)),"popover"===o?i.showSegPopover(e,l,c):"string"==typeof o&amp;&amp;r.calendar.zoomTo(a,o)})},showSegPopover:function(t,e,n){var i,r,s=this,o=this.view,a=e.parent();i=1==this.rowCnt?o.el:this.rowEls.eq(t.row),r={className:"fc-more-popover",content:this.renderSegPopoverContent(t,n),parentEl:this.el,top:i.offset().top,autoHide:!0,viewportConstrain:o.opt("popoverViewportConstrain"),hide:function(){s.segPopover.destroy(),s.segPopover=null,s.popoverSegs=null}},this.isRTL?r.right=a.offset().left+a.outerWidth()+1:r.left=a.offset().left-1,this.segPopover=new Bt(r),this.segPopover.show()},renderSegPopoverContent:function(e,n){var i,r=this.view,s=r.opt("theme"),o=e.start.format(r.opt("dayPopoverFormat")),a=t('&lt;div class="fc-header '+r.widgetHeaderClass+'"&gt;&lt;span class="fc-close '+(s?"ui-icon ui-icon-closethick":"fc-icon fc-icon-x")+'"&gt;&lt;/span&gt;&lt;span class="fc-title"&gt;'+N(o)+'&lt;/span&gt;&lt;div class="fc-clear"/&gt;&lt;/div&gt;&lt;div class="fc-body '+r.widgetContentClass+'"&gt;&lt;div class="fc-event-container"&gt;&lt;/div&gt;&lt;/div&gt;'),l=a.find(".fc-event-container");for(n=this.renderFgSegEls(n,!0),this.popoverSegs=n,i=0;i&lt;n.length;i++)n[i].cell=e,l.append(n[i].el);return a},resliceDaySegs:function(e,n){var i=t.map(e,function(t){return t.event}),r=n.clone().stripTime(),s=r.clone().add(1,"days"),o={start:r,end:s};return e=this.eventsToSegs(i,function(t){var e=y(t,o);return e?[e]:[]}),e.sort(st),e},getMoreLinkText:function(t){var e=this.view.opt("eventLimitText");return"function"==typeof e?e(t):"+"+t+" "+e},getCellSegs:function(t,e){for(var n,i=this.rowStructs[t.row].segMatrix,r=e||0,s=[];r&lt;i.length;)n=i[r][t.col],n&amp;&amp;s.push(n),r++;return s}});var qt=Ut.extend({slotDuration:null,snapDuration:null,minTime:null,maxTime:null,axisFormat:null,dayEls:null,slatEls:null,slatTops:null,helperEl:null,businessHourSegs:null,constructor:function(){Ut.apply(this,arguments),this.processOptions()},render:function(){this.el.html(this.renderHtml()),this.dayEls=this.el.find(".fc-day"),this.slatEls=this.el.find(".fc-slats tr"),this.computeSlatTops(),this.renderBusinessHours(),Ut.prototype.render.call(this)},renderBusinessHours:function(){var t=this.view.calendar.getBusinessHoursEvents();this.businessHourSegs=this.renderFill("businessHours",this.eventsToSegs(t),"bgevent")},renderHtml:function(){return'&lt;div class="fc-bg"&gt;&lt;table&gt;'+this.rowHtml("slotBg")+'&lt;/table&gt;&lt;/div&gt;&lt;div class="fc-slats"&gt;&lt;table&gt;'+this.slatRowHtml()+"&lt;/table&gt;&lt;/div&gt;"},slotBgCellHtml:function(t){return this.bgCellHtml(t)},slatRowHtml:function(){for(var t,n,i,r=this.view,s=this.isRTL,o="",a=this.slotDuration.asMinutes()%15===0,l=e.duration(+this.minTime);l&lt;this.maxTime;)t=this.start.clone().time(l),n=t.minutes(),i='&lt;td class="fc-axis fc-time '+r.widgetContentClass+'" '+r.axisStyleAttr()+"&gt;"+(a&amp;&amp;n?"":"&lt;span&gt;"+N(t.format(this.axisFormat))+"&lt;/span&gt;")+"&lt;/td&gt;",o+="&lt;tr "+(n?'class="fc-minor"':"")+"&gt;"+(s?"":i)+'&lt;td class="'+r.widgetContentClass+'"/&gt;'+(s?i:"")+"&lt;/tr&gt;",l.add(this.slotDuration);return o},processOptions:function(){var t=this.view,n=t.opt("slotDuration"),i=t.opt("snapDuration");n=e.duration(n),i=i?e.duration(i):n,this.slotDuration=n,this.snapDuration=i,this.minTime=e.duration(t.opt("minTime")),this.maxTime=e.duration(t.opt("maxTime")),this.axisFormat=t.opt("axisFormat")||t.opt("smallTimeFormat")},computeColHeadFormat:function(){return this.colCnt&gt;1?this.view.opt("dayOfMonthFormat"):"dddd";
    },computeEventTimeFormat:function(){return this.view.opt("noMeridiemTimeFormat")},computeDisplayEventEnd:function(){return!0},updateCells:function(){var t,e=this.view,n=[];for(t=this.start.clone();t.isBefore(this.end);)n.push({day:t.clone()}),t.add(1,"day"),t=e.skipHiddenDays(t);this.isRTL&amp;&amp;n.reverse(),this.colData=n,this.colCnt=n.length,this.rowCnt=Math.ceil((this.maxTime-this.minTime)/this.snapDuration)},computeCellRange:function(t){var e=this.computeSnapTime(t.row),n=this.view.calendar.rezoneDate(t.day).time(e),i=n.clone().add(this.snapDuration);return{start:n,end:i}},getColEl:function(t){return this.dayEls.eq(t)},computeSnapTime:function(t){return e.duration(this.minTime+this.snapDuration*t)},rangeToSegs:function(t){var e,n,i,r,s=this.colCnt,o=[];for(t={start:t.start.clone().stripZone(),end:t.end.clone().stripZone()},n=0;s&gt;n;n++)i=this.colData[n].day,r={start:i.clone().time(this.minTime),end:i.clone().time(this.maxTime)},e=y(t,r),e&amp;&amp;(e.col=n,o.push(e));return o},resize:function(){this.computeSlatTops(),this.updateSegVerticals()},computeRowCoords:function(){var t,e,n=this.el.offset().top,i=[];for(t=0;t&lt;this.rowCnt;t++)e={top:n+this.computeTimeTop(this.computeSnapTime(t))},t&gt;0&amp;&amp;(i[t-1].bottom=e.top),i.push(e);return e.bottom=e.top+this.computeTimeTop(this.computeSnapTime(t)),i},computeDateTop:function(t,n){return this.computeTimeTop(e.duration(t.clone().stripZone()-n.clone().stripTime()))},computeTimeTop:function(t){var e,n,i,r,s=(t-this.minTime)/this.slotDuration;return s=Math.max(0,s),s=Math.min(this.slatEls.length,s),e=Math.floor(s),n=s-e,i=this.slatTops[e],n?(r=this.slatTops[e+1],i+(r-i)*n):i},computeSlatTops:function(){var e,n=[];this.slatEls.each(function(i,r){e=t(r).position().top,n.push(e)}),n.push(e+this.slatEls.last().outerHeight()),this.slatTops=n},renderDrag:function(t,e){var n;return e?(this.renderRangeHelper(t,e),n=this.view.opt("dragOpacity"),void 0!==n&amp;&amp;this.helperEl.css("opacity",n),!0):void this.renderHighlight(this.view.calendar.ensureVisibleEventRange(t))},destroyDrag:function(){this.destroyHelper(),this.destroyHighlight()},renderEventResize:function(t,e){this.renderRangeHelper(t,e)},destroyEventResize:function(){this.destroyHelper()},renderHelper:function(e,n){var i,r,s,o,a=this.eventsToSegs([e]);for(a=this.renderFgSegEls(a),i=this.renderSegTable(a),r=0;r&lt;a.length;r++)s=a[r],n&amp;&amp;n.col===s.col&amp;&amp;(o=n.el,s.el.css({left:o.css("left"),right:o.css("right"),"margin-left":o.css("margin-left"),"margin-right":o.css("margin-right")}));this.helperEl=t('&lt;div class="fc-helper-skeleton"/&gt;').append(i).appendTo(this.el)},destroyHelper:function(){this.helperEl&amp;&amp;(this.helperEl.remove(),this.helperEl=null)},renderSelection:function(t){this.view.opt("selectHelper")?this.renderRangeHelper(t):this.renderHighlight(t)},destroySelection:function(){this.destroyHelper(),this.destroyHighlight()},renderFill:function(e,n,i){var r,s,o,a,l,d,u,c,h,f;if(n.length){for(n=this.renderFillSegEls(e,n),r=this.groupSegCols(n),i=i||e.toLowerCase(),s=t('&lt;div class="fc-'+i+'-skeleton"&gt;&lt;table&gt;&lt;tr/&gt;&lt;/table&gt;&lt;/div&gt;'),o=s.find("tr"),a=0;a&lt;r.length;a++)if(l=r[a],d=t("&lt;td/&gt;").appendTo(o),l.length)for(u=t('&lt;div class="fc-'+i+'-container"/&gt;').appendTo(d),c=this.colData[a].day,h=0;h&lt;l.length;h++)f=l[h],u.append(f.el.css({top:this.computeDateTop(f.start,c),bottom:-this.computeDateTop(f.end,c)}));this.bookendCells(o,e),this.el.append(s),this.elsByFill[e]=s}return n}});qt.mixin({eventSkeletonEl:null,renderFgSegs:function(e){return e=this.renderFgSegEls(e),this.el.append(this.eventSkeletonEl=t('&lt;div class="fc-content-skeleton"/&gt;').append(this.renderSegTable(e))),e},destroyFgSegs:function(t){this.eventSkeletonEl&amp;&amp;(this.eventSkeletonEl.remove(),this.eventSkeletonEl=null)},renderSegTable:function(e){var n,i,r,s,o,a,l=t("&lt;table&gt;&lt;tr/&gt;&lt;/table&gt;"),d=l.find("tr");for(n=this.groupSegCols(e),this.computeSegVerticals(e),s=0;s&lt;n.length;s++){for(o=n[s],dt(o),a=t('&lt;div class="fc-event-container"/&gt;'),i=0;i&lt;o.length;i++)r=o[i],r.el.css(this.generateSegPositionCss(r)),r.bottom-r.top&lt;30&amp;&amp;r.el.addClass("fc-short"),a.append(r.el);d.append(t("&lt;td/&gt;").append(a))}return this.bookendCells(d,"eventSkeleton"),l},updateSegVerticals:function(){var t,e=(this.segs||[]).concat(this.businessHourSegs||[]);for(this.computeSegVerticals(e),t=0;t&lt;e.length;t++)e[t].el.css(this.generateSegVerticalCss(e[t]))},computeSegVerticals:function(t){var e,n;for(e=0;e&lt;t.length;e++)n=t[e],n.top=this.computeDateTop(n.start,n.start),n.bottom=this.computeDateTop(n.end,n.start)},fgSegHtml:function(t,e){var n,i,r,s=this.view,o=t.event,a=s.isEventDraggable(o),l=!e&amp;&amp;t.isEnd&amp;&amp;s.isEventResizable(o),d=this.getSegClasses(t,a,l),u=this.getEventSkinCss(o);return d.unshift("fc-time-grid-event"),s.isMultiDayEvent(o)?(t.isStart||t.isEnd)&amp;&amp;(n=this.getEventTimeText(t),i=this.getEventTimeText(t,"LT"),r=this.getEventTimeText({start:t.start})):(n=this.getEventTimeText(o),i=this.getEventTimeText(o,"LT"),r=this.getEventTimeText({start:o.start})),'&lt;a class="'+d.join(" ")+'"'+(o.url?' href="'+N(o.url)+'"':"")+(u?' style="'+u+'"':"")+'&gt;&lt;div class="fc-content"&gt;'+(n?'&lt;div class="fc-time" data-start="'+N(r)+'" data-full="'+N(i)+'"&gt;&lt;span&gt;'+N(n)+"&lt;/span&gt;&lt;/div&gt;":"")+(o.title?'&lt;div class="fc-title"&gt;'+N(o.title)+"&lt;/div&gt;":"")+'&lt;/div&gt;&lt;div class="fc-bg"/&gt;'+(l?'&lt;div class="fc-resizer"/&gt;':"")+"&lt;/a&gt;"},generateSegPositionCss:function(t){var e,n,i=this.view.opt("slotEventOverlap"),r=t.backwardCoord,s=t.forwardCoord,o=this.generateSegVerticalCss(t);return i&amp;&amp;(s=Math.min(1,r+2*(s-r))),this.isRTL?(e=1-s,n=r):(e=r,n=1-s),o.zIndex=t.level+1,o.left=100*e+"%",o.right=100*n+"%",i&amp;&amp;t.forwardPressure&amp;&amp;(o[this.isRTL?"marginLeft":"marginRight"]=20),o},generateSegVerticalCss:function(t){return{top:t.top,bottom:-t.bottom}},groupSegCols:function(t){var e,n=[];for(e=0;e&lt;this.colCnt;e++)n.push([]);for(e=0;e&lt;t.length;e++)n[t[e].col].push(t[e]);return n}});var Kt=Dt.View=Q.extend({type:null,name:null,title:null,calendar:null,options:null,coordMap:null,el:null,start:null,end:null,intervalStart:null,intervalEnd:null,intervalDuration:null,intervalUnit:null,isSelected:!1,scrollerEl:null,scrollTop:null,widgetHeaderClass:null,widgetContentClass:null,highlightStateClass:null,nextDayThreshold:null,isHiddenDayHash:null,documentMousedownProxy:null,constructor:function(n,i,r){this.calendar=n,this.options=i,this.type=this.name=r,this.nextDayThreshold=e.duration(this.opt("nextDayThreshold")),this.initTheming(),this.initHiddenDays(),this.documentMousedownProxy=t.proxy(this,"documentMousedown"),this.initialize()},initialize:function(){},opt:function(e){var n;return n=this.options[e],void 0!==n?n:(n=this.calendar.options[e],t.isPlainObject(n)&amp;&amp;!r(e)?w(n,this.type):n)},trigger:function(t,e){var n=this.calendar;return n.trigger.apply(n,[t,e||this].concat(Array.prototype.slice.call(arguments,2),[this]))},setDate:function(t){this.setRange(this.computeRange(t))},setRange:function(e){t.extend(this,e),this.updateTitle()},computeRange:function(t){var n,i,r=e.duration(this.opt("duration")||this.constructor.duration||{days:1}),s=E(r),o=t.clone().startOf(s),a=o.clone().add(r);return/year|month|week|day/.test(s)?(o.stripTime(),a.stripTime()):(o.hasTime()||(o=this.calendar.rezoneDate(o)),a.hasTime()||(a=this.calendar.rezoneDate(a))),n=o.clone(),n=this.skipHiddenDays(n),i=a.clone(),i=this.skipHiddenDays(i,-1,!0),{intervalDuration:r,intervalUnit:s,intervalStart:o,intervalEnd:a,start:n,end:i}},computePrevDate:function(t){return this.massageCurrentDate(t.clone().startOf(this.intervalUnit).subtract(this.intervalDuration),-1)},computeNextDate:function(t){return this.massageCurrentDate(t.clone().startOf(this.intervalUnit).add(this.intervalDuration))},massageCurrentDate:function(t,n){return this.intervalDuration&lt;=e.duration({days:1})&amp;&amp;this.isHiddenDay(t)&amp;&amp;(t=this.skipHiddenDays(t,n),t.startOf("day")),t},updateTitle:function(){this.title=this.computeTitle()},computeTitle:function(){return this.formatRange({start:this.intervalStart,end:this.intervalEnd},this.opt("titleFormat")||this.computeTitleFormat(),this.opt("titleRangeSeparator"))},computeTitleFormat:function(){return"year"==this.intervalUnit?"YYYY":"month"==this.intervalUnit?this.opt("monthYearFormat"):this.intervalDuration.as("days")&gt;1?"ll":"LL"},formatRange:function(t,e,n){var i=t.end;return i.hasTime()||(i=i.clone().subtract(1)),X(t.start,i,e,n,this.opt("isRTL"))},renderView:function(){this.render(),this.updateSize(),this.initializeScroll(),this.trigger("viewRender",this,this,this.el),t(document).on("mousedown",this.documentMousedownProxy)},render:function(){},destroyView:function(){this.unselect(),this.destroyViewEvents(),this.destroy(),this.trigger("viewDestroy",this,this,this.el),t(document).off("mousedown",this.documentMousedownProxy)},destroy:function(){this.el.empty()},initTheming:function(){var t=this.opt("theme")?"ui":"fc";this.widgetHeaderClass=t+"-widget-header",this.widgetContentClass=t+"-widget-content",this.highlightStateClass=t+"-state-highlight"},updateSize:function(t){t&amp;&amp;this.recordScroll(),this.updateHeight(),this.updateWidth()},updateWidth:function(){},updateHeight:function(){var t=this.calendar;this.setHeight(t.getSuggestedViewHeight(),t.isHeightAuto())},setHeight:function(t,e){},computeScrollerHeight:function(t,e){var n,i;return e=e||this.scrollerEl,n=this.el.add(e),n.css({position:"relative",left:-1}),i=this.el.outerHeight()-e.height(),n.css({position:"",left:""}),t-i},initializeScroll:function(){},recordScroll:function(){this.scrollerEl&amp;&amp;(this.scrollTop=this.scrollerEl.scrollTop())},restoreScroll:function(){null!==this.scrollTop&amp;&amp;this.scrollerEl.scrollTop(this.scrollTop)},renderViewEvents:function(t){this.renderEvents(t),this.eventSegEach(function(t){this.trigger("eventAfterRender",t.event,t.event,t.el)}),this.trigger("eventAfterAllRender")},renderEvents:function(){},destroyViewEvents:function(){this.eventSegEach(function(t){this.trigger("eventDestroy",t.event,t.event,t.el)}),this.destroyEvents()},destroyEvents:function(){},resolveEventEl:function(e,n){var i=this.trigger("eventRender",e,e,n);return i===!1?n=null:i&amp;&amp;i!==!0&amp;&amp;(n=t(i)),n},showEvent:function(t){this.eventSegEach(function(t){t.el.css("visibility","")},t)},hideEvent:function(t){this.eventSegEach(function(t){t.el.css("visibility","hidden")},t)},eventSegEach:function(t,e){var n,i=this.getEventSegs();for(n=0;n&lt;i.length;n++)e&amp;&amp;i[n].event._id!==e._id||t.call(this,i[n])},getEventSegs:function(){return[]},isEventDraggable:function(t){var e=t.source||{};return G(t.startEditable,e.startEditable,this.opt("eventStartEditable"),t.editable,e.editable,this.opt("editable"))},reportEventDrop:function(t,e,n,i){var r=this.calendar,s=r.mutateEvent(t,e),o=function(){s.undo(),r.reportEventChange()};this.triggerEventDrop(t,s.dateDelta,o,n,i),r.reportEventChange()},triggerEventDrop:function(t,e,n,i,r){this.trigger("eventDrop",i[0],t,e,n,r,{})},reportExternalDrop:function(e,n,i,r,s){var o,a,l=e.eventProps;l&amp;&amp;(o=t.extend({},l,n),a=this.calendar.renderEvent(o,e.stick)[0]),this.triggerExternalDrop(a,n,i,r,s)},triggerExternalDrop:function(t,e,n,i,r){this.trigger("drop",n[0],e.start,i,r),t&amp;&amp;this.trigger("eventReceive",null,t)},renderDrag:function(t,e){},destroyDrag:function(){},isEventResizable:function(t){var e=t.source||{};return G(t.durationEditable,e.durationEditable,this.opt("eventDurationEditable"),t.editable,e.editable,this.opt("editable"))},reportEventResize:function(t,e,n,i){var r=this.calendar,s=r.mutateEvent(t,{end:e}),o=function(){s.undo(),r.reportEventChange()};this.triggerEventResize(t,s.durationDelta,o,n,i),r.reportEventChange()},triggerEventResize:function(t,e,n,i,r){this.trigger("eventResize",i[0],t,e,n,r,{})},select:function(t,e){this.unselect(e),this.renderSelection(t),this.reportSelection(t,e)},renderSelection:function(t){},reportSelection:function(t,e){this.isSelected=!0,this.trigger("select",null,t.start,t.end,e)},unselect:function(t){this.isSelected&amp;&amp;(this.isSelected=!1,this.destroySelection(),this.trigger("unselect",null,t))},destroySelection:function(){},documentMousedown:function(e){var n;this.isSelected&amp;&amp;this.opt("unselectAuto")&amp;&amp;v(e)&amp;&amp;(n=this.opt("unselectCancel"),n&amp;&amp;t(e.target).closest(n).length||this.unselect(e))},initHiddenDays:function(){var e,n=this.opt("hiddenDays")||[],i=[],r=0;for(this.opt("weekends")===!1&amp;&amp;n.push(0,6),e=0;7&gt;e;e++)(i[e]=-1!==t.inArray(e,n))||r++;if(!r)throw"invalid hiddenDays";this.isHiddenDayHash=i},isHiddenDay:function(t){return e.isMoment(t)&amp;&amp;(t=t.day()),this.isHiddenDayHash[t]},skipHiddenDays:function(t,e,n){var i=t.clone();for(e=e||1;this.isHiddenDayHash[(i.day()+(n?e:0)+7)%7];)i.add(e,"days");return i},computeDayRange:function(t){var e,n=t.start.clone().stripTime(),i=t.end,r=null;return i&amp;&amp;(r=i.clone().stripTime(),e=+i.time(),e&amp;&amp;e&gt;=this.nextDayThreshold&amp;&amp;r.add(1,"days")),(!i||n&gt;=r)&amp;&amp;(r=n.clone().add(1,"days")),{start:n,end:r}},isMultiDayEvent:function(t){var e=this.computeDayRange(t);return e.end.diff(e.start,"days")&gt;1}});Dt.sourceNormalizers=[],Dt.sourceFetchers=[];var Qt={dataType:"json",cache:!1},Jt=1,te=Tt.basic=Kt.extend({dayGrid:null,dayNumbersVisible:!1,weekNumbersVisible:!1,weekNumberWidth:null,headRowEl:null,initialize:function(){this.dayGrid=new $t(this),this.coordMap=this.dayGrid.coordMap},setRange:function(t){Kt.prototype.setRange.call(this,t),this.dayGrid.breakOnWeeks=/year|month|week/.test(this.intervalUnit),this.dayGrid.setRange(t)},computeRange:function(t){var e=Kt.prototype.computeRange.call(this,t);return/year|month/.test(e.intervalUnit)&amp;&amp;(e.start.startOf("week"),e.start=this.skipHiddenDays(e.start),e.end.weekday()&amp;&amp;(e.end.add(1,"week").startOf("week"),e.end=this.skipHiddenDays(e.end,-1,!0))),e},render:function(){this.dayNumbersVisible=this.dayGrid.rowCnt&gt;1,this.weekNumbersVisible=this.opt("weekNumbers"),this.dayGrid.numbersVisible=this.dayNumbersVisible||this.weekNumbersVisible,this.el.addClass("fc-basic-view").html(this.renderHtml()),this.headRowEl=this.el.find("thead .fc-row"),this.scrollerEl=this.el.find(".fc-day-grid-container"),this.dayGrid.coordMap.containerEl=this.scrollerEl,this.dayGrid.el=this.el.find(".fc-day-grid"),this.dayGrid.render(this.hasRigidRows())},destroy:function(){this.dayGrid.destroy(),Kt.prototype.destroy.call(this)},renderHtml:function(){return'&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td class="'+this.widgetHeaderClass+'"&gt;'+this.dayGrid.headHtml()+'&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="'+this.widgetContentClass+'"&gt;&lt;div class="fc-day-grid-container"&gt;&lt;div class="fc-day-grid"/&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'},headIntroHtml:function(){return this.weekNumbersVisible?'&lt;th class="fc-week-number '+this.widgetHeaderClass+'" '+this.weekNumberStyleAttr()+"&gt;&lt;span&gt;"+N(this.opt("weekNumberTitle"))+"&lt;/span&gt;&lt;/th&gt;":void 0},numberIntroHtml:function(t){return this.weekNumbersVisible?'&lt;td class="fc-week-number" '+this.weekNumberStyleAttr()+"&gt;&lt;span&gt;"+this.calendar.calculateWeekNumber(this.dayGrid.getCell(t,0).start)+"&lt;/span&gt;&lt;/td&gt;":void 0},dayIntroHtml:function(){return this.weekNumbersVisible?'&lt;td class="fc-week-number '+this.widgetContentClass+'" '+this.weekNumberStyleAttr()+"&gt;&lt;/td&gt;":void 0},introHtml:function(){return this.weekNumbersVisible?'&lt;td class="fc-week-number" '+this.weekNumberStyleAttr()+"&gt;&lt;/td&gt;":void 0},numberCellHtml:function(t){var e,n=t.start;return this.dayNumbersVisible?(e=this.dayGrid.getDayClasses(n),e.unshift("fc-day-number"),'&lt;td class="'+e.join(" ")+'" data-date="'+n.format()+'"&gt;'+n.date()+"&lt;/td&gt;"):"&lt;td/&gt;"},weekNumberStyleAttr:function(){return null!==this.weekNumberWidth?'style="width:'+this.weekNumberWidth+'px"':""},hasRigidRows:function(){var t=this.opt("eventLimit");return t&amp;&amp;"number"!=typeof t},updateWidth:function(){this.weekNumbersVisible&amp;&amp;(this.weekNumberWidth=h(this.el.find(".fc-week-number")))},setHeight:function(t,e){var n,i=this.opt("eventLimit");g(this.scrollerEl),a(this.headRowEl),this.dayGrid.destroySegPopover(),i&amp;&amp;"number"==typeof i&amp;&amp;this.dayGrid.limitRows(i),n=this.computeScrollerHeight(t),this.setGridHeight(n,e),i&amp;&amp;"number"!=typeof i&amp;&amp;this.dayGrid.limitRows(i),!e&amp;&amp;f(this.scrollerEl,n)&amp;&amp;(o(this.headRowEl,m(this.scrollerEl)),n=this.computeScrollerHeight(t),this.scrollerEl.height(n),this.restoreScroll())},setGridHeight:function(t,e){e?c(this.dayGrid.rowEls):u(this.dayGrid.rowEls,t,!0)},renderEvents:function(t){this.dayGrid.renderEvents(t),this.updateHeight()},getEventSegs:function(){return this.dayGrid.getEventSegs()},destroyEvents:function(){this.recordScroll(),this.dayGrid.destroyEvents()},renderDrag:function(t,e){return this.dayGrid.renderDrag(t,e)},destroyDrag:function(){this.dayGrid.destroyDrag()},renderSelection:function(t){this.dayGrid.renderSelection(t)},destroySelection:function(){this.dayGrid.destroySelection()}});n({fixedWeekCount:!0});var ee=Tt.month=te.extend({computeRange:function(t){var e,n=te.prototype.computeRange.call(this,t);return this.isFixedWeeks()&amp;&amp;(e=Math.ceil(n.end.diff(n.start,"weeks",!0)),n.end.add(6-e,"weeks")),n},setGridHeight:function(t,e){e=e||"variable"===this.opt("weekMode"),e&amp;&amp;(t*=this.rowCnt/6),u(this.dayGrid.rowEls,t,!e)},isFixedWeeks:function(){var t=this.opt("weekMode");return t?"fixed"===t:this.opt("fixedWeekCount")}});ee.duration={months:1},Tt.basicWeek={type:"basic",duration:{weeks:1}},Tt.basicDay={type:"basic",duration:{days:1}},n({allDaySlot:!0,allDayText:"all-day",scrollTime:"06:00:00",slotDuration:"00:30:00",minTime:"00:00:00",maxTime:"24:00:00",slotEventOverlap:!0});var ne=5;Tt.agenda=Kt.extend({timeGrid:null,dayGrid:null,axisWidth:null,noScrollRowEls:null,bottomRuleEl:null,bottomRuleHeight:null,initialize:function(){this.timeGrid=new qt(this),this.opt("allDaySlot")?(this.dayGrid=new $t(this),this.coordMap=new It([this.dayGrid.coordMap,this.timeGrid.coordMap])):this.coordMap=this.timeGrid.coordMap},setRange:function(t){Kt.prototype.setRange.call(this,t),this.timeGrid.setRange(t),this.dayGrid&amp;&amp;this.dayGrid.setRange(t)},render:function(){this.el.addClass("fc-agenda-view").html(this.renderHtml()),this.scrollerEl=this.el.find(".fc-time-grid-container"),this.timeGrid.coordMap.containerEl=this.scrollerEl,this.timeGrid.el=this.el.find(".fc-time-grid"),this.timeGrid.render(),this.bottomRuleEl=t('&lt;hr class="'+this.widgetHeaderClass+'"/&gt;').appendTo(this.timeGrid.el),this.dayGrid&amp;&amp;(this.dayGrid.el=this.el.find(".fc-day-grid"),this.dayGrid.render(),this.dayGrid.bottomCoordPadding=this.dayGrid.el.next("hr").outerHeight()),this.noScrollRowEls=this.el.find(".fc-row:not(.fc-scroller *)")},destroy:function(){this.timeGrid.destroy(),this.dayGrid&amp;&amp;this.dayGrid.destroy(),Kt.prototype.destroy.call(this)},renderHtml:function(){return'&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td class="'+this.widgetHeaderClass+'"&gt;'+this.timeGrid.headHtml()+'&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="'+this.widgetContentClass+'"&gt;'+(this.dayGrid?'&lt;div class="fc-day-grid"/&gt;&lt;hr class="'+this.widgetHeaderClass+'"/&gt;':"")+'&lt;div class="fc-time-grid-container"&gt;&lt;div class="fc-time-grid"/&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'},headIntroHtml:function(){var t,e,n,i;return this.opt("weekNumbers")?(t=this.timeGrid.getCell(0).start,e=this.calendar.calculateWeekNumber(t),n=this.opt("weekNumberTitle"),i=this.opt("isRTL")?e+n:n+e,'&lt;th class="fc-axis fc-week-number '+this.widgetHeaderClass+'" '+this.axisStyleAttr()+"&gt;&lt;span&gt;"+N(i)+"&lt;/span&gt;&lt;/th&gt;"):'&lt;th class="fc-axis '+this.widgetHeaderClass+'" '+this.axisStyleAttr()+"&gt;&lt;/th&gt;"},dayIntroHtml:function(){return'&lt;td class="fc-axis '+this.widgetContentClass+'" '+this.axisStyleAttr()+"&gt;&lt;span&gt;"+(this.opt("allDayHtml")||N(this.opt("allDayText")))+"&lt;/span&gt;&lt;/td&gt;"},slotBgIntroHtml:function(){return'&lt;td class="fc-axis '+this.widgetContentClass+'" '+this.axisStyleAttr()+"&gt;&lt;/td&gt;"},introHtml:function(){return'&lt;td class="fc-axis" '+this.axisStyleAttr()+"&gt;&lt;/td&gt;"},axisStyleAttr:function(){return null!==this.axisWidth?'style="width:'+this.axisWidth+'px"':""},updateSize:function(t){t&amp;&amp;this.timeGrid.resize(),Kt.prototype.updateSize.call(this,t)},updateWidth:function(){this.axisWidth=h(this.el.find(".fc-axis"))},setHeight:function(t,e){var n,i;null===this.bottomRuleHeight&amp;&amp;(this.bottomRuleHeight=this.bottomRuleEl.outerHeight()),this.bottomRuleEl.hide(),this.scrollerEl.css("overflow",""),g(this.scrollerEl),a(this.noScrollRowEls),this.dayGrid&amp;&amp;(this.dayGrid.destroySegPopover(),n=this.opt("eventLimit"),n&amp;&amp;"number"!=typeof n&amp;&amp;(n=ne),n&amp;&amp;this.dayGrid.limitRows(n)),e||(i=this.computeScrollerHeight(t),f(this.scrollerEl,i)?(o(this.noScrollRowEls,m(this.scrollerEl)),i=this.computeScrollerHeight(t),this.scrollerEl.height(i),this.restoreScroll()):(this.scrollerEl.height(i).css("overflow","hidden"),this.bottomRuleEl.show()))},initializeScroll:function(){function t(){n.scrollerEl.scrollTop(r)}var n=this,i=e.duration(this.opt("scrollTime")),r=this.timeGrid.computeTimeTop(i);r=Math.ceil(r),r&amp;&amp;r++,t(),setTimeout(t,0)},renderEvents:function(t){var e,n,i=[],r=[],s=[];for(n=0;n&lt;t.length;n++)t[n].allDay?i.push(t[n]):r.push(t[n]);e=this.timeGrid.renderEvents(r),this.dayGrid&amp;&amp;(s=this.dayGrid.renderEvents(i)),this.updateHeight()},getEventSegs:function(){return this.timeGrid.getEventSegs().concat(this.dayGrid?this.dayGrid.getEventSegs():[])},destroyEvents:function(){this.recordScroll(),this.timeGrid.destroyEvents(),this.dayGrid&amp;&amp;this.dayGrid.destroyEvents()},renderDrag:function(t,e){return t.start.hasTime()?this.timeGrid.renderDrag(t,e):this.dayGrid?this.dayGrid.renderDrag(t,e):void 0},destroyDrag:function(){this.timeGrid.destroyDrag(),this.dayGrid&amp;&amp;this.dayGrid.destroyDrag()},renderSelection:function(t){t.start.hasTime()||t.end.hasTime()?this.timeGrid.renderSelection(t):this.dayGrid&amp;&amp;this.dayGrid.renderSelection(t)},destroySelection:function(){this.timeGrid.destroySelection(),this.dayGrid&amp;&amp;this.dayGrid.destroySelection()}}),Tt.agendaWeek={type:"agenda",duration:{weeks:1}},Tt.agendaDay={type:"agenda",duration:{days:1}},n({yearColumns:2,fixedWeekCount:5}),Tt.year=Kt.extend({dayNumbersVisible:!0,weekNumbersVisible:!1,weekNumberWidth:null,table:null,body:null,bodyRows:null,subTables:null,bodyCells:null,daySegmentContainer:null,colCnt:null,rowCnt:null,dayGrids:[],rtl:null,dis:null,dit:null,firstDay:0,firstMonth:null,lastMonth:null,yearColumns:2,nbMonths:null,hiddenMonths:[],nwe:null,tm:null,colFormat:null,dayGrid:null,coordMap:null,otherMonthDays:[],rowsForMonth:[],initialize:function(){this.updateOptions(),this.dayGrid=new $t(this),this.dayGrids[0]=this.dayGrid,this.coordMap=this.dayGrid.coordMap},updateOptions:function(){this.rtl=this.opt("isRTL"),this.rtl?(this.dis=-1,this.dit=this.colCnt-1):(this.dis=1,this.dit=0),this.firstDay=parseInt(this.opt("firstDay"),10),this.firstMonth=parseInt(this.opt("firstMonth"),10)||0,this.lastMonth=this.opt("lastMonth")||this.firstMonth+12,this.hiddenMonths=this.opt("hiddenMonths")||[],this.yearColumns=parseInt(this.opt("yearColumns"),10)||2,this.colFormat=this.opt("columnFormat"),this.weekNumbersVisible=this.opt("weekNumbers"),this.nwe=this.opt("weekends")?0:1,this.tm=this.opt("theme")?"ui":"fc",this.nbMonths=this.lastMonth-this.firstMonth,this.lastMonth=this.lastMonth%12,this.lang=this.opt("lang")},computeTitle:function(){if(null!==this.opt("yearTitleFormat")){var t=this.intervalStart.locale(this.lang).format(this.opt("yearTitleFormat")),e=this.intervalStart.clone().add(this.nbMonths-1,"months");return e.year()!=this.intervalStart.year()&amp;&amp;(t+=this.intervalEnd.format(" - YYYY")),t}return this.formatRange({start:this.intervalStart,end:this.intervalEnd},this.opt("titleFormat")||this.computeTitleFormat(),this.opt("titleRangeSeparator"))},render:function(t){var e=Math.floor(this.intervalStart.month()/this.nbMonths)*this.nbMonths;!e&amp;&amp;this.firstMonth&gt;0&amp;&amp;!this.opt("lastMonth")&amp;&amp;(e=(this.firstMonth+e)%12),this.intervalStart=Dt.moment([this.intervalStart.year(),e,1]),this.intervalEnd=this.intervalStart.clone().add(this.nbMonths,"months").add(-15,"minutes"),this.start=this.intervalStart.clone(),this.start=this.skipHiddenDays(this.start),this.start.startOf("week"),this.start=this.skipHiddenDays(this.start),this.end=this.intervalEnd.clone(),this.end=this.skipHiddenDays(this.end,-1,!0),this.end.add((7-this.end.weekday())%7,"days"),this.end=this.skipHiddenDays(this.end,-1,!0);var n=parseInt(this.opt("yearColumns"),10),i=this.opt("weekends")?7:5;this.renderYear(n,i,!0)},renderYear:function(t,e,n){this.colCnt=e;var i=!this.table;i||(this.destroyEvents(),this.table.remove()),this.buildSkeleton(this.yearColumns,n),this.buildDayGrids(),this.updateCells()},setRange:function(t){Kt.prototype.setRange.call(this,t)},computeRange:function(t){this.constructor.duration={months:this.nbMonths||12};var e=Kt.prototype.computeRange.call(this,t);return/year|month/.test(e.intervalUnit)&amp;&amp;(e.start.startOf("week"),e.start=this.skipHiddenDays(e.start),e.end.weekday()&amp;&amp;(e.end.add(1,"week").startOf("week"),e.end=this.skipHiddenDays(e.end,-1,!0))),e},buildSkeleton:function(e,n){var i,r,s,o,a=0,l=0,d=this.intervalStart.year(),u=this.tm+"-widget-header",c=this.opt("dayNamesShort"),h=this.opt("monthNames");for(this.rowCnt=0,o='&lt;table class="fc-year-main-table fc-border-separate" style="width:100%;"&gt;&lt;tr&gt;',o+='&lt;td class="fc-year-month-border fc-first"&gt;&lt;/td&gt;',r=0;r&lt;this.nbMonths;r++){var f=this.intervalStart.month()+r,g=-1!=t.inArray(f%12,this.hiddenMonths),p=g?"display:none;":"",m=Dt.moment([d+f/12,f%12,1]).locale(this.lang),v=h[r%12],y=m.format("YYYYMM");if(s=m.year(),this.firstMonth+this.nbMonths&gt;12&amp;&amp;(v=v+" "+s),r%e===0&amp;&amp;r&gt;0&amp;&amp;!g&amp;&amp;(l++,o+='&lt;td class="fc-year-month-border fc-last"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="fc-year-month-border fc-first"&gt;&lt;/td&gt;'),e&gt;r%e&amp;&amp;r%e&gt;0&amp;&amp;!g&amp;&amp;(o+='&lt;td class="fc-year-month-separator"&gt;&lt;/td&gt;'),o+='&lt;td class="fc-year-monthly-td" style="'+p+'"&gt;',o+='&lt;div class="fc-year-monthly-name'+(0===l?" fc-first":"")+'"&gt;&lt;a name="'+y+'" data-year="'+s+'" data-month="'+f+'" href="#"&gt;'+N(v)+"&lt;/a&gt;&lt;/div&gt;",o+='&lt;div class="fc-row '+u+'"&gt;',o+='&lt;table class="fc-year-month-header"&gt;&lt;thead&gt;&lt;tr class="fc-year-week-days"&gt;',0==this.opt("isRTL"))for(o+=this.headIntroHtml(),i=this.firstDay;i&lt;this.colCnt+this.firstDay;i++)o+='&lt;th class="fc-day-header fc-year-weekly-head fc-'+Gt[i%7]+" "+u+'"&gt;'+c[i%7]+"&lt;/th&gt;";else{for(i=this.colCnt+this.firstDay-1;i&gt;this.firstDay-1;i--)o+='&lt;th class="fc-day-header fc-year-weekly-head fc-'+Gt[i%7]+" "+u+'"&gt;'+c[i%7]+"&lt;/th&gt;";o+=this.headIntroHtml()}o+="&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;",o+="&lt;/div&gt;",o+='&lt;div class="fc-day-grid-container"&gt;&lt;div class="fc-day-grid"&gt;',o+="&lt;/div&gt;&lt;/div&gt;",o+='&lt;div class="fc-year-monthly-footer"&gt;&lt;/div&gt;',o+="&lt;/td&gt;",g&amp;&amp;a++}o+='&lt;td class="fc-year-month-border fc-last"&gt;&lt;/td&gt;',o+="&lt;/tr&gt;&lt;/table&gt;",this.table=t(o).appendTo(this.el),this.bodyRows=this.table.find(".fc-day-grid .fc-week"),this.bodyCells=this.bodyRows.find("td.fc-day"),this.bodyFirstCells=this.bodyCells.filter(":first-child"),this.subTables=this.table.find("td.fc-year-monthly-td"),this.head=this.table.find("thead"),this.head.find("tr.fc-year-week-days th.fc-year-weekly-head:first").addClass("fc-first"),this.head.find("tr.fc-year-week-days th.fc-year-weekly-head:last").addClass("fc-last"),this.table.find(".fc-year-monthly-name a").click(this.calendar,function(e){e.data.changeView("month"),e.data.gotoDate([t(this).attr("data-year"),t(this).attr("data-month"),1])}),this.dayBind(this.bodyCells),this.daySegmentContainer=t('&lt;div style="position:absolute;z-index:8;top:0;left:0;"/&gt;').appendTo(this.table)},buildDayGrids:function(){for(var e=this,n=[],i=0;i&lt;this.nbMonths;i++)n.push(i+this.intervalStart.month());var r=e.intervalStart.clone();this.firstDay;e.dayGrids=[],t.each(n,function(t,n){var i=new $t(e),s=e.tableByOffset(t),o=r.clone().add(t,"months");i.headRowEl=s.find(".fc-row:first"),i.scrollerEl=s.find(".fc-day-grid-container"),i.coordMap.containerEl=i.scrollerEl,i.el=s.find(".fc-day-grid"),i.offset=t,i.rowData=[],i.colData=[];var a=e.computeMonthRange(o);i.start=a.start,i.end=a.end,i.breakOnWeeks=!0,i.updateCells(),e.dayNumbersVisible=i.rowCnt&gt;1,i.numbersVisible=e.dayNumbersVisible||e.weekNumbersVisible,$t.prototype.render.call(i,e.hasRigidRows()),e.dayGrids.push(i)}),e.dayGrid=e.dayGrids[0],e.coordMap=e.dayGrid.coordMap},isFixedWeeks:function(){var t=this.opt("weekMode");return t?"fixed"===t:this.opt("fixedWeekCount")},computeMonthRange:function(t){var e=this.firstDay;this.constructor.duration={months:1};var n=Kt.prototype.computeRange.call(this,t);if(/year|month/.test(n.intervalUnit)){n.start.startOf("week"),n.start=this.skipHiddenDays(n.start),n.start.day(e),n.end.day(e),n.start.date()&gt;1&amp;&amp;n.start.date()&lt;=7&amp;&amp;n.start.subtract(7,"days");var i=Math.ceil(n.end.diff(n.start,"weeks",!0));5===this.isFixedWeeks()?4==i&amp;&amp;n.end.add(1,"weeks"):this.isFixedWeeks()&amp;&amp;6&gt;=i&amp;&amp;n.end.add(6-i,"weeks")}return n},destroy:function(){t.each(this.dayGrids,function(t,e){e.destroy()}),Kt.prototype.destroy.call(this)},updateCells:function(){var n=this;this.subTables.find(".fc-week:first").addClass("fc-first"),this.subTables.find(".fc-week:last").addClass("fc-last"),this.subTables.find(".fc-bg").find("td.fc-day:last").addClass("fc-last"),this.subTables.each(function(i,r){n.curYear||(n.curYear=n.intervalStart);var s=n.curYear.clone(),o=(i+n.intervalStart.month())%12;s=n.dayGrids[i].start;var a=0;t(r).find(".fc-bg").find("td.fc-day:first").addClass("fc-first"),n.otherMonthDays[o]=[0,0,0,0],t(r).find(".fc-content-skeleton tr").each(function(n,r){t(r).find("td").not(".fc-week-number").each(function(n,r){var s=t(r),o=e(s.attr("data-date"));o.month()!=i?(s.addClass("fc-other-month"),o.month()==i?s.addClass("fc-prev-month"):s.addClass("fc-next-month")):a=o})})}),n.bodyRows.filter(".fc-year-have-event").removeClass("fc-year-have-event")},headIntroHtml:function(){var t=null!=this.opt("weekNumberTitle")?this.opt("weekNumberTitle").substring(0,1):"";return this.weekNumbersVisible?'&lt;th class="fc-week-number-head '+this.widgetHeaderClass+'"&gt;&lt;span&gt;'+N(t)+"&lt;/span&gt;&lt;/th&gt;":""},numberIntroHtml:function(t,e){if(this.weekNumbersVisible){e=e||this.dayGrid;var n;return n=0==this.opt("isRTL")?this.calendar.calculateWeekNumber(e.getCell(t,0).start):this.calendar.calculateWeekNumber(e.getCell(t,6).start),'&lt;td class="fc-week-number" '+this.weekNumberStyleAttr("")+"&gt;&lt;span&gt;"+n+"&lt;/span&gt;&lt;/td&gt;"}return""},dayIntroHtml:function(){return this.weekNumbersVisible?'&lt;td class="fc-week-number '+this.widgetContentClass+'" '+this.weekNumberStyleAttr("")+"&gt;&lt;/td&gt;":""},introHtml:function(){return this.weekNumbersVisible?'&lt;td class="fc-week-number" '+this.weekNumberStyleAttr("")+"&gt;&lt;/td&gt;":""},weekNumberStyleAttr:function(){var t="";return null!==this.weekNumberWidth&amp;&amp;(t='style="width:'+this.weekNumberWidth+'px;"'),t},numberCellHtml:function(t){if(!this.dayNumbersVisible)return"&lt;td/&gt;";var e=t.start,n=this.dayGrid.getDayClasses(e);return n.unshift("fc-day-number"),'&lt;td class="'+n.join(" ")+'" data-date="'+e.format()+'"&gt;'+e.date()+"&lt;/td&gt;"},hasRigidRows:function(){var t=this.opt("eventLimit");return t&amp;&amp;"number"!=typeof t},cellsForMonth:function(t){return this.rowsForMonth[t]*(this.nwe?5:7)},addDays:function(t,e){t.add(e,"days")},skipWeekend:function(t,e,n){for(e=e||1;!t.day()||n&amp;&amp;1==t.day()||!n&amp;&amp;6==t.day();)this.addDays(t,e);return t},daysInMonth:function(t,e){return Dt.moment([t,e,0]).date()},dateInMonth:function(t,e){return t.month()==e%12},rowToGridOffset:function(t){for(var e=0,n=this.firstMonth;n&lt;this.lastMonth;n++)if(e+=this.rowsForMonth[n],e&gt;t)return n-this.firstMonth;return-1},rowToGridRow:function(t){for(var e=0,n=this.firstMonth;n&lt;this.lastMonth;n++)if(e+=this.rowsForMonth[n],e&gt;t)return t-(e-this.rowsForMonth[n]);return-1},tableByOffset:function(e){return t(this.subTables[e])},setGridHeight:function(e,n,i){return"undefined"!=typeof i?void(n?c(i.rowEls):u(i.rowEls,e,!0)):void t.each(this.dayGrids,function(t,i){n?c(i.rowEls):u(i.rowEls,e,!0)})},computeScrollerHeight:function(t,e){var n,i;e=e||this.scrollerEl;var r=e.closest(".fc-year-monthly-td");return n=r.add(e),n.css({position:"relative",left:-1}),i=r.outerHeight()-e.height(),n.css({position:"",left:""}),t-i},setHeight:function(e,n){var i,r=this,s=this.opt("eventLimit");t.each(this.dayGrids,function(t,l){l.el.length&gt;0&amp;&amp;(g(l.scrollerEl),a(l.headRowEl),l.destroySegPopover(),s&amp;&amp;"number"==typeof s&amp;&amp;l.limitRows(s),i||(i=r.computeScrollerHeight(e,l.scrollerEl)),r.setGridHeight(i,n,l),s&amp;&amp;"number"!=typeof s&amp;&amp;l.limitRows(s),!n&amp;&amp;f(l.scrollerEl,i)&amp;&amp;(o(l.headRowEl,m(l.scrollerEl)),
    i=r.computeScrollerHeight(e,l.scrollerEl),l.scrollerEl.height(i),r.restoreScroll()))})},updateWidth:function(){this.weekNumbersVisible&amp;&amp;(this.weekNumberWidth=h(this.el.find(".fc-week-number")),this.weekNumberWidth&amp;&amp;this.el.find(".fc-week-number-head").width(this.weekNumberWidth+2))},updateHeight:function(){var t=this.calendar;if(this.yearColumns&gt;0){var e=t.getSuggestedViewHeight()*(1.1/(.01+this.yearColumns));this.setHeight(e,t.isHeightAuto())}},dayBind:function(t){t.click(this.dayClick)},dayClick:function(e){if(!this.opt("selectable")){var n=this.className.match(/fc\-day\-(\d+)\-(\d+)\-(\d+)/),i=new Date(n[1],n[2]-1,n[3]);t.trigger("dayClick",this,Dt.moment(i),!0,e)}},renderEvents:function(e){t.each(this.dayGrids,function(t,n){n.renderEvents(e)}),this.updateHeight()},getEventSegs:function(){var e=[];return t.each(this.dayGrids,function(t,n){for(var i=n.getEventSegs(),r=0;r&lt;i.length;r++)e.push(i[r])}),e},destroyEvents:function(){this.recordScroll(),t.each(this.dayGrids,function(t,e){e.destroyEvents()})},renderDrag:function(e,n){var i=!1;return t.each(this.dayGrids,function(t,i){i.renderDrag(e,n)}),i},destroyDrag:function(){t.each(this.dayGrids,function(t,e){e.destroyDrag()})},renderSelection:function(e,n){t.each(this.dayGrids,function(t,i){i!==n&amp;&amp;(i.start&lt;=e.end||i.end&gt;=e.start)&amp;&amp;i.renderSelection(e)})},destroySelection:function(){t.each(this.dayGrids,function(t,e){e.destroySelection()})}})});
    /*! RESOURCE: /scripts/reportcommon/chart-helpers.js */
    var chartHelpers = window.chartHelpers || {};
    chartHelpers.objectSize = function objectSize(obj) {
    var size = 0;
    var key;
    for (key in obj)
    if (obj.hasOwnProperty(key))
    size++;
    return size;
    };
    chartHelpers.compareByProperty = function compareByProperty(property, desc) {
    return function propertyCompare(a, b) {
    if (a[property] &gt; b[property])
    return desc ? -1 : 1;
    if (a[property] &lt; b[property])
    return desc ? 1 : -1;
    return 0;
    };
    };
    chartHelpers.evaluateColorRules = function evaluateColorRules(score, rules) {
    if (typeof score !== 'undefined' &amp;&amp; score !== null &amp;&amp; score !== '' &amp;&amp; rules) {
    rules.sort(chartHelpers.compareByProperty('ruleOrder', true));
    var operate = {
    '&lt;': function lessThan(x, y) { return x &lt; y; },
    '&lt;=': function lessThanEqual(x, y) { return x &lt;= y; },
    '=': function Equal(x, y) { return x === y; },
    '&gt;=': function greaterThanEqual(x, y) { return x &gt;= y; },
    '&gt;': function greaterThan(x, y) { return x &gt; y; },
    between: function between(x, y, z) { return x &gt; y &amp;&amp; x &lt; z; }
    };
    for (var i = 0; i &lt; rules.length; i++)
    if (operate[rules[i].operator](score, rules[i].value1, rules[i].value2))
    return { color: rules[i].color, bgColor: rules[i].bgColor };
    }
    return '';
    };
    chartHelpers.hexEncode = function(utf8String){
    var hex;
    var i;
    var result = '';
    for (i=0; i &lt; utf8String.length; i++) {
    hex = utf8String.charCodeAt(i).toString(16);
    result += '\\u' + ('000' + hex).slice(-4);
    }
    return result;
    };
    ;
    /*! RESOURCE: /scripts/reportcommon/display_grid.js */
    function checkAndEnableDisplayGrid(chartData, args) {
    args.otherDisplay = 'Other';
    args.otherDisplayMore = '(more...)';
    if ('report_properties' in chartData) {
    args.otherDisplay = chartData.report_properties.other_display;
    args.otherDisplayMore = chartData.report_properties.other_display_more;
    }
    var $gridTable = getGridTable(args);
    var hasData = (chartData.series[0].xvalues &amp;&amp; chartData.series[0].xvalues.length) || args.chart_type === 'solid_gauge' || args.chart_type === 'angular_gauge';
    if ($gridTable.length &amp;&amp; hasData) {
    $gridTable.html('&lt;thead&gt;' +
    '&lt;tr class="header display_grid_header"&gt;' +
    '&lt;/tr&gt;' +
    '&lt;/thead&gt;' +
    '&lt;tbody class="display_grid_body"/&gt;');
    enableDisplayGrid($gridTable, chartData, args);
    } else
    $gridTable.empty();
    }
    function enableDisplayGrid($gridTable, chartData, args) {
    if (args.chart_type === 'box' || args.chart_type === 'tbox')
    createBoxDisplayGrid($gridTable, chartData);
    else if (args.chart_type === 'control')
    showControlDisplayGrid($gridTable, chartData);
    else if (args.chart_type === 'solid_gauge' || args.chart_type === 'angular_gauge')
    createGaugeDisplayGrid($gridTable, chartData);
    else
    showDisplayGrid($gridTable, chartData, isTwoLevelDisplayGrid(args), args);
    if (args.display_grid)
    $gridTable.show();
    else
    $gridTable.hide();
    addAccessibility($gridTable, chartData, args);
    }
    function showDisplayGrid($gridTable, chartData, hasStacking, args) {
    var otherKey = 'zzyynomatchaabb';
    var $gridTableBody = getGridTableBody($gridTable);
    var yDispValsExist = false;
    if (chartData.series.length) {
    var seriesData = chartData.series[0];
    if ('ydisplayvalues' in seriesData &amp;&amp; seriesData.ydisplayvalues !== '')
    yDispValsExist = true;
    var trClass = 'odd';
    var omitOther = false;
    if ('display_grid_xvalues' in seriesData)
    omitOther = true;
    if (seriesData.xvalues !== undefined &amp;&amp; seriesData.xvalues.length) {
    createBasicDisplayGridHeader($gridTable, seriesData, chartData.report_properties.percents_from_count, hasStacking);
    var multipleOther = false;
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    var value = seriesData.xvalues[j];
    if (value === otherKey &amp;&amp; omitOther)
    if (j === seriesData.xvalues.length - 1)
    break;
    if (value === args.otherDisplay &amp;&amp; j &lt; seriesData.xvalues.length - 1)
    multipleOther = true;
    if (value === otherKey) {
    if (multipleOther)
    value = args.otherDisplay + ' ' + args.otherDisplayMore;
    else
    value = args.otherDisplay;
    }
    if (yDispValsExist)
    var yVal = seriesData.ydisplayvalues[j];
    else
    yVal = seriesData.yvalues[j];
    if (yVal) {
    var row = createRowForGrid(trClass, value, yVal, seriesData.percentages[j], hasStacking);
    if (trClass === 'odd')
    trClass = 'even';
    else
    trClass = 'odd';
    $gridTableBody.append(row);
    }
    }
    if ('display_grid_xvalues' in seriesData) {
    var additionalGridYDispValsExist = false;
    if ('display_grid_ydisplayvalues' in seriesData)
    additionalGridYDispValsExist = true;
    for (j = 0; j &lt; seriesData.display_grid_xvalues.length; j++) {
    value = seriesData.display_grid_xvalues[j];
    yVal = null;
    if (additionalGridYDispValsExist)
    yVal = seriesData.display_grid_ydisplayvalues[j];
    else
    yVal = seriesData.display_grid_yvalues[j];
    if (yVal) {
    row = createRowForGrid(trClass, value, yVal, seriesData.display_grid_percents[j], hasStacking);
    if (trClass === 'odd')
    trClass = 'even';
    else
    trClass = 'odd';
    $gridTableBody.append(row);
    }
    }
    }
    if (hasStacking)
    createTwoLevelDisplayGridTable(chartData, args, $gridTableBody);
    displayGridTotal($gridTableBody, seriesData.display_grid_total, seriesData.total_label, hasStacking);
    }
    }
    }
    function addAccessibility($gridTable, chartData, args) {
    if (window.g_accessibility === 'true' || window.g_accessibility === true) {
    var $displayGridToggle = getGridExpandAnchor(args);
    var id = $gridTable.attr('id');
    if ($displayGridToggle.length)
    $displayGridToggle.remove();
    $displayGridToggle = jQuery('&lt;a tabindex="0" id="expand.' + id + '" aria-expanded="false" role="button" class="grid-toggle" onkeypress="javascript: if(event.keyCode == 32) toggleDisplayGrid(\'' + id + '\', this);" onclick="toggleDisplayGrid(\'' + id + '\', this)"&gt;' +
    '&lt;img title="Chart data" src="images/section_hide.gifx" alt="Chart data" width="16px" /&gt;' +
    '&lt;/a&gt;');
    $gridTable.before($displayGridToggle);
    if (args.display_grid) {
    $displayGridToggle.attr('aria-expanded', true);
    $displayGridToggle.children().attr('src', 'images/section_reveal.gifx');
    }
    $gridTable.prepend('&lt;caption&gt;&lt;b&gt;&lt;/b&gt;&lt;/caption&gt;');
    $gridTable.find('caption b').text(chartData.series[0].display_grid_title);
    }
    }
    function createTwoLevelDisplayGridTable(chartData, args, $body) {
    var additionalGridValuesExist = false;
    var seriesData = chartData.series[0];
    var subSeriesData = chartData.series[0].sub_series;
    if (subSeriesData &amp;&amp; subSeriesData[0]) {
    createSecondLevelHeader($body, seriesData, chartData.report_properties.percents_from_count);
    if ('display_grid_xvalues' in seriesData &amp;&amp; 'dispGridSubSeries' in seriesData)
    additionalGridValuesExist = true;
    var isDuration = false;
    if (('yaxis_duration' in seriesData) &amp;&amp; (seriesData.yaxis_duration))
    isDuration = true;
    createSecondLevelDisplayGrid(seriesData.xvalues, subSeriesData, isDuration, $body, args, additionalGridValuesExist);
    if (additionalGridValuesExist) {
    var dispGridSubSeries = chartData.series[0].dispGridSubSeries;
    createSecondLevelDisplayGrid(seriesData.display_grid_xvalues, dispGridSubSeries, isDuration, $body, args, additionalGridValuesExist);
    }
    }
    }
    function createSecondLevelDisplayGrid(xValues, subSeriesData, isDuration, $body, args, additionalGridValuesExist) {
    var otherKey = 'zzyynomatchaabb';
    var trClass = 'even';
    var multipleOther = false;
    for (var i = 0; i &lt; subSeriesData.length; i++) {
    var firstLevelXVal = xValues[i];
    if (additionalGridValuesExist &amp;&amp; firstLevelXVal === otherKey) {
    continue;
    }
    if (!additionalGridValuesExist) {
    if (firstLevelXVal === args.otherDisplay &amp;&amp; i &lt; xValues.length - 1)
    multipleOther = true;
    if (firstLevelXVal === otherKey) {
    if (multipleOther)
    firstLevelXVal = args.otherDisplay + ' ' + args.otherDisplayMore;
    else
    firstLevelXVal = args.otherDisplay;
    }
    }
    var curSubSeries = subSeriesData[i];
    if (curSubSeries) {
    var curSubSeriesHasYDispVals = false;
    if ('ydisplayvalues' in curSubSeries &amp;&amp; curSubSeries.ydisplayvalues !== '')
    curSubSeriesHasYDispVals = true;
    for (var j = 0; j &lt; curSubSeries.xvalues.length; j++) {
    var row = document.createElement('tr');
    row.className = trClass;
    var chartClass = 'chart';
    if (j === (curSubSeries.xvalues.length - 1))
    chartClass = 'chart-spacer';
    if (j === 0)
    row.appendChild(createDisplayGridHeaderCell('chart-spacer', firstLevelXVal, null, null, null, curSubSeries.xvalues.length));
    xValue = curSubSeries.xvalues[j].displayValue;
    if (xValue === undefined)
    xValue = curSubSeries.xvalues[j];
    row.appendChild(createDisplayGridCell(chartClass, xValue));
    if (curSubSeriesHasYDispVals)
    row.appendChild(createDisplayGridCell(chartClass, curSubSeries.ydisplayvalues[j], 'right'));
    else
    row.appendChild(createDisplayGridCell(chartClass, curSubSeries.yvalues[j], 'right'));
    row.appendChild(createDisplayGridCell(chartClass, curSubSeries.percentages[j] + '%', 'right'));
    if (trClass === 'odd')
    trClass = 'even';
    else
    trClass = 'odd';
    $body.append(row);
    }
    }
    trClass = 'even';
    }
    }
    function createBasicDisplayGridHeader($table, series, computePercent, hasStacking) {
    var $header = getGridTableHeader($table);
    var totals = '';
    var colSpan = 1;
    if (hasStacking) {
    totals = ' ' + series.totals_label;
    colSpan = 2;
    }
    $header.append(createDisplayGridHeaderCell('chart', series.group_by_label + totals, null, true, colSpan))
    .append(createDisplayGridHeaderCell('chart', series.yTitle + totals, 'right', true));
    var percentLabel = series.percentage_label + series.aggregate_label;
    if (computePercent || isPieType(series.series_plot_type))
    percentLabel = series.percentage_label + series.table_display_plural;
    $header.append(createDisplayGridHeaderCell('chart', percentLabel, 'right', true));
    series.completePercentLabel = percentLabel;
    }
    function createSecondLevelHeader($body, series) {
    var $secondHeader = jQuery('&lt;tr class="header display_grid_header"/&gt;');
    $body.append($secondHeader);
    $secondHeader.append(createDisplayGridHeaderCell('chart', series.group_by_label, null, true))
    .append(createDisplayGridHeaderCell('chart', series.second_group_by_label, null, true))
    .append(createDisplayGridHeaderCell('chart', series.yTitle, 'right', true))
    .append(createDisplayGridHeaderCell('chart', series.completePercentLabel, 'right', true));
    }
    function createBoxDisplayGrid($gridTable, chartData) {
    if (chartData.series.length &gt; 0) {
    var $gridTableBody = getGridTableBody($gridTable);
    var seriesData = chartData.series[0];
    var trClass = 'odd';
    var $header = getGridTableHeader($gridTable);
    $header.append(createDisplayGridHeaderCell('chart', seriesData.group_by_label, null, true))
    .append(createDisplayGridHeaderCell('chart', seriesData.mean_label, 'right', true))
    .append(createDisplayGridHeaderCell('chart', seriesData.minimum_label, 'right', true))
    .append(createDisplayGridHeaderCell('chart', seriesData.first_quartile_label, 'right', true))
    .append(createDisplayGridHeaderCell('chart', seriesData.median_label, 'right', true))
    .append(createDisplayGridHeaderCell('chart', seriesData.third_quartile_label, 'right', true))
    .append(createDisplayGridHeaderCell('chart', seriesData.maximum_label, 'right', true));
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    var row = document.createElement('tr');
    row.className = trClass;
    var value = seriesData.xvalues[j];
    var style = 'chart';
    var groupByStyle = 'chart';
    row.appendChild(createDisplayGridHeaderCell(groupByStyle, value));
    row.appendChild(createDisplayGridCell(style, seriesData.ydisplayvalues[j], 'right'));
    var boxDisplayVals = seriesData.boxdisplayvalues[j];
    for (var k = 0; k &lt; 5; k++)
    row.appendChild(createDisplayGridCell(style, boxDisplayVals[k], 'right'));
    if (trClass === 'odd')
    trClass = 'even';
    else
    trClass = 'odd';
    $gridTableBody.append(row);
    }
    }
    }
    function showControlDisplayGrid($gridTable, chartData) {
    var $gridTableBody = getGridTableBody($gridTable);
    var isDuration = false;
    if (chartData.series.length &gt; 0) {
    var seriesData = chartData.series[0];
    if (('yaxis_duration' in seriesData) &amp;&amp; (seriesData.yaxis_duration))
    isDuration = true;
    var $header = getGridTableHeader($gridTable);
    $header.append(createDisplayGridHeaderCell('chart', seriesData.group_by_label + ' ' + seriesData.per + ' ' + seriesData.trend, null, true))
    .append(createDisplayGridHeaderCell('chart', seriesData.aggregate_label + ' ' + seriesData.data_points_label, 'right', true))
    .append(createDisplayGridHeaderCell('chart', seriesData.aggregate_label + ' ' + seriesData.trend_line_label, 'right', true));
    var trClass = 'odd';
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    row = document.createElement('tr');
    row.className = trClass;
    var style = 'chart';
    row.appendChild(createDisplayGridCell(style, seriesData.xvalues[j]));
    row.appendChild(createDisplayGridCell(style, seriesData.ydisplayvalues[j], 'right'));
    row.appendChild(createDisplayGridCell(style, isDuration === true ? seriesData.trenddisplayvalues[j] : seriesData.trendvalues[j], 'right'));
    $gridTableBody.append(row);
    if (trClass === 'odd')
    trClass = 'even';
    else
    trClass = 'odd';
    }
    var row = document.createElement('tr');
    row.className = 'header display_grid_header';
    row.appendChild(createDisplayGridHeaderCell(style, 'Control Values'));
    row.appendChild(createDisplayGridHeaderCell(style, seriesData.aggregate_label, 'right'));
    row.appendChild(createDisplayGridHeaderCell(style, ''));
    $gridTableBody.append(row);
    var standDev = seriesData.standard_deviation_label;
    row = document.createElement('tr');
    row.className = 'odd';
    row.appendChild(createDisplayGridCell(style, '-3 ' + standDev));
    row.appendChild(createDisplayGridCell(style, isDuration === true ? seriesData.controldisplayvalues[0] : seriesData.controlvalues[0], 'right'));
    row.appendChild(createDisplayGridCell(style, ''));
    $gridTableBody.append(row);
    row = document.createElement('tr');
    row.className = 'even';
    row.appendChild(createDisplayGridCell(style, '-2 ' + standDev));
    row.appendChild(createDisplayGridCell(style, isDuration === true ? seriesData.controldisplayvalues[1] : seriesData.controlvalues[1], 'right'));
    row.appendChild(createDisplayGridCell(style, ''));
    $gridTableBody.append(row);
    row = document.createElement('tr');
    row.className = 'odd';
    row.appendChild(createDisplayGridCell(style, seriesData.mean_label));
    row.appendChild(createDisplayGridCell(style, isDuration === true ? seriesData.controldisplayvalues[2] : seriesData.controlvalues[2], 'right'));
    row.appendChild(createDisplayGridCell(style, ''));
    $gridTableBody.append(row);
    row = document.createElement('tr');
    row.className = 'even';
    row.appendChild(createDisplayGridCell(style, '+2 ' + standDev));
    row.appendChild(createDisplayGridCell(style, isDuration === true ? seriesData.controldisplayvalues[3] : seriesData.controlvalues[3], 'right'));
    row.appendChild(createDisplayGridCell(style, ''));
    $gridTableBody.append(row);
    row = document.createElement('tr');
    row.className = 'odd';
    row.appendChild(createDisplayGridCell(style, '+3 ' + standDev));
    row.appendChild(createDisplayGridCell(style, isDuration === true ? seriesData.controldisplayvalues[4] : seriesData.controlvalues[4], 'right'));
    row.appendChild(createDisplayGridCell(style, ''));
    $gridTableBody.append(row);
    }
    }
    function createGaugeDisplayGrid($gridTable, chartData) {
    if (chartData.series.length) {
    var seriesData = chartData.series[0];
    var $gridTableBody = getGridTableBody($gridTable);
    var yDispValsExist;
    var $header = getGridTableHeader($gridTable);
    $header.append(createDisplayGridHeaderCell('chart', seriesData.yTitle, 'center', true));
    if ('ydisplayvalues' in seriesData &amp;&amp; seriesData.ydisplayvalues !== '')
    yDispValsExist = true;
    var row = document.createElement('tr');
    row.className = 'odd';
    var style = 'chart';
    var value;
    if (yDispValsExist)
    value = seriesData.ydisplayvalues;
    else
    value = seriesData.yvalues;
    row.appendChild(createDisplayGridCell(style, value, 'center'));
    $gridTableBody.append(row);
    }
    }
    function displayGridTotal($body, total, totalLabel, hasStacking) {
    var $totalRow = jQuery('&lt;tr class="display-grid-total-row" /&gt;');
    $body.append($totalRow);
    var colSpan = 1;
    if (hasStacking)
    colSpan = 2;
    $totalRow.append(createDisplayGridHeaderCell('chart_total', totalLabel, null, null, colSpan))
    .append(createDisplayGridCell('chart_total', total, 'right'))
    .append(createDisplayGridCell('chart_total', '100%', 'right'));
    }
    function createRowForGrid(trClass, xVal, yVal, percent, hasStacking) {
    var row = document.createElement('tr');
    row.className = trClass;
    var style = 'chart';
    var groupByStyle = 'chart';
    var colSpan = 1;
    if (hasStacking) {
    xVal += ' Total';
    style = 'chart_subtotal';
    groupByStyle = 'chart_subtotal_text';
    colSpan = 2;
    }
    row.appendChild(createDisplayGridHeaderCell(groupByStyle, xVal, null, null, colSpan));
    row.appendChild(createDisplayGridCell(style, yVal, 'right'));
    if(percent &amp;&amp; percent !== '')
    row.appendChild(createDisplayGridCell(style, percent + '%', 'right'));
    else
    row.appendChild(createDisplayGridCell(style, 'N/A', 'right'));
    return row;
    }
    function createDisplayGridHeaderCell(cssClass, value, alignment, isHead, colSpan, rowSpan) {
    var gridCell = document.createElement('th');
    var scope = 'row';
    if (isHead) {
    scope = 'col';
    }
    gridCell.setAttribute('scope', scope);
    createDisplayGridCellCommon(gridCell, cssClass, value, alignment, colSpan, rowSpan);
    return gridCell;
    }
    function createDisplayGridCell(cssClass, value, alignment) {
    var gridCell = document.createElement('td');
    createDisplayGridCellCommon(gridCell, cssClass, value, alignment);
    return gridCell;
    }
    function createDisplayGridCellCommon(gridCell, cssClass, value, alignment, colSpan, rowSpan) {
    gridCell.className = cssClass;
    gridCell.style.textAlign = 'left';
    if (alignment)
    gridCell.style.textAlign = alignment;
    if (colSpan)
    gridCell.setAttribute('colspan', colSpan);
    if (rowSpan)
    gridCell.setAttribute('rowspan', rowSpan);
    gridCell.appendChild(document.createTextNode(value));
    }
    function isDisplayGridApplicable(chartType) {
    if (chartType === 'bar' || chartType === 'horizontal_bar' || isPieType(chartType) || chartType === 'line_bar' || chartType === 'line' || chartType === 'step_line' || chartType === 'area' || chartType === 'spline' || chartType === 'availability' || chartType === 'pareto' || chartType === 'trend' || chartType === 'map' || chartType === 'solid_gauge'
    || chartType === 'angular_gauge')
    return true;
    return false;
    }
    function getGridTable(args) {
    return jQuery('#display-grid-table-' + args.report_uuid);
    }
    function getGridTableHeader($table) {
    return $table.find('.display_grid_header');
    }
    function getGridTableBody($table) {
    return $table.children('.display_grid_body');
    }
    function getGridExpandAnchor(args) {
    return jQuery('#expand\\.display_grid_table' + args.report_uuid);
    }
    function isTwoLevelDisplayGrid(args) {
    if ((args.stacked_field !== '' &amp;&amp; isBarType(args.chart_type)))
    return true;
    if (args.group_by !== '' &amp;&amp; (args.chart_type === 'trend' || args.chart_type === 'line' || args.chart_type === 'step_line' || args.chart_type === 'area' || args.chart_type === 'spline' || args.chart_type === 'line_bar'))
    return true;
    return false;
    }
    function toggleDisplayGrid(name, anchor) {
    var el = jQuery('#' + name);
    if (!el)
    return;
    var anchorEl = jQuery(anchor);
    if (anchorEl.attr('aria-expanded') === 'true') {
    el.hide();
    anchorEl.children().attr('src', 'images/section_hide.gifx');
    anchorEl.attr('aria-expanded', false);
    } else {
    el.show();
    anchorEl.children().attr('src', 'images/section_reveal.gifx');
    anchorEl.attr('aria-expanded', true);
    }
    }
    ;
    /*! RESOURCE: /scripts/reportcommon/additional_groupby.js */
    function hasAdditionalGroupBy(type) {
    return !(type === 'hist' || type === 'pivot' || type === 'heatmap' || type === 'pivot_v2' || type === 'calendar' || type === 'control' || type === 'availability' || type === 'angular_gauge' || type === 'solid_gauge' || type === 'gauge' || type === 'single_score' || type === 'map');
    }
    function checkAndEnableInteractiveFilters(chartData, args) {
    var isMultiSeries = false;
    if ('report_properties' in chartData)
    isMultiSeries = chartData.series.length &gt; 1;
    var $interactiveContainer = jQuery('#interactive-container-' + args.report_uuid);
    var msgIntoAdditionalGroupByPopup = document.getElementById('msg_additional_group_by');
    if (isMultiSeries) {
    if ($interactiveContainer.length)
    $interactiveContainer.hide();
    if (msgIntoAdditionalGroupByPopup)
    msgIntoAdditionalGroupByPopup.show();
    } else {
    if (msgIntoAdditionalGroupByPopup)
    msgIntoAdditionalGroupByPopup.hide();
    if ($interactiveContainer.length)
    constructInteractiveFilters(chartData.series[0].additional_groupby, args, $interactiveContainer);
    }
    }
    function constructInteractiveFilters(additionalGroupBy, args, $interactiveContainer) {
    var $stackBySelect;
    $interactiveContainer.append(
    '&lt;div class="additional-groupby-label"&gt;' +
    '&lt;label for="additional-groupby-' + args.report_uuid + '" id="additional-groupby-label" title="' + window.chartHelpers.i18n.groupByTitle + '"&gt;' +
    window.chartHelpers.i18n.groupBy +
    '&lt;/label&gt;' +
    '&lt;/div&gt;');
    var $groupByContainer = jQuery('&lt;div class="additional-groupby-select"/&gt;');
    $interactiveContainer.append($groupByContainer);
    var $groupBySelect = jQuery('&lt;select id="additional-groupby-' + args.report_uuid + '" name="additional-groupby" class="interactive"/&gt;');
    createAdditionalOptions($groupBySelect, additionalGroupBy.list, additionalGroupBy.original_group_by, additionalGroupBy.original_stack_by, args.group_by, hasNone(args.chart_type));
    if (isBarType(args.chart_type)) {
    var originalGroupBy = additionalGroupBy.original_group_by_can_be_stacked ? additionalGroupBy.original_group_by : null;
    $stackBySelect = jQuery('&lt;select id="additional-stackby-' + args.report_uuid + '" name="additional-stackby" class="interactive"/&gt;');
    createAdditionalOptions($stackBySelect, additionalGroupBy.stackby_list, additionalGroupBy.original_stack_by, originalGroupBy, args.stacked_field, true);
    }
    $groupBySelect.change(function groupBySelectChangeCallback() {
    applyExecutiveReport(args.report_id, $groupBySelect, $stackBySelect, JSON.parse(args.chart_params).interactive_filter);
    });
    $groupByContainer.append($groupBySelect);
    if ($stackBySelect) {
    $interactiveContainer.append(
    '&lt;div class="additional-stackby-label"&gt;' +
    '&lt;label for="additional-stackby-' + args.report_uuid + '" id="additional-stackby-label" title="' + window.chartHelpers.i18n.stackByTitle + '"&gt;' +
    window.chartHelpers.i18n.stackBy +
    '&lt;/label&gt;' +
    '&lt;/div&gt;');
    var $stackByContainer = jQuery('&lt;div class="additional-groupby-select"/&gt;');
    $interactiveContainer.append($stackByContainer);
    $stackBySelect.change(function stackBySelectChangeCallback() {
    applyExecutiveReport(args.report_id, $groupBySelect, $stackBySelect, JSON.parse(args.chart_params).interactive_filter);
    });
    $stackByContainer.append($stackBySelect);
    }
    }
    function createAdditionalOptions($select, choices, originalGrouping, otherGrouping, selectedValue, hasNoneOption) {
    var option;
    if (hasNoneOption) {
    option = new Option(window.chartHelpers.i18n.none, '');
    $select.append(jQuery(option));
    }
    if (originalGrouping) {
    option = new Option(originalGrouping.label, originalGrouping.value);
    $select.append(jQuery(option));
    }
    for (var i = 0; i &lt; choices.length; ++i) {
    option = new Option(choices[i].label, choices[i].value);
    $select.append(jQuery(option));
    }
    if (otherGrouping &amp;&amp; !$select.children('option[value=\'' + otherGrouping.value + '\']').length) {
    option = new Option(otherGrouping.label, otherGrouping.value);
    $select.append(jQuery(option));
    }
    if (selectedValue === 'variables')
    $select.val($select.children()[0].value);
    else
    $select.val(selectedValue);
    }
    function hasNone(type) {
    return type === 'list' || type === 'bubble' || type === 'trend' || type === 'line' || type === 'step_line' || type === 'line_bar' || type === 'area' || type === 'spline';
    }
    ;
    /*! RESOURCE: /scripts/reportcommon/buildhcoptions.js */
    function hc_configureChartProportions(chartType, chartData, hcOptions, isGauge, isUI) {
    hc_configureLegendAlignment(chartType, chartData.report_properties, hcOptions, isGauge, isUI);
    if(hc_isSlowMetricChart(hcOptions, chartData.series[0])){
    hcOptions.plotOptions.column = {};
    var closestPointRange = hc_differenceOfClosestStringDateTimesInSeries(chartData.series[0].xvalues);
    if(closestPointRange !== 0)
    hcOptions.plotOptions.column.pointRange = closestPointRange;
    }
    }
    function hc_configureLegendAlignment(chartType, reportProperties, hcOptions, isGauge, isUI) {
    var legendVerticalAlign = reportProperties.legend_vertical_alignment;
    var legendHorizontalAlign = reportProperties.legend_horizontal_alignment;
    var legendItemsLeftAlign = reportProperties.legend_items_left_align;
    var hasLegend = hcOptions.legend.enabled;
    var titleVerticalAlign = reportProperties.title_vertical_alignment;
    var showChartTitle = !reportProperties.custom_chart_title_position &amp;&amp; (reportProperties.show_chart_title === 'always' || (!isGauge &amp;&amp; reportProperties.show_chart_title === 'report'));
    var titleSize =  Number(reportProperties.chart_title_size);
    var chartWidth = Number(hcOptions.chart.width);
    var chartHeight = Number(hcOptions.chart.height);
    if (hasLegend) {
    if (legendHorizontalAlign === "right") {
    if (legendVerticalAlign === "top") {
    hcOptions.legend.y = 25;
    } else if (legendVerticalAlign === "bottom") {
    hcOptions.legend.maxHeight = chartHeight - 70;
    } else if (legendVerticalAlign === "middle") {
    hcOptions.legend.maxHeight = chartHeight - 100;
    }
    } else if (legendHorizontalAlign === "center") {
    if (legendItemsLeftAlign || chartType === 'heatmap' || chartType === 'map')
    hcOptions.legend.width = chartWidth - 20;
    if (isUI)
    hcOptions.legend.maxHeight = chartHeight / 6;
    if (chartType === 'heatmap' || chartType === 'map') {
    hcOptions.legend.symbolWidth = hcOptions.legend.width -10;
    hcOptions.legend.maxHeight = '';
    }
    if (legendVerticalAlign === "top") {
    hcOptions.legend.y = -2;
    if (showChartTitle &amp;&amp; titleVerticalAlign === "top")
    hcOptions.legend.y = titleSize + 10;
    }
    }
    if (legendVerticalAlign === "bottom" &amp;&amp; showChartTitle &amp;&amp; titleVerticalAlign === "bottom") {
    hcOptions.legend.y = 0 - (titleSize + 10);
    }
    }
    if ((!hasLegend || (legendHorizontalAlign !== "center" || legendVerticalAlign !== "bottom"))
    &amp;&amp; showChartTitle &amp;&amp; titleVerticalAlign === "bottom" &amp;&amp; chartType !== "solid_gauge") {
    if (chartType === 'pie' || chartType === 'donut' || chartType === 'semi_donut' || chartType === "angular_gauge")
    hcOptions.chart.marginBottom = titleSize;
    else if (chartType === "funnel" || chartType === "pyramid")
    hcOptions.chart.marginBottom = titleSize + 40;
    else
    hcOptions.chart.marginBottom = titleSize + 75;
    }
    }
    function hc_setLegendLabelFormatter(hcOptions, isUI, isPercent) {
    var isCentered = (hcOptions.legend.align === 'center');
    if (isUI) {
    if (isCentered &amp;&amp; isPercent) {
    hcOptions.legend.labelFormatter = hc_legendLabelPercentFormatter;
    } else if (!isCentered){
    if (isPercent) {
    hcOptions.legend.labelFormatter = hc_legendLabelShortenedPercentFormatter;
    } else {
    hcOptions.legend.labelFormatter = hc_legendLabelShortenedFormatter;
    }
    }
    } else {
    if (isCentered) {
    if (isPercent) {
    hcOptions.legend.labelFormatter = 'hc_legendLabelPercentFormatter';
    }
    } else {
    if (isPercent) {
    hcOptions.legend.labelFormatter = 'hc_legendLabelShortenedPercentFormatter';
    } else {
    hcOptions.legend.labelFormatter = 'hc_legendLabelShortenedFormatter';
    }
    }
    }
    }
    function hc_generateChartOptions(chartType, chartData, aggType, stackedField, chartHeight, chartWidth, chartSize, isRtl) {
    var hcOptions = {};
    var chartProps = hc_initDefaultChartOptions(hcOptions, chartData, chartType, chartSize,  false,  false,  ''
    , aggType, stackedField,  false, chartHeight, chartWidth, isRtl);
    hc_sanitizeXValues(chartData, chartProps);
    hc_setLegendLabelFormatter(hcOptions, false, false);
    if(chartType == 'bubble'){
    hcOptions.series = hc_createBubbleSeriesData( chartData, chartProps, true);
    hcOptions.xAxis = chartData.series[0].xAxis;
    hcOptions.yAxis = chartData.series[0].yAxis;
    hc_addBubbleChartOptions(hcOptions, true, chartData.series[0].legend.enabled);
    } else if(chartType == 'heatmap'){
    var curSeries =  hc_createHeatmapSeriesData( chartData, chartProps, true);
    hcOptions.series.push(curSeries);
    hc_addHeatmapChartOptions(hcOptions,chartProps,true, chartData, curSeries);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, true);
    hc_addHeatmapAxisCategories(hcOptions, chartData);
    } else if (chartType == 'pie' || chartType == 'semi_donut' || chartType == 'donut') {
    hc_addPieChartOptions(hcOptions, chartProps, false, chartType == 'semi_donut');
    var curSeries =  hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    if (chartType == 'semi_donut' || chartType == 'donut') {
    curSeries.innerSize = (100 - chartProps.report_properties.donut_width_percent) + "%";
    if (chartProps.report_properties.show_chart_total)
    hc_addTotal(hcOptions, chartProps, curSeries, chartData);
    }
    hcOptions.series.push(curSeries);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == 'funnel') {
    hc_addFunnelChartOptions(hcOptions, chartProps, false,chartData);
    var curSeries =  hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(curSeries);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == 'pyramid') {
    hc_addPyramidChartOptions(hcOptions, chartProps, false,chartData);
    var curSeries =  hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(curSeries);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == "angular_gauge" || chartType == "solid_gauge") {
    hc_addGaugeChartOptions(hcOptions, chartProps, chartData, hc_getHighChartsType(chartType), false);
    var curSeries =  hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(curSeries);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == 'bar' || chartType == 'horizontal_bar') {
    if (stackedField == '')
    hc_addBarChartOptions(hcOptions, chartProps, chartData, hc_getHighChartsType(chartType), false);
    else
    hc_addStackedBarChartOptions(hcOptions, chartProps, chartData, hc_getHighChartsType(chartType), false);
    var series;
    series = hc_createMultipleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series = series;
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == 'hist') {
    hc_addHistogramOptions(hcOptions, chartProps, chartData, false);
    var curSeries = hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(curSeries);
    } else if (chartType == 'pareto') {
    hc_addBarChartOptions(hcOptions, chartProps, chartData, 'column', false);
    var series0 = hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(series0);
    var cumulative_series = hc_createParetoCumulSeries( hcOptions, chartProps, series0, false);
    hcOptions.series.push(cumulative_series);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == 'control') {
    hc_addControlChartOptions(hcOptions, chartProps, chartData, false);
    hcOptions.series = hc_createControlSeriesData(hcOptions, chartData, chartProps, false);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (chartType == 'box' || chartType == 'tbox') {
    hc_addBoxChartOptions(hcOptions, chartProps, chartData, false);
    var boxSeries = hc_createBoxPlotData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(boxSeries);
    var meanSeries = hc_createBoxMeanData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(meanSeries);
    } else if (chartType == 'trend') {
    var curSeries;
    if('sub_series' in chartData.series[0]) {
    hc_addStackedBarChartOptions(hcOptions, chartProps, chartData, hc_getHighChartsType(chartType), false);
    hcOptions.series = hc_createMultipleSeriesData(hcOptions, chartData, chartProps, false);
    } else {
    hc_addBarChartOptions(hcOptions, chartProps, chartData, hc_getHighChartsType(chartType), false);
    curSeries =  hc_createSingleSeriesData(hcOptions, chartData, chartProps, false);
    hcOptions.series.push(curSeries);
    }
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    } else if (isLineType(chartType) || chartType == 'availability') {
    if (chartType == 'availability')
    hc_addAvailChartOptions(hcOptions, chartProps, chartData, false);
    else
    hc_addLineChartOptions(hcOptions, chartProps, chartData, false,chartType);
    hcOptions.series = hc_createLineSeriesData(hcOptions, chartData, chartProps, false);
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, false);
    }  else if(chartType == 'map'){
    hc_addMapChartOptions(hcOptions,chartProps,false, chartData);
    var curSeries =  hc_createMapSeriesData(hcOptions, chartData, chartProps, true);
    hcOptions.series = curSeries;
    hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, true);
    hc_updateDataLabelOptionsGeographical(hcOptions, chartData, chartType);
    hc_updateMapVisualizationOptions(hcOptions, chartData, chartProps);
    }
    hc_configureChartProportions(chartType, chartData, hcOptions,  false,  false);
    return hcOptions;
    }
    function hc_updateMapVisualizationOptions(hcOptions, chartData, chartProps) {
    var chartSerieProps;
    if (chartData.report_properties_series == undefined)
    chartSerieProps = chartProps;
    else
    chartSerieProps = chartData.report_properties_series[0];
    var mapVisualizationProperties = {}
    if ('report_drilldown' in chartSerieProps)
    mapVisualizationProperties.report_drilldown = chartSerieProps.report_drilldown;
    if ('report_id' in chartSerieProps)
    mapVisualizationProperties.report_id = chartSerieProps.report_id;
    if ('report_drilldown_zoom' in chartSerieProps)
    mapVisualizationProperties.report_drilldown_zoom = chartSerieProps.report_drilldown_zoom;
    if ('report_drilldown_map' in chartSerieProps)
    mapVisualizationProperties.report_drilldown_map = chartSerieProps.report_drilldown_map;
    if ('sysparm_full_query' in chartSerieProps)
    mapVisualizationProperties.full_query = chartSerieProps.sysparm_full_query;
    mapVisualizationProperties.show_data_label = chartSerieProps.show_chart_data_label;
    mapVisualizationProperties.show_geographical_label = chartSerieProps.show_geographical_label;
    hcOptions.mapVisualization = mapVisualizationProperties;
    }
    function isLineType(type) {
    return (type == 'line' || type == 'area' || type == 'spline' || type == 'line_bar' || type == 'step_line');
    }
    function hc_getHighChartsType(snType,lineType) {
    if (snType == 'bar' || snType == 'trend')
    return 'column';
    else if (snType == 'horizontal_bar')
    return 'bar';
    else if (snType == 'pie')
    return 'pie';
    else if (snType == 'semi_donut')
    return 'pie';
    else if (snType == 'donut')
    return 'pie';
    else if (snType == 'funnel')
    return 'funnel';
    else if (snType == 'pyramid')
    return 'funnel';
    else if (snType == 'box')
    return 'boxplot';
    else if (snType == 'spline')
    return 'spline';
    else if (snType == 'area')
    return 'area';
    else if (snType == 'line_bar')
    return 'column';
    else if (snType == 'line' || snType == 'step_line')
    return 'line';
    else if(snType == 'heatmap')
    return 'heatmap';
    else if (snType == 'angular_gauge')
    return 'gauge';
    else if (snType == 'solid_gauge')
    return 'solidgauge'
    else if (snType == 'bubble')
    return 'bubble'
    else if (snType == 'map')
    return 'map'
    else
    return '';
    }
    function hc_setupChartProperties(hcOptions, chartData, chartType, chartSize, isGauge, isPub, aggType, stackedField) {
    var chartProps = {};
    chartProps.defaultFontFamily = 'Arial';
    chartProps.fontSize = '10pt';
    chartProps.otherDisplay = 'Other';
    chartProps.otherDisplayMore = '(more...)';
    chartProps.report_properties = {};
    if ('report_properties' in chartData) {
    chartProps.report_properties = chartData.report_properties;
    if( 'font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    chartProps.defaultFontFamily = chartProps.report_properties.font_family;
    if( 'font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    chartProps.fontSize = chartProps.report_properties.font_size;
    chartProps.otherDisplay = chartProps.report_properties.other_display;
    chartProps.otherDisplayMore = chartProps.report_properties.other_display_more;
    }
    chartProps.isGauge = isGauge;
    chartProps.isPub = isPub;
    chartProps.origXValues = [];
    chartProps.xValues = [];
    chartProps.maxAllowedLabelLen = 20;
    chartProps.grayColor = '#666666';
    chartProps.blackColor = '#000';
    chartProps.aggType = aggType;
    chartProps.stackedField = stackedField;
    chartProps.otherKey = 'zzyynomatchaabb';
    chartProps.chartType = chartType;
    chartProps.chartSize = chartSize;
    chartProps.titleMargin = 50;
    return chartProps;
    }
    function hc_sanitizeXValues(chartData, chartProps) {
    if (!chartData.series || !chartData.series[0].xvalues)
    return;
    chartProps.origXValues = chartData.series[0].xvalues;
    if('truncate_x_axis_labels' in chartProps.report_properties &amp;&amp; chartProps.report_properties.truncate_x_axis_labels) {
    var removeLeading = false;
    if ('xaxis_labels_remove_leading' in chartProps.report_properties &amp;&amp; chartProps.report_properties.xaxis_labels_remove_leading)
    removeLeading = true;
    for (var i = 0; i &lt; chartProps.origXValues.length; i++) {
    if (chartProps.origXValues[i].length &gt; chartProps.maxAllowedLabelLen) {
    if (removeLeading)
    chartProps.xValues.push('...' + chartProps.origXValues[i].substring(chartProps.origXValues[i].length - chartProps.maxAllowedLabelLen + 3));
    else
    chartProps.xValues.push(chartProps.origXValues[i].substring(0, chartProps.maxAllowedLabelLen - 3) + '...');
    } else
    chartProps.xValues.push(chartProps.origXValues[i]);
    }
    } else {
    for (var i = 0; i &lt; chartProps.origXValues.length; i++)
    chartProps.xValues.push(chartProps.origXValues[i]);
    }
    var indx = hc_isPresentInArray(chartProps.origXValues, chartProps.otherKey);
    if (indx &gt;= 0) {
    var indx2 = hc_isPresentInArray(chartProps.origXValues, chartProps.otherDisplay);
    if (indx2 &gt;= 0)
    chartProps.xValues[indx] = chartProps.otherDisplay + ' ' + chartProps.otherDisplayMore;
    else
    chartProps.xValues[indx] = chartProps.otherDisplay;
    }
    }
    function hc_sanitizeCategoryValues(hcOptions, chartProps) {
    if (hcOptions.xAxis.categories)
    hcOptions.xAxis.categories = hc_sanitizeAxisCategoriesValues(hcOptions.xAxis.categories,chartProps);
    if (hcOptions.yAxis[0].categories)
    hcOptions.yAxis[0].categories=  hc_sanitizeAxisCategoriesValues(hcOptions.yAxis[0].categories,chartProps);
    }
    function hc_sanitizeAxisCategoriesValues(categories, chartProps){
    if (!categories)
    return;
    var newValues = [];
    var origValues = categories;
    if('truncate_x_axis_labels' in chartProps.report_properties &amp;&amp; chartProps.report_properties.truncate_x_axis_labels) {
    var removeLeading = false;
    if ('xaxis_labels_remove_leading' in chartProps.report_properties &amp;&amp; chartProps.report_properties.xaxis_labels_remove_leading)
    removeLeading = true;
    for (var i = 0; i &lt; origValues.length; i++) {
    if (origValues[i].length &gt; chartProps.maxAllowedLabelLen) {
    if (removeLeading)
    newValues.push('...' + origValues[i].substring(origValues[i].length - chartProps.maxAllowedLabelLen + 3));
    else
    newValues.push(origValues[i].substring(0, chartProps.maxAllowedLabelLen - 3) + '...');
    } else
    newValues.push(origValues[i]);
    }
    } else {
    for (var i = 0; i &lt; origValues.length; i++)
    newValues.push(origValues[i]);
    }
    var indx = hc_isPresentInArray(origValues, chartProps.otherKey);
    if (indx &gt;= 0)
    {
    var indx2 = hc_isPresentInArray(origValues, chartProps.otherDisplay);
    if (indx2 &gt;= 0)
    newValues[indx] = chartProps.otherDisplay + ' ' + chartProps.otherDisplayMore;
    else
    newValues[indx] = chartProps.otherDisplay;
    }
    return newValues;
    }
    function hc_initDefaultChartOptions(hcOptions, chartData, chartType, chartSize, isGauge, isPub, containerId, aggType, stackedField, isUI, chartHeight, chartWidth, isRtl) {
    hcOptions.chart = {};
    if (containerId != '') {
    hcOptions.chart.renderTo = containerId;
    }
    if (!isUI) {
    hcOptions.chart.height = chartHeight;
    hcOptions.chart.width = chartWidth;
    } else {
    var isCustomChartSize = chartData.report_properties &amp;&amp; chartData.report_properties.custom_chart_size;
    hc_setHeightWidthChart(hcOptions, chartData, chartSize, isGauge, containerId, isCustomChartSize, chartHeight, chartWidth);
    }
    hcOptions.lang = hcOptions.lang || {};
    hcOptions.lang.noData = chartData.noDataToDisplayMsg;
    hc_setI18nTranslations(hcOptions, chartData.report_properties.translation);
    hcOptions.credits = {};
    hcOptions.credits.enabled = false;
    hcOptions.legend = {};
    var isMultiSeries = chartData.series.length &gt; 1;
    if (!isMultiSeries &amp;&amp; (chartType == 'bar' || chartType == 'horizontal_bar') &amp;&amp; (stackedField === '') || chartType === 'angular_gauge'
    || chartType === 'solid_gauge' || chartType === 'box' || chartType === 'tbox' || chartType === 'hist' || chartType ==='pareto')
    hcOptions.legend.enabled = false;
    else
    hcOptions.legend.enabled = chartData.report_properties.show_legend;
    hcOptions.legend.verticalAlign = chartData.report_properties.legend_vertical_alignment;
    hcOptions.legend.align = chartData.report_properties.legend_horizontal_alignment;
    if (hcOptions.legend.align === 'left' || hcOptions.legend.align === 'right'){
    hcOptions.legend.layout = 'vertical';
    }
    hcOptions.legend.itemStyle = {};
    hcOptions.legend.itemStyle.fontFamily = 'Arial';
    hcOptions.legend.backgroundColor = chartData.report_properties.legend_background_color_value;
    if(chartData.report_properties.show_legend_border === true){
    hcOptions.legend.borderWidth = chartData.report_properties.legend_border_width;
    hcOptions.legend.borderRadius = chartData.report_properties.legend_border_radius;
    hcOptions.legend.borderColor = chartData.report_properties.legend_border_color_value;
    }
    hcOptions.tooltip = {};
    hcOptions.tooltip.style = {};
    hcOptions.tooltip.style.fontFamily = 'Arial';
    hcOptions.tooltip.style.fontSize = '10pt';
    if (isRtl) {
    hcOptions.tooltip.useHTML = true;
    hcOptions.legend.useHTML = true;
    }
    hcOptions.title = {};
    if (!chartData.report_properties.custom_chart_title_position) {
    if (chartData.report_properties.title_vertical_alignment !== 'top')
    hcOptions.title.verticalAlign = chartData.report_properties.title_vertical_alignment;
    if (hcOptions.title.verticalAlign === 'bottom')
    hcOptions.title.y = 0;
    hcOptions.title.align = chartData.report_properties.title_horizontal_alignment;
    if (hcOptions.title.align === 'right' &amp;&amp; chartData.report_properties.title_vertical_alignment === 'top')
    hcOptions.title.x = -40;
    } else {
    hcOptions.title.x = chartData.report_properties.chart_title_x_position;
    hcOptions.title.y = chartData.report_properties.chart_title_y_position;
    }
    hcOptions.title.style = {};
    hcOptions.title.style.color = chartData.report_properties.chart_title_color_value;
    hcOptions.title.style.fontFamily = 'Arial';
    hcOptions.title.style.fontSize = chartData.report_properties.chart_title_size + 'px';
    if ('report_properties' in chartData) {
    if ('font_family' in chartData.report_properties &amp;&amp; chartData.report_properties.font_family != '') {
    hcOptions.legend.itemStyle.fontFamily = chartData.report_properties.font_family;
    hcOptions.title.style.fontFamily = chartData.report_properties.font_family;
    hcOptions.tooltip.style.fontFamily = chartData.report_properties.font_family;
    }
    if( 'font_size' in chartData.report_properties &amp;&amp; chartData.report_properties.font_size != '') {
    hcOptions.tooltip.style.fontSize = chartData.report_properties.font_size;
    }
    }
    hcOptions.chart.backgroundColor = chartData.report_properties.chart_background_color_value;
    if(chartData.report_properties.show_chart_border === true){
    hcOptions.chart.borderWidth = chartData.report_properties.chart_border_width;
    hcOptions.chart.borderRadius = chartData.report_properties.chart_border_radius;
    hcOptions.chart.borderColor = chartData.report_properties.chart_border_color_value;
    }
    hcOptions.chart.style = {};
    hcOptions.chart.style.margin = "0 auto";
    if (chartData.report_properties.show_chart_title === 'always' || (!isGauge &amp;&amp; chartData.report_properties.show_chart_title === 'report')) {
    var title = chartData.title;
    if (chartData.report_properties.chart_title)
    title = chartData.report_properties.chart_title;
    if (isUI)
    title = title ? escapeHTML(title) : '';
    hcOptions.title.text = title;
    } else {
    hcOptions.title = {};
    hcOptions.title.text = '';
    }
    hcOptions.series = [];
    return hc_setupChartProperties(hcOptions, chartData, chartType, chartSize, isGauge, isPub, aggType, stackedField);
    }
    function escapeHTML(html){
    if (html)
    return html.replace(/&amp;/g,"&amp;amp;").replace(/&lt;/g,"&amp;lt;").replace(/&gt;/g,"&amp;gt;");
    return html;
    }
    function hc_setHeightWidthChart( hcOptions, chartData, chartSize, isGauge, containerId, customChartSize, chartHeight, chartWidth) {
    var containerDimensions = {};
    var ie_dynamic_sizing;
    if (typeof chartData !== 'undefined' &amp;&amp; chartData.report_properties)
    ie_dynamic_sizing = chartData.report_properties.ie_dynamic_sizing;
    if ((window.SNC &amp;&amp; window.SNC.canvas) || !isGauge || !(window.isMSIE || window.isMSIE11) || ie_dynamic_sizing)
    containerDimensions = hc_getDimensions(containerId);
    if (containerDimensions.height &amp;&amp; containerDimensions.height &gt; 50)
    hcOptions.chart.height = containerDimensions.height;
    else if(chartHeight != undefined &amp;&amp; chartHeight != '' &amp;&amp; customChartSize)
    hcOptions.chart.height = chartHeight;
    else {
    hcOptions.chart.height = '375';
    if(chartSize == 'large')
    hcOptions.chart.height = '550';
    else if(chartSize == 'medium')
    hcOptions.chart.height = '450';
    }
    if (containerDimensions.width)
    hcOptions.chart.width = containerDimensions.width;
    else if(chartWidth != undefined &amp;&amp; chartWidth != '' &amp;&amp; customChartSize)
    hcOptions.chart.width = chartWidth;
    else {
    hcOptions.chart.width = '450';
    if(chartSize == 'large')
    hcOptions.chart.width = '750';
    else if(chartSize == 'medium')
    hcOptions.chart.width = '600';
    }
    }
    function hc_setI18nTranslations(hcOptions, i18n) {
    var lang = hcOptions.lang;
    lang.months= [i18n.month.january, i18n.month.february,i18n.month.march, i18n.month.april, i18n.month.may, i18n.month.june, i18n.month.july, i18n.month.august, i18n.month.september, i18n.month.october, i18n.month.november, i18n.month.december];
    lang.weekdays= [i18n.weekdays.sunday, i18n.weekdays.monday, i18n.weekdays.tuesday, i18n.weekdays.wednesday, i18n.weekdays.thursday, i18n.weekdays.friday, i18n.weekdays.saturday];
    lang.shortMonths= [i18n.month.shortName.january, i18n.month.shortName.february, i18n.month.shortName.march, i18n.month.shortName.april, i18n.month.shortName.may, i18n.month.shortName.june, i18n.month.shortName.july, i18n.month.shortName.august, i18n.month.shortName.september, i18n.month.shortName.october, i18n.month.shortName.november, i18n.month.shortName.december];
    lang.exportButtonTitle= i18n.exportButtonTitle;
    lang.printButtonTitle= i18n.printButtonTitle;
    lang.rangeSelectorFrom= i18n.rangeSelectorFrom;
    lang.rangeSelectorTo= i18n.rangeSelectorTo;
    lang.rangeSelectorZoom= i18n.rangeSelectorZoom;
    lang.downloadPNG= i18n.downloadPNG;
    lang.downloadJPEG= i18n.downloadJPEG;
    lang.downloadPDF= i18n.downloadPDF;
    lang.downloadSVG= i18n.downloadSVG;
    lang.printChart= i18n.printChart;
    lang.resetZoom= i18n.resetZoom;
    lang.resetZoomTitle= i18n.resetZoomTitle;
    lang.thousandsSep= i18n.thousandsSep;
    lang.decimalPoint= i18n.decimalPoint;
    lang.contextButtonTitle = i18n.contextButtonTitle;
    lang.days = i18n.days;
    lang.hours = i18n.hours;
    lang.minutes = i18n.minutes;
    lang.seconds = i18n.seconds;
    }
    function hc_getDimensions(containerId, isResize) {
    var containerHeight, containerWidth;
    var mustSubtractChildren = false;
    var isInCanvas = window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive;
    var $container = jQuery("#" + containerId);
    var $parent = isInCanvas &amp;&amp; containerId.indexOf("preview") == -1 ? $container.closest('.grid-widget-content') : $container.parent().parent();
    if ($parent.is("rendered_body"))
    $parent = $parent.parent();
    if (!isResize &amp;&amp; $container.height() &gt; 25)
    containerHeight = $container.height();
    else {
    containerHeight = $parent.height();
    mustSubtractChildren = true;
    }
    if (!isResize &amp;&amp; $container.width() !== 0)
    containerWidth = $container.width();
    else {
    containerWidth = $parent.width();
    }
    if (mustSubtractChildren) {
    if (window.g_accessibility === "true" || window.g_accessibility === true)
    containerHeight -= 22;
    var children = $container.siblings();
    for (var i = 0; i &lt; children.length; i++) {
    if (children[i].className.indexOf('gauge-size-handle') &gt; -1 || children[i].className.indexOf('timingDiv') &gt; -1)
    containerHeight -= children[i].offsetHeight;
    }
    }
    return {height: containerHeight, width: containerWidth};
    }
    function hc_saveChart(inputType, outputType, inputData) {
    var ONE_MB = 1048576;
    if (inputData.length &gt; ONE_MB) {
    var errDlg = new GlideDialogWindow('glide_alert_standard');
    errDlg.setTitle(new GwtMessage().getMessage('Error'));
    errDlg.setPreference('warning', true);
    errDlg.setPreference('title', new GwtMessage().getMessage('Chart data too large to be saved'));
    errDlg.setPreference('invokePromptCallBack', function () {
    this.destroy();
    });
    errDlg.render();
    return;
    }
    var dialog = new GwtPollDialog(inputType, inputData, 0, '',  outputType);
    dialog.execute();
    }
    function hc_addHeatmapChartOptions(hcOptions, chartProps, isUI, chartData,curSeries){
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.heatmap = {};
    hcOptions.plotOptions.heatmap.cursor = 'pointer';
    if(chartData.report_properties.use_color_heatmap === true){
    hcOptions.colorAxis = {};
    hcOptions.colorAxis.min = chartData.series[0].min_value;
    hcOptions.colorAxis.max = chartData.series[0].max_value;
    hcOptions.colorAxis.minColor = chartData.report_properties.axis_min_color;
    hcOptions.colorAxis.maxColor = chartData.report_properties.axis_max_color;
    }
    else{
    hcOptions.legend.enabled = false;
    }
    if(isUI){
    hcOptions.tooltip.formatter= hc_formatHeatmapTooltip;
    hcOptions.plotOptions.heatmap.point = {};
    hcOptions.plotOptions.heatmap.point.events = {};
    hcOptions.plotOptions.heatmap.point.events.click = hc_dataPointClicked;
    }
    }
    function hc_addMapChartOptions(hcOptions, chartProps, isUI, chartData){
    hcOptions.mapNavigation = {};
    hcOptions.mapNavigation.enabled = true;
    hcOptions.mapNavigation.enableMouseWheelZoom = false;
    hcOptions.plotOptions = {};
    var useLatLon = chartData.report_properties_series[0].map_source.use_lat_lon;
    if (!useLatLon &amp;&amp; chartData.report_properties.use_color_heatmap === true) {
    hcOptions.colorAxis = {};
    hcOptions.colorAxis.min = parseInt(chartData.series[0].ymin);
    hcOptions.colorAxis.max = parseInt(chartData.series[0].ymax);
    hcOptions.colorAxis.minColor = chartData.report_properties.axis_min_color;
    hcOptions.colorAxis.maxColor = chartData.report_properties.axis_max_color;
    } else
    hcOptions.legend.enabled = false;
    if (isUI) {
    hcOptions.title.align = chartData.report_properties.title_horizontal_alignment;
    if (hcOptions.title.align === 'right' &amp;&amp; chartData.report_properties.title_vertical_alignment === 'top')
    hcOptions.title.x = -80;
    var hasLegend = hcOptions.legend.enabled;
    var legendHorizontalAlign = chartData.report_properties.legend_horizontal_alignment;
    if (hasLegend) {
    if (legendHorizontalAlign === "left") {
    if (!hcOptions.mapNavigation.buttonOptions)
    hcOptions.mapNavigation.buttonOptions = {};
    hcOptions.mapNavigation.buttonOptions.x = 70;
    hcOptions.mapNavigation.buttonOptions.y = -30;
    }
    }
    hcOptions.tooltip.formatter = hc_formatMapTooltip;
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.point = {};
    hcOptions.plotOptions.series.point.events = {};
    hcOptions.plotOptions.series.point.events.click = hc_dataPointClicked;
    hcOptions.plotOptions.series.point.dataLabels = {};
    hcOptions.plotOptions.series.point.dataLabels.allowOverlap = true;
    hcOptions.plotOptions.series.animation = false;
    }
    }
    function drillDownButton(event, exactPoint) {
    if (this.series.length &gt; 0 &amp;&amp; this.series[0].data.length &gt; 0){
    var point = this.series[0].data[0];
    var reportDrilldown = point.report_drilldown;
    var element = event.srcElement;
    if (!element)
    element = event.target;
    var content = jQuery(element).closest(".report_content");
    if (reportDrilldown) {
    var mapParams = '&amp;sysparm_report_map_exact_points='+exactPoint;
    var actualMap = point.report_drilldown_map;
    if (actualMap)
    mapParams += "&amp;sysparm_report_map_parent=" + actualMap;
    drillReport(content.parent(), reportDrilldown, '', mapParams);
    }
    }
    return;
    }
    function hc_addBubbleChartOptions(hcOptions, isUI,isLegendEnabled){
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.bubble = {};
    hcOptions.plotOptions.bubble.cursor = 'pointer';
    hcOptions.plotOptions.bubble.minSize = 8;
    hcOptions.plotOptions.bubble.maxSize = 70;
    if(isLegendEnabled == false)
    hcOptions.legend.enabled = false;
    if(isUI){
    hcOptions.tooltip.formatter= hc_formatHeatmapTooltip;
    hcOptions.plotOptions.bubble.point = {};
    hcOptions.plotOptions.bubble.point.events = {};
    hcOptions.plotOptions.bubble.point.events.click = hc_dataPointClicked;
    }
    }
    function hc_addPieChartOptions(hcOptions, chartProps, isUI, isSemiDonut, isPublisher) {
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.pie = {};
    if (isPublisher)
    hcOptions.plotOptions.pie.allowPointSelect = true,
    hcOptions.plotOptions.pie.cursor = 'pointer';
    hcOptions.plotOptions.pie.size = '90%';
    if (isSemiDonut) {
    hcOptions.plotOptions.pie.startAngle = -90;
    hcOptions.plotOptions.pie.endAngle = 90;
    hcOptions.plotOptions.pie.center = ["50%", "75%"];
    }
    hcOptions.plotOptions.pie.showInLegend = true;
    hc_setLegendLabelFormatter(hcOptions, isUI, true);
    if (isUI) {
    hcOptions.tooltip.formatter= hc_formatPie;
    hcOptions.plotOptions.pie.point = {};
    hcOptions.plotOptions.pie.point.events = {};
    if (isPublisher) {
    hcOptions.plotOptions.pie.point.events.select = hc_dataPointSelected;
    hcOptions.plotOptions.pie.point.events.unselect = hc_dataPointUnselected;
    hcOptions.plotOptions.pie.point.events.legendItemClick = hc_dataPointLegendClick;
    } else
    hcOptions.plotOptions.pie.point.events.click = hc_dataPointClicked;
    }
    }
    function hc_addFunnelChartOptions(hcOptions, chartProps, isUI,chartData, isPublisher) {
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.funnel = {};
    if (isPublisher)
    hcOptions.plotOptions.funnel.allowPointSelect = true
    hcOptions.plotOptions.funnel.cursor = 'pointer';
    hcOptions.plotOptions.funnel.size = '90%';
    hcOptions.plotOptions.funnel.showInLegend = true;
    hc_setLegendLabelFormatter(hcOptions, isUI, true);
    if (isUI) {
    hcOptions.tooltip.formatter= hc_formatPie;
    hcOptions.plotOptions.funnel.point = {};
    hcOptions.plotOptions.funnel.point.events = {};
    if (isPublisher) {
    hcOptions.plotOptions.funnel.point.events.select = hc_dataPointSelected;
    hcOptions.plotOptions.funnel.point.events.unselect = hc_dataPointUnselected;
    hcOptions.plotOptions.funnel.point.events.legendItemClick = hc_dataPointLegendClick;
    } else
    hcOptions.plotOptions.funnel.point.events.click = hc_dataPointClicked;
    }
    hcOptions.plotOptions.series = {};
    if (chartProps.report_properties.funnel_neck_percent)
    hcOptions.plotOptions.series.neckHeight = chartProps.report_properties.funnel_neck_percent + "%";
    }
    function hc_addPyramidChartOptions(hcOptions, chartProps, isUI,chartData, isPublisher) {
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.funnel = {};
    if (isPublisher)
    hcOptions.plotOptions.funnel.allowPointSelect = true;
    hcOptions.plotOptions.funnel.cursor = 'pointer';
    hcOptions.plotOptions.funnel.size = '90%';
    hcOptions.plotOptions.funnel.showInLegend = true;
    hc_setLegendLabelFormatter(hcOptions, isUI, true);
    if (isUI) {
    hcOptions.tooltip.formatter= hc_formatPie;
    hcOptions.plotOptions.funnel.point = {};
    hcOptions.plotOptions.funnel.point.events = {};
    if (isPublisher) {
    hcOptions.plotOptions.funnel.point.events.select = hc_dataPointSelected;
    hcOptions.plotOptions.funnel.point.events.unselect = hc_dataPointUnselected;
    hcOptions.plotOptions.funnel.point.events.legendItemClick = hc_dataPointLegendClick;
    } else
    hcOptions.plotOptions.funnel.point.events.click = hc_dataPointClicked;
    }
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.neckHeight = "0%";
    hcOptions.plotOptions.series.neckWidth = "0%";
    hcOptions.plotOptions.funnel.reversed = true;
    }
    function hc_addGaugeChartOptions(hcOptions, chartProps, chartData, chartType, isUI) {
    hcOptions.chart.type = chartType;
    hcOptions.pane = {};
    var yAxis = {};
    hcOptions.plotOptions = {};
    var value = parseFloat(chartData.series[0].yvalues[0]);
    var min = 0;
    var max = 0;
    if (!chartProps.report_properties.gauge_autoscale &amp;&amp; chartProps.report_properties.from)
    min = parseInt(chartProps.report_properties.from);
    else if (value &lt; 0)
    min = value * 1.5;
    if (!chartProps.report_properties.gauge_autoscale &amp;&amp; chartProps.report_properties.to)
    max = parseInt(chartProps.report_properties.to);
    else if (value == 0)
    max = 10;
    else if (value &gt; 0)
    max = value * 1.5;
    var lower = null;
    var upper = null;
    if (chartProps.report_properties.lower_limit || chartProps.report_properties.lower_limit === 0 || chartProps.report_properties.lower_limit === '0')
    lower = parseInt(chartProps.report_properties.lower_limit);
    if (chartProps.report_properties.upper_limit || chartProps.report_properties.upper_limit === 0 || chartProps.report_properties.upper_limit === '0')
    upper = parseInt(chartProps.report_properties.upper_limit);
    if (lower !== null &amp;&amp; upper !== null) {
    if (lower &lt; min &amp;&amp; lower &lt;= 0)
    min = lower * 1.5;
    if (upper &gt; max &amp;&amp; upper &gt;= 0)
    max = upper * 1.5;
    var total = max - min;
    var middleColor = '#ffca1f';
    var topColor;
    var bottomColor;
    if (chartProps.report_properties.direction == 'maximize') {
    topColor = '#4bd762';
    bottomColor = '#ff402c';
    } else {
    topColor = '#ff402c';
    bottomColor = '#4bd762';
    }
    if (chartType == 'solidgauge') {
    yAxis.stops = [];
    if (chartProps.report_properties.direction == 'maximize') {
    yAxis.stops.push([(lower - min) / total, bottomColor]);
    yAxis.stops.push([(upper - min) / total, middleColor]);
    yAxis.stops.push([1, topColor]);
    } else {
    yAxis.stops.push([0, bottomColor]);
    yAxis.stops.push([(lower - min) / total, middleColor]);
    yAxis.stops.push([(upper - min) / total, topColor]);
    }
    } else {
    yAxis.plotBands = [];
    yAxis.plotBands.push({from : min, to : lower, color: bottomColor});
    yAxis.plotBands.push({from : lower, to : upper, color: middleColor});
    yAxis.plotBands.push({from : upper, to : max, color: topColor});
    }
    }else{
    if (chartType == 'solidgauge') {
    yAxis.stops = [];
    color = chartData.series[0].colors[0];
    yAxis.stops.push([0, color]);
    yAxis.stops.push([1, color]);
    }
    }
    yAxis.min = min;
    yAxis.max = max;
    if (chartType == "solidgauge") {
    hcOptions.pane.size = "100%";
    hcOptions.pane.center = ['50%', '50%'];
    hcOptions.pane.startAngle = -90;
    hcOptions.pane.endAngle = 90;
    hcOptions.pane.background = {};
    hcOptions.pane.background.innerRadius = "60%";
    hcOptions.pane.background.outerRadius = "100%";
    hcOptions.pane.background.shape = "arc";
    hcOptions.pane.background.backgroundColor = "#EEE";
    hcOptions.tooltip = {};
    hcOptions.tooltip.enabled = false;
    yAxis.tickWidth = 0;
    yAxis.lineWidth = 0;
    yAxis.minorTickInterval = null;
    yAxis.tickPositions = [min, max];
    yAxis.labels = {};
    yAxis.labels.y = 14;
    if (!hcOptions.plotOptions.solidgauge)
    hcOptions.plotOptions.solidgauge = {};
    hcOptions.plotOptions.solidgauge.point = {};
    hcOptions.plotOptions.solidgauge.point.events = {};
    hcOptions.plotOptions.solidgauge.point.events.click = hc_dataPointClicked;
    } else {
    hcOptions.chart.plotBackgroundColor = '#ffffff';
    hcOptions.chart.plotBackgroundImage = null;
    hcOptions.chart.plotBorderWidth = 0;
    hcOptions.chart.plotShadow = false;
    hcOptions.pane.startAngle = -150;
    hcOptions.pane.endAngle = 150;
    if (!hcOptions.plotOptions.gauge)
    hcOptions.plotOptions.gauge = {};
    hcOptions.plotOptions.gauge.point = {};
    hcOptions.plotOptions.gauge.point.events = {};
    hcOptions.plotOptions.gauge.point.events.click = hc_dataPointClicked;
    hcOptions.plotOptions.gauge.wrap = false;
    hcOptions.pane.background = [];
    hcOptions.pane.background.push({backgroundColor: '#ffffff', borderWidth: 0, outerRadius: '109%'});
    hcOptions.pane.background.push({backgroundColor: '#ffffff', borderWidth: 0, outerRadius: '107%'});
    hcOptions.pane.background.push({backgroundColor: '#ffffff'});
    hcOptions.pane.background.push({backgroundColor: '#ffffff', borderWidth: 0, outerRadius: '105%', innerRadius: '103%'});
    yAxis.minorTickWidth = 1;
    yAxis.minorTickLength = 10;
    yAxis.minorTickPosition = 'inside';
    yAxis.tickPixelInterval = 30;
    yAxis.tickWidth = 2;
    yAxis.tickPosition = 'inside';
    yAxis.tickLength = 10;
    yAxis.labels = {};
    yAxis.labels.step = 2;
    yAxis.labels.rotation = 'auto';
    if (lower !== null &amp;&amp; upper !== null) {
    yAxis.minorTickColor = '#ffffff';
    yAxis.tickColor = '#ffffff';
    } else {
    yAxis.minorTickColor = '#828890';
    yAxis.tickColor = '#828890';
    }
    }
    hcOptions.yAxis = [];
    hcOptions.yAxis.push(yAxis);
    }
    function hc_addBarChartOptions(hcOptions, chartProps, chartData, barType, isUI) {
    hc_addCommonBarChartOptions(hcOptions, chartProps, chartData, barType, isUI);
    hcOptions.plotOptions.series.minPointLength = 2;
    if (chartData.series.length === 1)
    hc_addYAxisMax(chartProps, hcOptions, chartData, chartProps.chartType);
    if (isUI)
    hcOptions.tooltip.formatter = hc_formatToolTip;
    }
    function hc_updateDataLabelOptionsGeographical(hcOptions, chartData, chartType) {
    if ('map' === chartType){
    if (hcOptions.series[0].dataLabels == null)
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.enabled = true;
    hcOptions.series[0].dataLabels.color = '#000';
    hcOptions.series[0].dataLabels.show_geographical_label = chartData.report_properties_series[0].show_geographical_label;;
    hcOptions.series[0].dataLabels.show_data_label =  chartData.report_properties_series[0].show_chart_data_label;
    hcOptions.series[0].dataLabels.formatter = hc_formatMapDataLabels;
    }
    }
    function hc_addDataLabelOptions(hcOptions, chartProps, chartData, chartType, isUI) {
    var dataLabelColor = '#606060';
    if (chartData.report_properties_series != undefined &amp;&amp; chartData.report_properties_series[0].show_chart_data_label === true){
    if ('pie' === chartType){
    if(hcOptions.plotOptions.pie==null)
    hcOptions.plotOptions.pie = {};
    hcOptions.plotOptions.pie.dataLabels = {};
    hcOptions.plotOptions.pie.dataLabels.enabled = true;
    hcOptions.plotOptions.pie.dataLabels.softConnector = false;
    hcOptions.plotOptions.pie.dataLabels.distance = 15;
    hcOptions.plotOptions.pie.dataLabels.style = {};
    hcOptions.plotOptions.pie.dataLabels.style.fontFamily = 'Arial';
    hcOptions.plotOptions.pie.dataLabels.style.fontSize = '10pt';
    hcOptions.plotOptions.pie.dataLabels.style.color = dataLabelColor;
    hcOptions.plotOptions.pie.dataLabels.style.fill = dataLabelColor;
    hcOptions.plotOptions.pie.dataLabels.style.fontWeight = 'normal';
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.plotOptions.pie.dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.plotOptions.pie.dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.plotOptions.pie.dataLabels.formatter =  hc_formatNameValueLabel;
    else
    hcOptions.plotOptions.pie.dataLabels.formatter =  'hc_formatNameValueLabel';
    } else if ('semi_donut' === chartType || 'donut' === chartType){
    if(hcOptions.plotOptions.pie==null)
    hcOptions.plotOptions.pie = {};
    hcOptions.plotOptions.pie.dataLabels = {};
    hcOptions.plotOptions.pie.dataLabels.enabled = true;
    hcOptions.plotOptions.pie.dataLabels.softConnector = false;
    hcOptions.plotOptions.pie.dataLabels.distance = 15;
    hcOptions.plotOptions.pie.dataLabels.style = {};
    hcOptions.plotOptions.pie.dataLabels.style.fontFamily = 'Arial';
    hcOptions.plotOptions.pie.dataLabels.style.fontSize = '10pt';
    hcOptions.plotOptions.pie.dataLabels.style.color = dataLabelColor;
    hcOptions.plotOptions.pie.dataLabels.style.fill = dataLabelColor;
    hcOptions.plotOptions.pie.dataLabels.style.fontWeight = 'normal';
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.plotOptions.pie.dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.plotOptions.pie.dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.plotOptions.pie.dataLabels.formatter =  hc_formatNameValueLabel;
    else
    hcOptions.plotOptions.pie.dataLabels.formatter =  'hc_formatNameValueLabel';
    } else if('funnel' === chartType || 'pyramid' === chartType){
    hcOptions.plotOptions.funnel.dataLabels = {};
    hcOptions.plotOptions.funnel.dataLabels.enabled = true;
    hcOptions.plotOptions.funnel.dataLabels.softConnector = false;
    hcOptions.plotOptions.funnel.dataLabels.distance = 15;
    hcOptions.plotOptions.funnel.dataLabels.style = {};
    hcOptions.plotOptions.funnel.dataLabels.style.fontFamily = 'Arial';
    hcOptions.plotOptions.funnel.dataLabels.style.fontSize = '10pt';
    hcOptions.plotOptions.funnel.dataLabels.style.color = dataLabelColor;
    hcOptions.plotOptions.funnel.dataLabels.style.fill = dataLabelColor;
    hcOptions.plotOptions.funnel.dataLabels.style.fontWeight = 'normal';
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.plotOptions.funnel.dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.plotOptions.funnel.dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.plotOptions.funnel.dataLabels.formatter =  hc_formatNameValueLabel;
    else
    hcOptions.plotOptions.funnel.dataLabels.formatter =  'hc_formatNameValueLabel';
    } else if ('control' === chartType){
    if (hcOptions.plotOptions==null)
    hcOptions.plotOptions = {};
    if (hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.dataLabels = {};
    hcOptions.plotOptions.series.dataLabels.enabled = true;
    hcOptions.plotOptions.series.dataLabels.softConnector = false;
    hcOptions.plotOptions.series.dataLabels.distance = 15;
    hcOptions.plotOptions.series.dataLabels.style = {};
    hcOptions.plotOptions.series.dataLabels.style.fontFamily = 'Arial';
    hcOptions.plotOptions.series.dataLabels.style.fontSize = '10pt';
    hcOptions.plotOptions.series.dataLabels.style.color = dataLabelColor;
    hcOptions.plotOptions.series.dataLabels.style.fill = dataLabelColor;
    hcOptions.plotOptions.series.dataLabels.style.fontWeight = 'normal';
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.plotOptions.series.dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.plotOptions.series.dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.plotOptions.series.dataLabels.formatter =  hc_formatValueLabel;
    else
    hcOptions.plotOptions.series.dataLabels.formatter =  'hc_formatValueLabel';
    }else if ('bar' === chartType || 'horizontal_bar' === chartType){
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.dataLabels = {};
    hcOptions.plotOptions.series.dataLabels.enabled = true;
    hcOptions.plotOptions.series.dataLabels.softConnector = false;
    hcOptions.plotOptions.series.dataLabels.distance = 15;
    hcOptions.plotOptions.series.dataLabels.style = {};
    hcOptions.plotOptions.series.dataLabels.style.fontFamily = 'Arial';
    hcOptions.plotOptions.series.dataLabels.style.fontSize = '10pt';
    hcOptions.plotOptions.series.dataLabels.style.color = dataLabelColor;
    hcOptions.plotOptions.series.dataLabels.style.fill = dataLabelColor;
    hcOptions.plotOptions.series.dataLabels.style.fontWeight = 'normal';
    hc_setDataLabelPositionProperties(hcOptions, chartData);
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.plotOptions.series.dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.plotOptions.series.dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.plotOptions.series.dataLabels.formatter =  hc_formatValueLabel;
    else
    hcOptions.plotOptions.series.dataLabels.formatter =  'hc_formatValueLabel';
    } else if ('pareto' === chartType){
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[1].dataLabels = {};
    hcOptions.series[0].dataLabels.enabled = true;
    hcOptions.series[0].dataLabels.softConnector = false;
    hcOptions.series[0].dataLabels.distance = 15;
    hcOptions.series[0].dataLabels.style = {};
    hcOptions.series[0].dataLabels.style.fontFamily = 'Arial';
    hcOptions.series[0].dataLabels.style.fontSize = '10pt';
    hcOptions.series[0].dataLabels.style.color = dataLabelColor;
    hcOptions.series[0].dataLabels.style.fill = dataLabelColor;
    hcOptions.series[0].dataLabels.style.fontWeight = 'normal';
    hc_setDataLabelPositionProperties(hcOptions, chartData);
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.series[0].dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.series[0].dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.series[0].dataLabels.formatter =  hc_formatValueLabel;
    else
    hcOptions.series[0].dataLabels.formatter =  'hc_formatValueLabel';
    } else if ('trend' === chartType){
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    for (i=0; i&lt;hcOptions.series.length; i++){
    hcOptions.series[i].dataLabels = {};
    hcOptions.series[i].dataLabels.enabled = true;
    hcOptions.series[i].dataLabels.softConnector = false;
    hcOptions.series[i].dataLabels.distance = 15;
    hcOptions.series[i].dataLabels.inside = false;
    hcOptions.series[i].dataLabels.style = {};
    hcOptions.series[i].dataLabels.style.fontFamily = 'Arial';
    hcOptions.series[i].dataLabels.style.fontSize = '10pt';
    hcOptions.series[i].dataLabels.style.color = dataLabelColor;
    hcOptions.series[i].dataLabels.style.fill = dataLabelColor;
    hcOptions.series[i].dataLabels.style.fontWeight = 'normal';
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    hcOptions.series[i].dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    hcOptions.series[i].dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if(isUI)
    hcOptions.series[i].dataLabels.formatter =  hc_formatValueLabel;
    else
    hcOptions.series[i].dataLabels.formatter =  'hc_formatValueLabel';
    }
    hc_setDataLabelPositionProperties(hcOptions, chartData);
    } else if('gauge' === chartType) {
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.format = '&lt;div style="text-align:center"&gt;&lt;span style="font-family:Arial;font-size:25px;color:black"&gt;{point.displayvalue}&lt;/span&gt;&lt;br/&gt;';
    hcOptions.series[0].dataLabels.borderWidth = 0;
    hcOptions.series[0].dataLabels.enabled = true;
    } else if('angular_gauge' === chartType) {
    if (hcOptions.plotOptions.gauge==null)
    hcOptions.plotOptions.gauge = {};
    if (hcOptions.plotOptions.gauge.dataLabels==null)
    hcOptions.plotOptions.gauge.dataLabels = {};
    hcOptions.plotOptions.gauge.dataLabels.enabled = true;
    hcOptions.plotOptions.gauge.dataLabels.useHTML = true;
    hcOptions.plotOptions.gauge.dataLabels.borderWidth = 0;
    hcOptions.plotOptions.gauge.dataLabels.format = '&lt;div style="text-align:center"&gt;&lt;span style="font-family:Arial;font-size:25px;color:black"&gt;{point.displayvalue}&lt;/span&gt;&lt;br/&gt;';
    }  else if('solid_gauge' === chartType) {
    if (hcOptions.plotOptions.solidgauge==null)
    hcOptions.plotOptions.solidgauge = {};
    if (hcOptions.plotOptions.solidgauge.dataLabels==null)
    hcOptions.plotOptions.solidgauge.dataLabels = {};
    hcOptions.plotOptions.solidgauge.dataLabels.enabled = true;
    hcOptions.plotOptions.solidgauge.dataLabels.y = -35;
    hcOptions.plotOptions.solidgauge.dataLabels.useHTML = true;
    hcOptions.plotOptions.solidgauge.dataLabels.borderWidth = 0;
    hcOptions.plotOptions.solidgauge.dataLabels.format = '&lt;div style="text-align:center"&gt;&lt;span style="font-family:Arial;font-size:25px;color:black"&gt;{point.displayvalue}&lt;/span&gt;&lt;br/&gt;';
    } else if(isLineType(chartType)) {
    hcOptions.series.forEach(function(series) {
    series.dataLabels = series.dataLabels || {};
    series.dataLabels.enabled = series.dataLabels.enabled || false;
    series.dataLabels.softConnector = false;
    series.dataLabels.distance = 15;
    series.dataLabels.style = {};
    series.dataLabels.style.fontFamily = 'Arial';
    series.dataLabels.style.fontSize = '10pt';
    series.dataLabels.style.color = dataLabelColor;
    series.dataLabels.style.fill = dataLabelColor;
    series.dataLabels.style.fontWeight = 'normal';
    if ('font_family' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_family != '')
    series.dataLabels.style.fontFamily = chartProps.report_properties.font_family;
    if ('font_size' in chartProps.report_properties &amp;&amp; chartProps.report_properties.font_size != '')
    series.dataLabels.style.fontSize = chartProps.report_properties.font_size;
    if (chartType == 'line_bar')
    hc_setDataLabelPositionProperties(hcOptions, chartData);
    if(isUI)
    series.dataLabels.formatter =  hc_formatValueLabel;
    else
    series.dataLabels.formatter =  'hc_formatValueLabel';
    });
    } else if('heatmap' === chartType) {
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.format = '{point.value_display}';
    hcOptions.series[0].dataLabels.enabled = true;
    } else if('map' === chartType) {
    }
    } else {
    if ('pie' === chartType) {
    if(hcOptions.plotOptions.pie==null)
    hcOptions.plotOptions.pie = {};
    hcOptions.plotOptions.pie.dataLabels = {};
    hcOptions.plotOptions.pie.dataLabels.enabled = false;
    }else if('heatmap' === chartType) {
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.format = '{point.value}';
    hcOptions.series[0].dataLabels.enabled = false;
    hcOptions.series[0].dataLabels.color = 'black';
    hcOptions.series[0].dataLabels.style = {};
    hcOptions.series[0].dataLabels.style.textShadow = 'none';
    hcOptions.series[0].dataLabels.style.HcTextStroke = null;
    } else if ('semi_donut' === chartType || 'donut' === chartType){
    if(hcOptions.plotOptions.pie==null)
    hcOptions.plotOptions.pie = {};
    hcOptions.plotOptions.pie.dataLabels = {};
    hcOptions.plotOptions.pie.dataLabels.enabled = false;
    } else if ('funnel' === chartType  || 'pyramid'===chartType){
    if(hcOptions.plotOptions.funnel==null)
    hcOptions.plotOptions.funnel = {};
    hcOptions.plotOptions.funnel.dataLabels = {};
    hcOptions.plotOptions.funnel.dataLabels.enabled = false;
    } else if ('control' === chartType){
    if(hcOptions.plotOptions == null)
    hcOptions.plotOptions = {};
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.dataLabels = {};
    hcOptions.plotOptions.series.dataLabels.enabled = false;
    } else if ('bar' === chartType){
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.dataLabels = {};
    hcOptions.plotOptions.series.dataLabels.enabled = false;
    } else if ('pareto' === chartType){
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    hcOptions.plotOptions.series.dataLabels = {};
    hcOptions.plotOptions.series.dataLabels.enabled = false;
    } else if('column' === chartType){
    if(hcOptions.plotOptions.column==null)
    hcOptions.plotOptions.column = {};
    hcOptions.plotOptions.column.dataLabels = {};
    hcOptions.plotOptions.column.dataLabels.enabled = false;
    } else if('gauge' === chartType) {
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.format = '&lt;div style="text-align:center"&gt;&lt;span style="font-family:Arial;font-size:25px;color:black"&gt;{point.displayvalue}&lt;/span&gt;&lt;br/&gt;';
    hcOptions.series[0].dataLabels.borderWidth = 0;
    hcOptions.series[0].dataLabels.enabled = true;
    } else if('angular_gauge' === chartType) {
    if (hcOptions.plotOptions.gauge==null)
    hcOptions.plotOptions.gauge = {};
    if (hcOptions.plotOptions.gauge.dataLabels==null)
    hcOptions.plotOptions.gauge.dataLabels = {};
    hcOptions.plotOptions.gauge.dataLabels.enabled = true;
    hcOptions.plotOptions.gauge.dataLabels.useHTML = true;
    hcOptions.plotOptions.gauge.dataLabels.borderWidth = 0;
    hcOptions.plotOptions.gauge.dataLabels.format = '&lt;div style="text-align:center"&gt;&lt;span style="font-family:Arial;font-size:25px;color:black"&gt;{point.displayvalue}&lt;/span&gt;&lt;br/&gt;';
    }  else if('solid_gauge' === chartType) {
    if (hcOptions.plotOptions.solidgauge==null)
    hcOptions.plotOptions.solidgauge = {};
    if (hcOptions.plotOptions.solidgauge.dataLabels==null)
    hcOptions.plotOptions.solidgauge.dataLabels = {};
    hcOptions.plotOptions.solidgauge.dataLabels.enabled = true;
    hcOptions.plotOptions.solidgauge.dataLabels.y = -35;
    hcOptions.plotOptions.solidgauge.dataLabels.useHTML = true;
    hcOptions.plotOptions.solidgauge.dataLabels.borderWidth = 0;
    hcOptions.plotOptions.solidgauge.dataLabels.format = '&lt;div style="text-align:center"&gt;&lt;span style="font-family:Arial;font-size:25px;color:black"&gt;{point.displayvalue}&lt;/span&gt;&lt;br/&gt;';
    } else if (isLineType(chartType)){
    if(hcOptions.series[0]==null)
    hcOptions.series[0] = {};
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.enabled = false;
    }  else if ('map' === chartType){
    hcOptions.series[0].dataLabels = {};
    hcOptions.series[0].dataLabels.enabled = false;
    }
    }
    if(!isUI){
    if(hcOptions.plotOptions==null)
    hcOptions.plotOptions = {};
    if(hcOptions.plotOptions.series==null)
    hcOptions.plotOptions.series = {};
    }
    }
    function hc_addStackedBarChartOptions(hcOptions, chartProps, chartData, barType, isUI, serieProps) {
    hc_addCommonBarChartOptions(hcOptions, chartProps, chartData, barType, isUI);
    if (chartData.series.length === 1 &amp;&amp; chartProps.aggType === 'COUNT')
    hc_addYAxisMax(chartProps, hcOptions, chartData, chartProps.chartType);
    if (isUI) {
    hcOptions.tooltip.shared = false;
    hcOptions.tooltip.formatter = hc_formatStackedBarToolTip;
    if (hcOptions.chart.width)
    hcOptions.tooltip.style = {width: hcOptions.chart.width / 2};
    hcOptions.tooltip.followPointer = true;
    hcOptions.tooltip.positioner = function (labelWidth, labelHeight, point) {
    return tooltipPositioner(labelWidth, labelHeight, point, this.chart);
    }
    }
    }
    function tooltipPositioner(labelWidth, labelHeight, point, chart) {
    var tooltipX, tooltipY;
    if (point.plotX + labelWidth &gt; chart.plotWidth) {
    tooltipX = point.plotX + chart.plotLeft - labelWidth - 20;
    } else {
    tooltipX = point.plotX + chart.plotLeft + 20;
    }
    tooltipY = point.plotY + chart.plotTop - 20;
    return {
    x: tooltipX,
    y: tooltipY
    };
    }
    function hc_addLineChartOptions(hcOptions, chartProps, chartData, isUI,chartType) {
    hc_addXYChartOptions(hcOptions, chartProps, chartData, isUI);
    hc_addSlantLabelOptions(hcOptions, chartProps, true);
    hcOptions.plotOptions = {};
    for (i = 0; i &lt; chartData.series.length; i++) {
    var seriesChartType = chartData.series[i].series_plot_type;
    if (seriesChartType === 'line' || seriesChartType === 'step_line') {
    hc_setZoomTypeForSlowMetric(chartData, hcOptions);
    hcOptions.chart.type = 'line';
    }
    else if (seriesChartType === 'area')
    hcOptions.chart.type = 'area';
    else if (seriesChartType === 'line_bar') {
    hcOptions.chart.type = 'column';
    hc_setZoomTypeForSlowMetric(chartData, hcOptions);
    hc_addSummaryDataToLegendForSlowMetric(chartData, hcOptions, isUI);
    } else if (seriesChartType === 'spline')
    hcOptions.chart.type = 'spline';
    if (isUI) {
    if (hcOptions.tooltip === undefined)
    hcOptions.tooltip = {};
    hcOptions.tooltip.shared = false;
    hcOptions.tooltip.formatter = hc_formatGeneralLineBarToolTip;
    hcOptions.plotOptions[hcOptions.chart.type] = {};
    hcOptions.plotOptions[hcOptions.chart.type].point = hcOptions.plotOptions[hcOptions.chart.type].point || {};
    hcOptions.plotOptions[hcOptions.chart.type].point.events = hcOptions.plotOptions[hcOptions.chart.type].events || {};
    hcOptions.plotOptions[hcOptions.chart.type].point.events.click = hc_dataPointClicked;
    }
    }
    }
    function hc_addAvailChartOptions(hcOptions, chartProps, chartData, isUI) {
    hc_addXYChartOptions(hcOptions, chartProps, chartData, isUI);
    hc_addSlantLabelOptions(hcOptions, chartProps, true);
    if (hcOptions.tooltip == undefined)
    hcOptions.tooltip = {};
    if ('sub_series' in chartData.series[0]) {
    if (isUI)
    hcOptions.tooltip.formatter = hc_formatStackedBarToolTip;
    } else {
    hcOptions.legend.enabled = false;
    if (isUI)
    hcOptions.tooltip.formatter = hc_formatToolTip;
    }
    hcOptions.yAxis[0].min = 0;
    hcOptions.yAxis[0].max = 100;
    hcOptions.yAxis[0].tickInterval = 10;
    }
    function hc_addHistogramOptions(hcOptions, chartProps, chartData, isUI) {
    hc_addBarChartOptions(hcOptions, chartProps, chartData, 'column', isUI);
    hcOptions.plotOptions.column.pointPadding = 0;
    hcOptions.plotOptions.column.groupPadding = 0;
    hcOptions.plotOptions.column.borderWidth = 0.5;
    if (isUI) {
    hcOptions.tooltip.formatter = hc_formatHistToolTip;
    hcOptions.plotOptions.column.point = {};
    hcOptions.plotOptions.column.point.events = {};
    hcOptions.plotOptions.column.point.events.click = '';
    }
    hcOptions.legend.enabled = false;
    }
    function hc_addCommonBarChartOptions(hcOptions, chartProps, chartData, barType, isUI) {
    hcOptions.chart.type = barType;
    hc_addXYChartOptions(hcOptions, chartProps, chartData, isUI);
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.series = {};
    if (barType == 'column') {
    hc_addSlantLabelOptions(hcOptions, chartProps, true);
    hcOptions.plotOptions.column = {};
    hcOptions.plotOptions.column.groupPadding = 0;
    if ('bar_spacing' in chartProps.report_properties)
    hcOptions.plotOptions.column.pointPadding = chartProps.report_properties.bar_spacing;
    if (isUI) {
    hcOptions.plotOptions.column = hcOptions.plotOptions.column || {};
    hcOptions.plotOptions.column.point = hcOptions.plotOptions.column.point || {};
    hcOptions.plotOptions.column.point.events = hcOptions.plotOptions.column.point.events || {};
    hcOptions.plotOptions.column.point.events.click = hc_dataPointClicked;
    }
    } else if (barType == 'bar') {
    hc_addSlantLabelOptions(hcOptions, chartProps, false);
    hcOptions.xAxis.labels.y = 0;
    hcOptions.plotOptions.bar = {};
    hcOptions.plotOptions.bar.groupPadding = 0;
    if ('bar_spacing' in chartProps.report_properties)
    hcOptions.plotOptions.bar.pointPadding = chartProps.report_properties.bar_spacing;
    if (isUI) {
    hcOptions.plotOptions.bar.point = hcOptions.plotOptions.bar.point || {};
    hcOptions.plotOptions.bar.point.events = hcOptions.plotOptions.bar.point.events || {};
    hcOptions.plotOptions.bar.point.events.click = hc_dataPointClicked;
    }
    }
    if (isUI) {
    hcOptions.tooltip.formatter = hc_formatToolTip;
    hcOptions.plotOptions.column = hcOptions.plotOptions.column || {};
    hcOptions.plotOptions.column.point = hcOptions.plotOptions.column.point || {};
    hcOptions.plotOptions.column.point.events = hcOptions.plotOptions.column.point.events || {};
    hcOptions.plotOptions.column.point.events.click = hc_dataPointClicked;
    }
    }
    function hc_getXAxisLabelStyle(chartProps, isUI) {
    return hc_getAxisLabelStyle(chartProps.report_properties.x_axis_label_color_value, chartProps.report_properties.x_axis_label_size,
    chartProps.report_properties.x_axis_label_bold, chartProps.defaultFontFamily, isUI);
    }
    function hc_getYAxisLabelStyle(chartProps, isUI) {
    return hc_getAxisLabelStyle(chartProps.report_properties.y_axis_label_color_value, chartProps.report_properties.y_axis_label_size,
    chartProps.report_properties.y_axis_label_bold, chartProps.defaultFontFamily, isUI);
    }
    function hc_getAxisLabelStyle(axis_label_color_value, axis_label_size, axis_label_bold, fontFamily, isUI) {
    var style = {};
    style.fontFamily = fontFamily;
    style.color = axis_label_color_value;
    style.fontSize = axis_label_size + 'px';
    if (axis_label_bold)
    style.fontWeight = 'bold';
    if (isUI &amp;&amp; window.isMSIE) {
    style.backgroundColor = '#fff';
    }
    return style;
    }
    function unescapeHtmlInput(input) {
    var el = document.createElement('div');
    el.innerHTML = input;
    return el.childNodes.length === 0 ? "" : el.childNodes[0].nodeValue;
    }
    function hc_axisTitleDisplayText(axisTitle, isUI) {
    if (isUI) {
    var axisLabel = document.createElement('tspan');
    axisLabel.textContent = unescapeHtmlInput(axisTitle);
    axisLabel.setAttribute('title', unescapeHtmlInput(axisTitle));
    return axisLabel.outerHTML;
    } else
    return '&lt;tspan  title="' + axisTitle + '"&gt;' + axisTitle + '&lt;/tspan&gt;';
    }
    function hc_buildAxisTitle(axisTitleText, axisTitleBold, axisTitleSize, axisTitleColor, fontFamily, width, isUI) {
    var title = {
    text: axisTitleText,
    useHTML: "true",
    style: {
    fontFamily: fontFamily,
    fontWeight: axisTitleBold ? "bold" : "normal",
    fontSize: axisTitleSize + "px",
    color: axisTitleColor,
    maxWidth: width ? (width - 80) + "px" : "300px",
    display: "inline-block",
    overflow: "hidden",
    textOverflow: "ellipsis",
    "-o-text-overflow": "ellipsis",
    "-ms-text-overflow": "ellipsis",
    "-moz-text-overflow": "ellipsis",
    "white-space": "nowrap",
    "word-wrap": "normal",
    "position": "relative"
    }
    }
    return title;
    }
    function hc_addHeatmapAxisCategories(hcOptions, chartData) {
    hcOptions.xAxis = {};
    hcOptions.xAxis.categories = fetchAxisCategory(chartData.series[0].xAxisCategories);
    hcOptions.xAxis.title = null;
    hcOptions.xAxis.labels = {};
    hcOptions.xAxis.labels.rotation = -45;
    var yAxis = {};
    yAxis.categories = fetchAxisCategory(chartData.series[0].yAxisCategories);
    yAxis.title = null;
    if (hcOptions.yAxis != undefined)
    yAxis.max = hcOptions.yAxis[0].categories.length - 1;
    hcOptions.yAxis = [];
    hcOptions.yAxis.push(yAxis);
    }
    function hc_addBubbleAxisCategories(hcOptions, chartData) {
    hcOptions.xAxis = {};
    hcOptions.xAxis.title = {};
    hcOptions.xAxis.title.text = chartData.series[0].xAxis;
    hcOptions.yAxis = {};
    hcOptions.yAxis.title = {};
    hcOptions.yAxis.title.text = chartData.series[0].yAxis;
    }
    function getCategoriesFromJSONArray(category) {
    return category.fieldValues[0].value;
    }
    function fetchAxisCategory(categories) {
    axisCategories = [];
    if (categories) {
    for (var i = 0; i &lt; categories.length; i++) {
    axisCategories.push(categories[i].fieldValues[0].value)
    }
    }
    return axisCategories;
    }
    function hc_addXYChartOptions(hcOptions, chartProps, chartData, isUI) {
    var label_style = hc_getXAxisLabelStyle(chartProps, isUI);
    hcOptions.xAxis = {};
    if(hc_isSlowMetricChart(hcOptions, chartData.series[0])) {
    hcOptions.xAxis.type = 'datetime';
    } else {
    hcOptions.xAxis.categories = [];
    hcOptions.xAxis.categories = chartProps.xValues;
    }
    hcOptions.xAxis.labels = {};
    hcOptions.xAxis.labels.style = label_style;
    hcOptions.xAxis.opposite = chartProps.report_properties.x_axis_opposite;
    hcOptions.xAxis.title = {};
    var xTitleText = chartProps.report_properties.x_axis_title;
    xTitleText = xTitleText === '' || xTitleText === undefined ? '' : xTitleText;
    hcOptions.xAxis.title = hc_buildAxisTitle(hc_axisTitleDisplayText(xTitleText, isUI), chartProps.report_properties.x_axis_title_bold,
    chartProps.report_properties.x_axis_title_size, chartProps.report_properties.x_axis_title_color_value,
    chartProps.defaultFontFamily, hcOptions.chart.width, isUI);
    if (chartProps.report_properties.x_axis_display_grid) {
    hcOptions.xAxis.gridLineWidth = chartProps.report_properties.x_axis_grid_width;
    hcOptions.xAxis.gridLineColor = chartProps.report_properties.x_axis_grid_color_value;
    if (chartProps.report_properties.x_axis_grid_dotted)
    hcOptions.xAxis.gridLineDashStyle = 'dot';
    } else {
    hcOptions.xAxis.gridLineWidth = 0;
    }
    var yAxis = {};
    yAxis.labels = {};
    yAxis.labels.style = hc_getYAxisLabelStyle(chartProps, isUI);
    if (chartProps.report_properties.y_axis_display_grid) {
    yAxis.gridLineWidth = chartProps.report_properties.y_axis_grid_width;
    yAxis.gridLineColor = chartProps.report_properties.y_axis_grid_color_value;
    if (chartProps.report_properties.y_axis_grid_dotted)
    yAxis.gridLineDashStyle = 'dot';
    } else {
    yAxis.gridLineWidth = 0;
    }
    yAxis.title = {};
    yAxis.title.margin = 20;
    yAxis.opposite = chartProps.report_properties.y_axis_opposite;
    yAxis.title.useHTML = true;
    yAxis.title.style = {};
    var yTitleText = chartProps.report_properties.y_axis_title;
    yTitleText = yTitleText === '' || yTitleText === undefined ? chartData.series[0].yTitle : yTitleText;
    yAxis.title = hc_buildAxisTitle(hc_axisTitleDisplayText(yTitleText, isUI), chartProps.report_properties.y_axis_title_bold,
    chartProps.report_properties.y_axis_title_size, chartProps.report_properties.y_axis_title_color_value,
    chartProps.defaultFontFamily, hcOptions.chart.height, isUI);
    if (isUI &amp;&amp; window.isMSIE) {
    yAxis.title.style.backgroundColor = '#ffffff';
    }
    if (chartProps.aggType == 'COUNT')
    yAxis.allowDecimals = false;
    hcOptions.yAxis = [];
    hcOptions.yAxis.push(yAxis);
    }
    function hc_addSlantLabelOptions(hcOptions, chartProps, xaxis) {
    var minLabelsToSlant = 5;
    if ('slant_axis_labels' in chartProps.report_properties)
    minLabelsToSlant = chartProps.report_properties.slant_axis_labels;
    if (chartProps.xValues.length &gt;= minLabelsToSlant) {
    hcOptions.xAxis.labels.rotation = -45;
    hcOptions.xAxis.labels.align = hcOptions.xAxis.opposite ? 'left' : 'right';
    }
    if (!xaxis) {
    hcOptions.yAxis[0].labels.rotation = -45;
    hcOptions.yAxis[0].labels.align = hcOptions.yAxis[0].opposite? 'left' : 'right';
    }
    }
    function hc_addParetoChartOptions(hcOptions, chartProps, total, isUI) {
    var bar_yAxis = hcOptions.yAxis;
    bar_yAxis.lineWidth = 1;
    hcOptions.yAxis = bar_yAxis;
    var percent_axis = {};
    percent_axis.title = {};
    if (isUI)
    percent_axis.title.margin = 20;
    percent_axis.title.style = {};
    percent_axis.title.text = "Percent";
    percent_axis.title.style.color = chartProps.blackColor;
    percent_axis.title.style.fontFamily = chartProps.defaultFontFamily;
    percent_axis.title.style.fontSize = chartProps.fontSize;
    if (isUI &amp;&amp; window.isMSIE) {
    percent_axis.title.style.backgroundColor = '#ffffff';
    }
    percent_axis.alignTicks = false;
    percent_axis.gridLineWidth = 0;
    percent_axis.lineColor = '#999';
    percent_axis.lineWidth = 1;
    percent_axis.tickColor = '#666';
    percent_axis.tickWidth = 1;
    percent_axis.tickLength = 3;
    percent_axis.tickInterval = parseFloat(total) / 10;
    percent_axis.endOnTick = false;
    percent_axis.opposite = true;
    percent_axis.linkedTo = 0;
    percent_axis.labels = {};
    if (isUI) {
    percent_axis.labels.formatter = function () {
    var pcnt = Highcharts.numberFormat((this.value / parseFloat(total) * 100), 0, '.');
    return pcnt + '%';
    }
    } else {
    percent_axis.labels.formatter = 'hc_formatParetoAxisLabels_' + total + '_';
    }
    percent_axis.labels.style = hc_getYAxisLabelStyle(chartProps, isUI);
    percent_axis.plotLines = [];
    var percent_plot = {};
    percent_plot.color = 'blue';
    percent_plot.width = 2;
    percent_plot.value = 0.80 * total;
    percent_axis.plotLines.push(percent_plot);
    hcOptions.yAxis.push(percent_axis);
    hcOptions.legend.enabled = false;
    }
    function hc_addControlChartOptions(hcOptions, chartProps, chartData, isUI) {
    hc_addXYChartOptions(hcOptions, chartProps, chartData, isUI);
    hc_addSlantLabelOptions(hcOptions, chartProps, true);
    if (isUI) {
    hcOptions.plotOptions = {};
    hcOptions.plotOptions.line = {};
    hcOptions.plotOptions.line.point = {};
    hcOptions.plotOptions.line.point.events = {};
    hcOptions.plotOptions.line.point.events.click = hc_dataPointClicked;
    hcOptions.tooltip.formatter = hc_formatControlToolTip;
    }
    }
    function hc_addBoxChartOptions(hcOptions, chartProps, chartData, isUI) {
    hcOptions.chart.type = 'boxplot';
    hcOptions.legend.enabled = false;
    hc_addXYChartOptions(hcOptions, chartProps, chartData, isUI);
    hc_addSlantLabelOptions(hcOptions, chartProps, true);
    if (isUI)
    hcOptions.tooltip.followPointer = true;
    }
    function hc_addYAxisMax(chartProps, hcOptions, chartData, chartType) {
    if (chartType == 'pareto')
    return;
    var seriesData = chartData.series[0];
    if (chartData.report_properties_series != undefined &amp;&amp; chartData.report_properties_series[0].bar_unstack === true) {
    hcOptions.yAxis[0].startOnTick = true;
    hcOptions.yAxis[0].endOnTick = true;
    } else {
    if ((chartData.report_properties_series[0].y_axis_to === undefined ||
    chartData.report_properties_series[0].y_axis_to === '')
    &amp;&amp; seriesData.ymax !== undefined &amp;&amp; seriesData.ymax !== '')
    hcOptions.yAxis[0].max = parseFloat(seriesData.ymax);
    }
    }
    function hc_addYAxisMaxSeries(seriesProps, hcOptions, seriesData, iSerie) {
    if (seriesData.series_plot_type == 'pareto')
    return;
    if (hcOptions.yAxis[iSerie] == undefined)
    return;
    if (seriesProps.bar_unstack != undefined &amp;&amp; seriesProps.bar_unstack === true) {
    hcOptions.yAxis[iSerie].startOnTick = true;
    hcOptions.yAxis[iSerie].endOnTick = true;
    }
    if (seriesProps.y_axis_from !== undefined &amp;&amp; seriesProps.y_axis_from !== '')
    hcOptions.yAxis[iSerie].min = seriesProps.y_axis_from;
    if (seriesProps.y_axis_to !== undefined &amp;&amp; seriesProps.y_axis_to !== '')
    hcOptions.yAxis[iSerie].max = seriesProps.y_axis_to;
    }
    function hc_addYAxisIfNedded(hcOptions, chartProps, chartPropsSerie, seriesData, isUI, iSerie) {
    if (chartPropsSerie == null)
    return;
    if (chartPropsSerie.show_y_axis == true) {
    var yAxis = JSON.parse(JSON.stringify(hcOptions.yAxis[0]));
    yAxis.title = hc_buildAxisTitle(hc_axisTitleDisplayText(chartPropsSerie.y_axis_title, isUI), chartProps.report_properties.y_axis_title_bold,
    chartProps.report_properties.y_axis_title_size, chartProps.report_properties.y_axis_title_color_value,
    chartProps.defaultFontFamily, hcOptions.chart.height, isUI);
    yAxis.min = null;
    yAxis.max = null;
    yAxis.opposite = true;
    yAxis.showEmpty = true;
    var color = seriesData.colors != undefined ? seriesData.colors[0] : '';
    if (yAxis.labels == undefined)
    yAxis.labels = {};
    yAxis.labels.formatter = null;
    if (yAxis.title.style == undefined)
    yAxis.title.style = {};
    if (chartPropsSerie.y_axis_from != undefined &amp;&amp; chartPropsSerie.y_axis_from != '')
    yAxis.min = chartPropsSerie.y_axis_from;
    if (chartPropsSerie.y_axis_to != undefined &amp;&amp; chartPropsSerie.y_axis_to != '')
    yAxis.max = chartPropsSerie.y_axis_to;
    hcOptions.yAxis.push(yAxis);
    return hcOptions.yAxis.length - 1;
    } else
    return 0;
    }
    function hc_createMultipleSeriesData(hcOptions, chartData, chartProps, isUI) {
    var series = [];
    if (isUI &amp;&amp; isAccessibilityPatternsEnabled())
    hc_enableAccessibility(hcOptions,chartData,chartProps.chartType);
    var showYAxis;
    var yAxisProps = {};
    for (var i = 0; i &lt; chartData.series.length; i++) {
    var yAxisIndex = 0;
    var seriesData = chartData.series[i];
    var seriesName = seriesData.series_name;
    var chartPropsSerie;
    if (!chartData.report_properties_series)
    chartPropsSerie = chartProps;
    else
    chartPropsSerie = chartData.report_properties_series[i];
    if (i &gt; 0)
    yAxisIndex = hc_addYAxisIfNedded(hcOptions, chartProps, chartPropsSerie, seriesData, isUI, i);
    yAxisProps[i] = yAxisIndex;
    if ('sub_series' in seriesData) {
    var stackedSeries = hc_createStackedSeriesData(hcOptions, seriesData, chartProps, isUI, chartPropsSerie, i, yAxisIndex, chartData.series.length &gt; 1);
    for (j = 0; j &lt; stackedSeries.length; j++) {
    stackedSeries[j]['zIndex'] = 999 - i;
    hc_addYAxisMaxSeries(chartPropsSerie, hcOptions, seriesData, stackedSeries[j]['yAxis']);
    }
    series.push.apply(series, stackedSeries);
    } else {
    if (('yaxis_duration' in seriesData) &amp;&amp; seriesData.yaxis_duration &amp;&amp; hc_hasAxes(chartProps.chartType)) {
    var iYAxis = i;
    if (hcOptions.yAxis[i] == undefined)
    iYAxis = 0;
    if (hcOptions.yAxis[iYAxis].labels != undefined) {
    if (isUI)
    hcOptions.yAxis[iYAxis].labels.formatter = hc_formatDurationLabel;
    else
    hcOptions.yAxis[iYAxis].labels.formatter = 'hc_formatDurationLabel';
    }
    }
    var serie = {};
    var yMin = 0;
    serie['name'] = seriesName;
    serie['type'] = hc_getHighChartsType(seriesData.series_plot_type, chartPropsSerie.bar_unstack);
    serie['data'] = [];
    serie['zIndex'] = 999 - i;
    serie['stack'] = seriesName;
    serie['yAxis'] = 0;
    if (chartPropsSerie.show_y_axis === true)
    serie['yAxis'] = yAxisIndex;
    hc_addYAxisMaxSeries(chartPropsSerie, hcOptions, seriesData, serie['yAxis']);
    hc_seriesStyle(serie['type'], chartPropsSerie, serie, seriesData, isUI, i, false);
    var firstColor;
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    if (j == 0)
    firstColor = seriesData.colors[0];
    var dataPoint = hc_createSingleSeriesDataPt(chartProps, j, seriesData, isUI, chartPropsSerie, firstColor, hcOptions);
    serie.data.push(dataPoint);
    if (dataPoint['y'] &amp;&amp; dataPoint['y'] &lt; yMin)
    yMin = dataPoint['y'];
    }
    serie['color'] = firstColor;
    if (isLineType(seriesData.series_plot_type) &amp;&amp; (chartPropsSerie.y_axis_from === undefined ||
    chartPropsSerie.y_axis_from === '')
    &amp;&amp; (!hcOptions.yAxis[yAxisProps[i]].min || yMin &lt; hcOptions.yAxis[yAxisProps[i]].min)) {
    hcOptions.yAxis[yAxisProps[i]].min = yMin;
    }
    if("step_line" == seriesData.series_plot_type)
    serie['step'] = "center";
    series.push(serie);
    }
    }
    return series;
    }
    function hc_createHeatmapSeriesData(chartData, chartProps, isUI) {
    var chartPropsSerie = chartData.report_properties_series[0];
    var seriesData = chartData.series[0];
    var series = {};
    series['name'] = seriesData.series_name;
    series['type'] = hc_getHighChartsType(seriesData.series_plot_type, chartData.report_properties.bar_unstack);
    series['data'] = [];
    for (var j = 0; j &lt; seriesData.series.data.length; j++) {
    var dataPoint = hc_createHeatmapSeriesDataPt(chartProps, j, seriesData, chartPropsSerie, isUI);
    series.data.push(dataPoint);
    }
    series['borderWidth'] = 0.5;
    series['borderColor'] = chartData.report_properties.axis_max_color;
    return series;
    }
    function hc_createMapSeriesData(hcOptions, chartData, chartProps, isUI) {
    var series;
    var mapData = chartData.report_properties_series[0].map_source;
    var map = JSON.parse(mapData.map_json);
    var isGeographicalMap = mapData.is_geographical_map;
    if (isGeographicalMap) {
    var useLatLon = mapData.use_lat_lon;
    if (useLatLon)
    series = hc_createMapSeriesDataLatLon(chartData, chartProps, map, isUI);
    else
    series = hc_createMapSeriesDataHcKey(hcOptions, chartData, chartProps, map, isUI);
    } else {
    series = hc_createMapSeriesDataHcKeyNonGeographical(chartData, chartProps, map, isUI);
    }
    return series;
    }
    function hc_createMapSeriesDataLatLon(chartData, chartProps, map, isUI) {
    var series = [];
    var serie = {};
    serie['mapData'] = map;
    serie['name'] = 'Basemap';
    serie['borderColor'] = '#C2C2C2';
    serie['showInLegend'] = false;
    series.push(serie);
    serie = {};
    serie['name'] = 'Separators';
    serie['type'] = 'mapline';
    serie['data'] = Highcharts.geojson(map, 'mapline');
    serie['color'] = '#C2C2C2';
    serie['showInLegend'] = false;
    serie['enableMouseTracking'] = false;
    series.push(serie);
    var dataArray =[];
    var seriesData = chartData.series[0];
    var seriesName = seriesData.series_name;
    var chartPropsSerie;
    if (chartData.report_properties_series == undefined)
    chartPropsSerie = chartProps;
    else
    chartPropsSerie = chartData.report_properties_series[0];
    serie = {};
    serie['name'] = seriesName;
    serie['type'] = 'mappoint';
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    var data = hc_createSingleSeriesDataLocationPt(chartProps, j, seriesData, isUI, chartPropsSerie);
    dataArray.push(data);
    }
    serie['data'] = dataArray;
    series.push(serie);
    return series;
    }
    function hc_createMapSeriesDataHcKey(hcOptions, chartData, chartProps, map, isUI) {
    var dataArray =[];
    var seriesData = chartData.series[0];
    var seriesName = seriesData.series_name;
    var series = [];
    var serie = {};
    serie['mapData'] = map;
    serie['name'] = seriesName;
    serie['showInLegend'] = false;
    var joinBy = chartData.report_properties_series[0].map_source.join_by_column;
    serie['joinBy'] = [joinBy, 'name'];
    var chartPropsSerie;
    if (chartData.report_properties_series == undefined)
    chartPropsSerie = chartProps;
    else
    chartPropsSerie = chartData.report_properties_series[0];
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    var data = hc_createSingleSeriesDataLocationHcKeyPt(chartProps, j, seriesData, isUI, chartPropsSerie);
    if (data['name'] !== '')
    dataArray.push(data);
    }
    serie['data'] = dataArray;
    if (serie['data'].length == 0)
    hcOptions.legend.enabled = false;
    series.push(serie);
    return series;
    }
    function hc_createMapSeriesDataHcKeyNonGeographical(chartData, chartProps, map, isUI) {
    var series = [];
    var serie = {};
    serie['type'] = 'map';
    serie['showInLegend'] = false;
    var joinBy = chartData.report_properties_series[0].map_source.join_by_column;
    serie['joinBy'] = [joinBy, 'name'];
    serie['mapData'] = map;
    var chartPropsSerie;
    if (chartData.report_properties_series == undefined)
    chartPropsSerie = chartProps;
    else
    chartPropsSerie = chartData.report_properties_series[0];
    var dataArray =[];
    var seriesData = chartData.series[0];
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    var data = hc_createSingleSeriesDataLocationHcKeyPt(chartProps, j, seriesData, isUI, chartPropsSerie);
    dataArray.push(data);
    }
    serie['data'] = dataArray;
    series.push(serie);
    return series;
    }
    function hc_createBubbleSeriesData(chartData, chartProps, isUI) {
    var chartPropsSerie = chartData.report_properties_series[0];
    var seriesData = chartData.series[0];
    var bubbleSeriesData = [];
    for (var i = 0; i &lt; seriesData.series.length; i++) {
    var series = {};
    series['name'] = seriesData.series[i].name;
    series['type'] = hc_getHighChartsType(seriesData.series_plot_type, chartData.report_properties.bar_unstack);
    series['data'] = [];
    for (var j = 0; j &lt; seriesData.series[i].data.length; j++) {
    var dataPoint = hc_createBubbleSeriesDataPt(chartProps, j, seriesData.series[i].data, chartPropsSerie, isUI, seriesData.table_name);
    series.data.push(dataPoint);
    }
    bubbleSeriesData.push(series);
    }
    return bubbleSeriesData;
    }
    function hc_uniqueId() {
    var randomLetters = 6;
    var letters = '';
    for (var i = 0; i &lt; randomLetters; i++)
    letters += String.fromCharCode(Math.floor(Math.random() * 26) + 97);
    var k = Math.floor(Math.random() * 1000000);
    return Date.now() + '-' + letters + '-' + k;
    }
    function getPatterns(uniqueId) {
    var colors = Highcharts.getOptions().colors;
    var	id = uniqueId || hc_uniqueId();
    return [
    'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',
    'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9',
    'M 3 0 L 3 10 M 8 0 L 8 10',
    'M 0 3 L 10 3 M 0 8 L 10 8',
    'M 0 3 L 5 3 L 5 0 M 5 10 L 5 7 L 10 7',
    'M 3 3 L 8 3 L 8 8 L 3 8 Z',
    'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0',
    'M 10 3 L 5 3 L 5 0 M 5 10 L 5 7 L 0 7',
    'M 2 5 L 5 2 L 8 5 L 5 8 Z',
    'M 0 0 L 5 10 L 10 0',
    ].map(function eachPattern(pattern, i) {
    return {
    id: 'highcharts-custom-pattern-' + id + '-' + i,
    width: 10,
    height: 10,
    path: {
    d: pattern,
    },
    color: colors[i],
    };
    });
    }
    function getDashStyles() {
    return 	[
    'Solid',
    'ShortDash',
    'ShortDot',
    'ShortDashDot',
    'ShortDashDotDot',
    'Dot',
    'Dash',
    'LongDash',
    'DashDot',
    'LongDashDot',
    'LongDashDotDot'
    ];
    }
    function hc_enableAccessibility(hcOptions, chartData, chartType) {
    chartData.series.forEach(function a11ySeries(serie,i) {
    chartData.series[i].colors.forEach(function a11yColor(color,j) {
    if (isLineType(chartType) &amp;&amp; chartType !== 'line_bar' &amp;&amp; chartType !== 'area')
    chartData.series[i].colors[j] = '#000';
    else
    chartData.series[i].colors[j] = { pattern: getPatterns()[j % 10] };
    });
    });
    }
    function hc_createSingleSeriesData(hcOptions, chartData, chartProps, isUI) {
    var seriesData = chartData.series[0];
    if (isUI &amp;&amp; isAccessibilityPatternsEnabled())
    hc_enableAccessibility(hcOptions,chartData,chartProps.chartType);
    var chartPropSerie = chartData.report_properties_series[0];
    var seriesName = seriesData.series_name;
    if (('yaxis_duration' in seriesData) &amp;&amp; seriesData.yaxis_duration &amp;&amp; hc_hasAxes(chartProps.chartType)) {
    if (isUI)
    hcOptions.yAxis[0].labels.formatter = hc_formatDurationLabel;
    else
    hcOptions.yAxis[0].labels.formatter = 'hc_formatDurationLabel';
    }
    var series = {};
    var yMin = 0;
    series['name'] = seriesName;
    series['type'] = hc_getHighChartsType(seriesData.series_plot_type, chartData.report_properties.bar_unstack);
    series['data'] = [];
    if (chartProps.chartType == 'angular_gauge' || chartProps.chartType == 'solid_gauge') {
    var point = {};
    point.y = parseFloat(seriesData.yvalues);
    point.y_tooltip = seriesData.ydisplayvalues;
    point.displayvalue = seriesData.ydisplayvalues;
    point.table = seriesData.table_name;
    point.click_url_info = chartPropSerie.filter;
    if ('list_ui_view_name' in chartPropSerie)
    point['list_ui_view_name'] = chartPropSerie.list_ui_view_name;
    if ('report_drilldown' in chartPropSerie)
    point['report_drilldown'] = chartPropSerie.report_drilldown;
    if ('drill_open_new_win' in chartProps.report_properties)
    point['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties){
    point['widget_navigation'] = chartProps.report_properties.widget_navigation;
    point['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    series.data.push(point);
    return series;
    }
    if (isLineType(seriesData.series_plot_type))
    series['color'] = seriesData.colors[0];
    for (var j = 0; j &lt; chartProps.xValues.length; j++) {
    var dataPoint = hc_createSingleSeriesDataPt(chartProps, j, seriesData, isUI, chartPropSerie, undefined, hcOptions);
    series.data.push(dataPoint);
    if (dataPoint['y'] &amp;&amp; dataPoint['y'] &lt; yMin)
    yMin = dataPoint['y'];
    }
    if (isLineType(chartProps.chartType) &amp;&amp; (chartProps.report_properties.y_axis_from === undefined ||
    chartProps.report_properties.y_axis_from === ''))
    hcOptions.yAxis[0].min = yMin;
    if(chartProps.chartType == 'donut' || chartProps.chartType == 'semi_donut') {
    series['total'] = seriesData.display_human_readable_total;
    series['total_value'] = seriesData.display_grid_total;
    }
    return series;
    }
    function hc_hasAxes(chartType) {
    return !(chartType === 'angular_gauge' || chartType === 'solid_gauge' || chartType === 'pie' ||
    chartType === 'solid_gauge'  || chartType === 'funnel' || chartType === 'donut' ||
    chartType === 'semi_donut' || chartType === 'pyramid');
    }
    function hc_createStackedSeriesData(hcOptions, seriesData, chartProps, isUI, chartPropsSerie, serieIndex, yAxisIndex, isMultiseries) {
    if (('yaxis_duration' in seriesData) &amp;&amp; seriesData.yaxis_duration &amp;&amp; hc_hasAxes(chartProps.chartType) &amp;&amp; (yAxisIndex == 0 || (yAxisIndex&gt;0 &amp;&amp; chartPropsSerie.show_y_axis == true))) {
    if (hcOptions.yAxis[yAxisIndex] == undefined) {
    hcOptions.yAxis[yAxisIndex] = {};
    hcOptions.yAxis[yAxisIndex].labels = {};
    }
    if (isUI)
    hcOptions.yAxis[yAxisIndex].labels.formatter = hc_formatDurationLabel;
    else
    hcOptions.yAxis[yAxisIndex].labels.formatter = 'hc_formatDurationLabel';
    }
    var x2Vals = seriesData.x2values;
    var x2Colors = seriesData.colors;
    var subSeriesList = seriesData.sub_series;
    var subSeriesDataArray = [];
    for (var j = 0; j &lt; seriesData.xvalues.length; j++)
    subSeriesDataArray.push(subSeriesList[j]);
    var series = [];
    var yMin = 0;
    var isSlowMetricTable = hc_isSlowMetricChart(hcOptions, seriesData);
    hcOptions.yAxis[yAxisIndex].reversedStacks = chartPropsSerie.bar_unstack || false;
    for (var i = 0; i &lt; x2Vals.length; i++) {
    var subseries = {};
    subseries.name = x2Vals[i].displayValue;
    if (chartProps.report_properties != undefined &amp;&amp; isMultiseries)
    subseries.name = '[' + seriesData.series_name + '] ' + subseries.name;
    subseries.data = [];
    subseries['type'] = hc_getHighChartsType(seriesData.series_plot_type, chartPropsSerie.bar_unstack);
    subseries['legend_label_max_length'] = chartPropsSerie.legend_label_max_size;
    subseries['id'] = seriesData.series_name;
    subseries['stack'] = seriesData.series_name;
    subseries['yAxis'] = yAxisIndex;
    if (isUI &amp;&amp; isAccessibilityPatternsEnabled())
    subseries['dashStyle'] = getDashStyles()[i%x2Vals.length];
    if (chartPropsSerie.show_y_axis === true)
    subseries['yAxis'] = yAxisIndex;
    hc_seriesStyle(subseries['type'], chartPropsSerie, subseries, seriesData, isUI, serieIndex, true);
    hc_addPropsForDataLabelsTruncation(subseries, chartPropsSerie);
    var dataExistsForX2Val = false;
    var categoryIndx;
    var max = Number.MIN_VALUE;
    var min = Number.MAX_VALUE;
    var total = 0;
    var count = 0;
    for (var j = 0; j &lt; seriesData.xvalues.length; j++) {
    var subSeriesData = subSeriesDataArray[j];
    categoryIndx = j;
    var dataPoint = hc_initStackedSeriesDataPoint(i, j, x2Vals, x2Colors, chartProps, seriesData.table_name, seriesData.table_display_plural, isUI, chartPropsSerie, seriesData, categoryIndx);
    var dataFilled = false;
    if (subSeriesData &amp;&amp; subSeriesData.xvalues) {
    for (var k = 0; k &lt; subSeriesData.xvalues.length; k++) {
    if (x2Vals[i].value == subSeriesData.xvalues[k].value
    || x2Vals[i].value == subSeriesData.xvalues[k]
    ) {
    dataExistsForX2Val = true;
    dataFilled = true;
    hc_fillStackedSeriesDataPoint(dataPoint, k, subSeriesData, chartProps, isUI, chartPropsSerie, categoryIndx, isSlowMetricTable, chartProps.xValues[j]);
    break;
    }
    }
    }
    if(!isSlowMetricTable || dataFilled) {
    subseries.data.push(dataPoint);
    if(isSlowMetricTable &amp;&amp; dataPoint['y']) {
    max = Math.max(max, dataPoint['y']);
    min = Math.min(min, dataPoint['y']);
    total += dataPoint['y'];
    count++;
    }
    }
    if (dataPoint['y'] &amp;&amp; dataPoint['y'] &lt; yMin)
    yMin = dataPoint['y'];
    }
    if(isSlowMetricTable){
    subseries.max = max;
    subseries.min = min;
    subseries.total = total;
    subseries.average = total/count;
    }
    if(seriesData.series_plot_type === 'step_line')
    subseries.step = 'center';
    if (dataExistsForX2Val) {
    subseries.color = x2Colors[i];
    series.push(subseries);
    }
    }
    if (isLineType(seriesData.series_plot_type) &amp;&amp; (chartPropsSerie.y_axis_from === undefined || chartPropsSerie.y_axis_from === ''))
    hcOptions.yAxis[yAxisIndex].min = yMin;
    if(isSlowMetricTable){
    series.sort(function(x, y) {
    return x.total - y.total;
    });
    }
    return series;
    }
    function hc_seriesStyle(type, chartPropsSerie, serie, seriesData, isUI, i, stacked) {
    if ('column' === type || 'bar' === type) {
    if (chartPropsSerie.bar_unstack === true)
    serie.stacking = '';
    else
    serie.stacking = 'normal';
    }
    if ('line' === type || 'area' === type || 'spline' === type) {
    var showMarker = chartPropsSerie.show_marker;
    serie.marker = {};
    serie.marker.enabled = showMarker
    }
    serie.color = seriesData.colors[i];
    if ('column' === type || 'bar' === type || isLineType(type) || 'trend' === type) {
    var dataLabelColor = '#606060';
    if (chartPropsSerie.show_chart_data_label === true) {
    serie.dataLabels = {};
    serie.dataLabels.enabled = true;
    serie.dataLabels.softConnector = false;
    serie.dataLabels.distance = 15;
    serie.dataLabels.style = {};
    serie.dataLabels.style.fontFamily = 'Arial';
    serie.dataLabels.style.fontSize = '10pt';
    serie.dataLabels.style.color = dataLabelColor;
    serie.dataLabels.style.fill = dataLabelColor;
    serie.dataLabels.style.fontWeight = 'normal';
    serie.dataLabels.inside = false;
    if (serie.sub_series != undefined)
    serie.dataLabels.inside = true;
    if ('font_family' in chartPropsSerie &amp;&amp; chartPropsSerie.font_family != '')
    serie.dataLabels.style.fontFamily = chartPropsSerie.font_family;
    if ('font_size' in chartPropsSerie &amp;&amp; chartPropsSerie.font_size != '')
    serie.dataLabels.style.fontSize = chartPropsSerie.font_size;
    if (isUI)
    serie.dataLabels.formatter = hc_formatValueLabel;
    else
    serie.dataLabels.formatter = 'hc_formatValueLabel';
    } else {
    serie.dataLabels = {};
    serie.dataLabels.enabled = false;
    }
    }
    if (isUI) {
    if (isLineType(type) || 'column' === type || 'bar' === type || 'horizontal_bar' === type) {
    serie.tooltip = {};
    if (stacked)
    serie.tooltip.tooltipText = 'stacked';
    else
    serie.tooltip.tooltipText = 'non-stacked';
    }
    }
    }
    function hc_createParetoCumulSeries(hcOptions, chartProps, series0, isUI) {
    var total = 0;
    var cumulative_totals = [];
    var cumulative_percent = [];
    for (var i = 0; i &lt; series0.data.length; i++) {
    total = parseFloat(total) + parseFloat(series0.data[i].y);
    cumulative_totals.push(total);
    }
    var cuml_percent = 0;
    for (var i = 0; i &lt; series0.data.length; i++) {
    var percent = parseFloat(series0.data[i].y) / parseFloat(total) * 100;
    cuml_percent = parseFloat(cuml_percent) + parseFloat(percent);
    var s = cuml_percent.toString();
    var k = s.indexOf('.');
    if (k &gt;= 0) {
    var sub = s.substring(0, k);
    var rem = s.substring(k + 1);
    if (rem.length &gt; 2) {
    sub += '.';
    for (var j = 0; j &lt; 2; j++)
    sub += rem[j];
    } else
    sub += '.' + rem;
    cumulative_percent.push(sub);
    } else
    cumulative_percent.push(s);
    }
    var cumulative_series = {};
    cumulative_series.type = 'line';
    cumulative_series.name = 'pareto_series';
    cumulative_series.data = [];
    for (var i = 0; i &lt; cumulative_totals.length; i++) {
    var dataPoint = {};
    dataPoint['y'] = cumulative_totals[i];
    dataPoint['percent'] = cumulative_percent[i];
    cumulative_series.data.push(dataPoint);
    }
    hc_addParetoChartOptions(hcOptions, chartProps, total, isUI);
    return cumulative_series;
    }
    function hc_createSingleSeriesDataPt(chartProps, indx, seriesData, isUI, chartSerieProps, color, hcOptions) {
    var yVal;
    var dataPoint = {};
    dataPoint['legend_label_max_length'] = chartProps.report_properties.legend_label_max_size;
    dataPoint['name'] = seriesData.xvalues[indx];
    if (chartProps.origXValues[indx] == chartProps.otherKey)
    dataPoint['name'] = chartProps.xValues[indx];
    if (seriesData.yvalues[indx] !== undefined &amp;&amp; seriesData.yvalues[indx])
    yVal = parseFloat(seriesData.yvalues[indx]);
    else
    yVal = null;
    var dataPointName = dataPoint['name'];
    if (dataPointName.length &gt; chartProps.maxAllowedLabelLen) {
    dataPointName = dataPointName.substring(0, chartProps.maxAllowedLabelLen - 3) + '...';
    }
    if(hc_isSlowMetricChart(hcOptions, seriesData))
    dataPoint['x'] = hc_convertDateTimeFormatToUnixTime(seriesData.xvalues[indx]);
    else
    dataPoint['x'] = indx;
    dataPoint['y'] = yVal;
    if (!isLineType(seriesData.series_plot_type))
    dataPoint['color'] = seriesData.colors[indx];
    else
    dataPoint['color'] = color;
    dataPoint['y_tooltip'] = seriesData.ydisplayvalues[indx];
    dataPoint['valid'] = (seriesData.valids != undefined ? (seriesData.valids[indx] === "true") : true );
    if (isUI) {
    dataPoint['table'] = seriesData.table_name;
    dataPoint['table_display_plural'] = seriesData.table_display_plural;
    if (chartProps.origXValues[indx] == chartProps.otherKey)
    dataPoint['isOther'] = true;
    else
    dataPoint['isOther'] = false;
    if (chartProps.chartType == 'hist') {
    dataPoint['tt_label_min'] = chartProps.report_properties.hist_min;
    dataPoint['tt_label_max'] = chartProps.report_properties.hist_max;
    dataPoint['tt_label_cnt'] = chartProps.report_properties.hist_count;
    }
    if ('percents_from_count' in chartProps.report_properties &amp;&amp; chartProps.report_properties.percents_from_count)
    dataPoint['percent_count'] = true;
    else
    dataPoint['percent_count'] = false;
    if ('percentages' in seriesData &amp;&amp; seriesData.percentages[indx])
    dataPoint['percent'] = seriesData.percentages[indx];
    generateSeriesUrlInfo(dataPoint, indx, dataPoint['isOther'], seriesData, chartSerieProps, undefined, chartProps, seriesData['table_name']);
    if ('list_ui_view_name' in chartSerieProps)
    dataPoint['list_ui_view_name'] = chartSerieProps.list_ui_view_name;
    if ('report_drilldown' in chartSerieProps)
    dataPoint['report_drilldown'] = chartSerieProps.report_drilldown;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties){
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    } else if (chartProps.chartType == 'pie' || chartProps.chartType == 'semi_donut' || chartProps.chartType == 'donut' ||
    chartProps.chartType == 'funnel' || chartProps.chartType == 'pyramid') {
    if ('percentages' in seriesData)
    dataPoint['percent'] = seriesData.percentages[indx];
    }
    hc_addPropsForDataLabelsTruncation(dataPoint, chartProps.report_properties);
    return dataPoint;
    }
    function isVariablesGroupby(groupby) {
    return groupby &amp;&amp; groupby.startsWith('variables.');
    }
    function removeNonConditionTerms(filter) {
    var ignoreExpressions = [/^\s*$/, /^ORDERBY/, /^ORDERBYDESC/, /^GROUPBY/, /^TRENDBY/];
    if (!filter)
    return "";
    var terms = filter.split('^');
    var validTerms = [];
    for (var i = 0; i &lt; terms.length; i++) {
    if (isToBeIgnored(terms[i], ignoreExpressions))
    continue;
    validTerms.push(terms[i]);
    }
    var validFilter = validTerms.join('^');
    if (validFilter &amp;&amp; validFilter.endsWith('^EQ'))
    validFilter = validFilter.substring(0, validFilter.length - 3);
    return validFilter;
    }
    function isToBeIgnored(value, ignoreExpressions) {
    for (i = 0; i &lt; ignoreExpressions.length; i++) {
    if (ignoreExpressions[i].test(value))
    return true;
    }
    return false;
    }
    function combineQueries(filter, aggregateQuery) {
    if (!filter)
    return aggregateQuery;
    if (!aggregateQuery)
    return filter;
    var filterQueries = filter.split('^NQ');
    for (var i = 0; i &lt; filterQueries.length; i++)
    filterQueries[i] += "^" + aggregateQuery;
    return filterQueries.join("^NQ");
    }
    function generateSeriesUrlInfo(dataPoint, indx, isOther, seriesData, chartSerieProps, aggregateQueryPerSeries, chartProps, tableName) {
    if (isOther) {
    dataPoint['click_url_info'] = generateOtherUrlInfo(indx, chartProps, tableName, chartSerieProps);
    return;
    }
    var categoryItemCondition = '';
    if (isVariablesGroupby(chartSerieProps.groupby) &amp;&amp; chartSerieProps.sc_groupby_item_id)
    categoryItemCondition = "^cat_item=" + chartSerieProps.sc_groupby_item_id;
    if (!categoryItemCondition &amp;&amp; chartSerieProps.stackby &amp;&amp;
    isVariablesGroupby(chartSerieProps.stackby) &amp;&amp; chartSerieProps.sc_stackby_item_id) {
    categoryItemCondition = "^cat_item=" + chartSerieProps.sc_stackby_item_id;
    }
    var aggregateQuery = aggregateQueryPerSeries ? seriesData[indx].aggregate_query : seriesData.aggregate_query[indx];
    var filter = removeNonConditionTerms(chartSerieProps.filter);
    dataPoint['click_url_info'] = combineQueries(combineQueries(filter, categoryItemCondition), aggregateQuery);
    var publisherFilter = removeNonConditionTerms(chartProps.report_properties.publisher_filter);
    dataPoint['publisher_filter'] = combineQueries(combineQueries(publisherFilter, categoryItemCondition), aggregateQuery);
    }
    function generateOtherUrlInfo(indx, chartProps, tableName, chartSerieProps){
    var urlObj = {};
    var urlString = 'report_viewer.do?';
    var pagenum = parseInt(chartProps.page_num) + 1;
    if(chartSerieProps.report_id){
    urlObj = {
    "jvar_report_id" : [chartSerieProps.report_id],
    "sysparm_other_series" :  [chartSerieProps.report_id],
    "sysparm_page_num" : [pagenum],
    };
    if(chartProps.interactive_report)
    urlObj.sysparm_interactive_report = chartProps.interactive_report;
    }else{
    var reportProps = chartProps.report_properties;
    if(reportProps){
    urlObj = {
    "sysparm_bar_unstack" : [chartSerieProps.bar_unstack],
    "sysparm_show_chart_total" : [reportProps.show_chart_total],
    "sysparm_show_other" : [chartProps.show_other],
    "sysparm_lower_limit" : [reportProps.lower_limit],
    "sysparm_title" : [chartProps.title],
    "sysparm_table" : [tableName],
    "sysparm_compute_percent" : [reportProps.percents_from_count],
    "sysparm_custom_chart_size" : [reportProps.custom_chart_size],
    "sysparm_color_palette" : [chartSerieProps.color_palette],
    "sysparm_gauge_autoscale" : [reportProps.gauge_autoscale],
    "sysparm_aggregate" : [chartProps.aggType],
    "sysparm_show_marker" : [chartSerieProps.show_marker],
    "sysparm_show_chart_data_label" : [reportProps.show_chart_data_label],
    "sysparm_page_num" : [pagenum],
    "sysparm_type" : [chartProps.chartType],
    "sysparm_chart_size" : [chartProps.chartSize],
    "sysparm_direction" : [reportProps.direction],
    "sysparm_field" : [chartSerieProps.groupby],
    "sysparm_set_color" : [chartSerieProps.set_color],
    "sysparm_funnel_neck_percent" : [reportProps.funnel_neck_percent],
    "sysparm_from" : [reportProps.from],
    "sysparm_donut_width_percent" : [reportProps.donut_width_percent],
    "sysparm_others" : [chartProps.other_threshold],
    "sysparm_chart_color" : [chartSerieProps.color],
    "sysparm_display_grid" : [chartProps.display_grid],
    "sysparm_to" : [reportProps.to],
    "sysparm_upper_limit" : [reportProps.upper_limit],
    "sysparm_box_field" : [chartProps.box_field],
    "sysparm_query" : [chartProps.filter_with_orderby],
    "sysparm_sumfield" : [chartProps.agg_field],
    "sysparm_stack_field" : [chartProps.stack_field],
    "sysparm_trend_field" : [chartProps.trend_field],
    "sysparm_trend_interval" : [chartProps.trend_interval],
    "sysparm_chart_colors" : [chartProps.colors]
    };
    if(reportProps.custom_chart_size){
    urlObj.sysparm_custom_chart_height = chartProps.chart_height;
    urlObj.sysparm_custom_chart_width = chartProps.chart_width;
    }
    }
    }
    return urlString+jQuery.param(urlObj,true);
    }
    function hc_createSingleSeriesDataLocationPt(chartProps, indx, seriesData, isUI, chartSerieProps) {
    if(typeof seriesData.locations[indx] === 'undefined')
    return;
    var dataPoint = {};
    dataPoint['legend_label_max_length'] = chartProps.report_properties.legend_label_max_size;
    dataPoint['name'] = seriesData.locations[indx].city;
    dataPoint['street'] = seriesData.locations[indx].street;
    dataPoint['city'] = seriesData.locations[indx].city;
    dataPoint['state'] = seriesData.locations[indx].state;
    dataPoint['country'] = seriesData.locations[indx].country;
    dataPoint['lat'] = seriesData.locations[indx].latitude;
    dataPoint['lon'] = seriesData.locations[indx].longitude;
    dataPoint['valid'] = (seriesData.valids != undefined ? (seriesData.valids[indx] === "true") : true );
    dataPoint['y_tooltip'] = seriesData.ydisplayvalues[indx];
    if (isUI) {
    dataPoint['table'] = seriesData.table_name;
    dataPoint['table_display_plural'] = seriesData.table_display_plural;
    if (chartProps.origXValues[indx] == chartProps.otherKey)
    dataPoint['isOther'] = true;
    else
    dataPoint['isOther'] = false;
    if ('percents_from_count' in chartProps.report_properties &amp;&amp; chartProps.report_properties.percents_from_count)
    dataPoint['percent_count'] = true;
    else
    dataPoint['percent_count'] = false;
    if ('percentages' in seriesData &amp;&amp; seriesData.percentages[indx])
    dataPoint['percent'] = seriesData.percentages[indx];
    if ('click_url_info' in seriesData &amp;&amp; seriesData.click_url_info[indx])
    dataPoint['click_url_info'] = seriesData.click_url_info[indx];
    if ('list_ui_view_name' in chartSerieProps)
    dataPoint['list_ui_view_name'] = chartSerieProps.list_ui_view_name;
    if ('report_drilldown' in chartSerieProps)
    dataPoint['report_drilldown'] = chartSerieProps.report_drilldown;
    if ('report_drilldown_zoom' in chartSerieProps)
    dataPoint['report_drilldown_zoom'] = chartSerieProps.report_drilldown_zoom;
    if ('report_drilldown_map' in chartSerieProps)
    dataPoint['report_drilldown_map'] = chartSerieProps.report_drilldown_map;
    dataPoint['isLatLon'] = true;
    dataPoint['show_data_label'] = chartSerieProps.show_chart_data_label;
    dataPoint['show_geographical_label'] = chartSerieProps.show_geographical_label;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties){
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    }
    hc_addPropsForDataLabelsTruncation(dataPoint, chartProps.report_properties);
    return dataPoint;
    }
    function hc_createSingleSeriesDataLocationHcKeyPt(chartProps, indx, seriesData, isUI, chartSerieProps) {
    if(typeof seriesData.locations[indx] === 'undefined')
    return;
    var dataPoint = {};
    dataPoint['name'] = seriesData.locations[indx].name;
    dataPoint['y_tooltip'] = seriesData.ydisplayvalues[indx];
    dataPoint['value'] = seriesData.yvalues[indx];
    dataPoint['display_value'] = seriesData.ydisplayvalues[indx];
    if (isUI) {
    dataPoint['table'] = seriesData.table_name;
    dataPoint['table_display_plural'] = seriesData.table_display_plural;
    if (chartProps.origXValues[indx] == chartProps.otherKey)
    dataPoint['isOther'] = true;
    else
    dataPoint['isOther'] = false;
    if ('percents_from_count' in chartProps.report_properties &amp;&amp; chartProps.report_properties.percents_from_count)
    dataPoint['percent_count'] = true;
    else
    dataPoint['percent_count'] = false;
    if ('percentages' in seriesData &amp;&amp; seriesData.percentages[indx])
    dataPoint['percent'] = seriesData.percentages[indx];
    if ('click_url_info' in seriesData &amp;&amp; seriesData.click_url_info[indx])
    dataPoint['click_url_info'] = seriesData.click_url_info[indx];
    if ('list_ui_view_name' in chartSerieProps)
    dataPoint['list_ui_view_name'] = chartSerieProps.list_ui_view_name;
    if ('report_drilldown' in chartSerieProps)
    dataPoint['report_drilldown'] = chartSerieProps.report_drilldown;
    if ('report_drilldown_zoom' in chartSerieProps)
    dataPoint['report_drilldown_zoom'] = chartSerieProps.report_drilldown_zoom;
    if ('report_drilldown_map' in chartSerieProps)
    dataPoint['report_drilldown_map'] = chartSerieProps.report_drilldown_map;
    dataPoint['isLatLon'] = false;
    dataPoint['show_data_label'] = chartSerieProps.show_chart_data_label;
    dataPoint['show_geographical_label'] = chartSerieProps.show_geographical_label;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties) {
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    }
    return dataPoint;
    }
    function hc_createHeatmapSeriesDataPt(chartProps, indx, seriesData, chartSerieProps, isUI) {
    var xIndex = 0, yIndex = 1, valueIndex = 2, displayValueIndex = 3, tooltipIndex = 4, clickUrlIndex = 5;
    var val;
    var dataPoint = {};
    dataPoint['legend_label_max_length'] = chartProps.report_properties.legend_label_max_size;
    dataPoint['name'] = chartProps.origXValues[indx];
    dataPoint['x'] = seriesData.series.data[indx][xIndex];
    dataPoint['y'] = seriesData.series.data[indx][yIndex];
    if (seriesData.series.data[indx][valueIndex] === null)
    val = 0;
    else
    val = parseFloat(seriesData.series.data[indx][valueIndex]);
    dataPoint['value'] = val;
    if (seriesData.series.data[indx][displayValueIndex])
    dataPoint['value_display'] = seriesData.series.data[indx][displayValueIndex];
    else
    dataPoint['value_display'] = '0';
    if (dataPoint['value_display'] === '0' &amp;&amp; chartProps.report_properties.show_zero === false)
    dataPoint['value_display'] = '';
    if (isUI) {
    dataPoint['table'] = seriesData.table_name;
    dataPoint['isOther'] = false;
    dataPoint['percent_count'] = false;
    if (seriesData.series.data[indx][clickUrlIndex]) {
    dataPoint['click_url_info'] = generateHeatMapClickUrl(seriesData, indx, clickUrlIndex);
    }
    if (seriesData.series.data[indx][tooltipIndex])
    dataPoint['value_tooltip'] = seriesData.series.data[indx][tooltipIndex];
    if ('list_ui_view_name' in chartSerieProps)
    dataPoint['list_ui_view_name'] = chartSerieProps.list_ui_view_name;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties) {
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    if ('report_drilldown' in chartSerieProps)
    dataPoint['report_drilldown'] = chartSerieProps.report_drilldown;
    }
    hc_addPropsForDataLabelsTruncation(dataPoint, chartProps.report_properties);
    return dataPoint;
    }
    function generateHeatMapClickUrl(seriesData, indx, clickUrlIndex) {
    var showOther = seriesData.sysparm_show_other;
    var xAxisCategoryCount = seriesData.xAxisCategories.length;
    var aggregateQuery = seriesData.series.data[indx][clickUrlIndex];
    var filter = removeNonConditionTerms(seriesData.filter);
    if (showOther &amp;&amp; (indx + 1) % xAxisCategoryCount === 0 &amp;&amp; seriesData.otherQuery) {
    aggregateQuery = aggregateQuery + "^" + seriesData.otherQuery;
    }
    return combineQueries(filter, aggregateQuery);
    }
    function hc_createBubbleSeriesDataPt(chartProps, indx, seriesData, chartSerieProps, isUI, table_name) {
    var dataPoint = {};
    dataPoint['name'] = chartProps.origXValues[indx];
    dataPoint['x'] = seriesData[indx]['x'];
    dataPoint['y'] = seriesData[indx]['y'];
    dataPoint['z'] = seriesData[indx]['z'];
    dataPoint['value_display'] = seriesData[indx]['value_display'];
    if (isUI) {
    dataPoint['table'] = table_name;
    generateSeriesUrlInfo(dataPoint, indx, false, seriesData, chartSerieProps, true, chartProps, dataPoint['table']);
    dataPoint['value_tooltip'] = seriesData[indx]['value_tooltip'];
    if ('list_ui_view_name' in chartSerieProps)
    dataPoint['list_ui_view_name'] = chartSerieProps.list_ui_view_name;
    if ('report_drilldown' in chartSerieProps)
    dataPoint['report_drilldown'] = chartSerieProps.report_drilldown;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties) {
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    }
    return dataPoint;
    }
    function hc_initStackedSeriesDataPoint(indx, indx2, x2Vals, x2Colors, chartProps, tblName, tblDispPlural, isUI, serieProps, seriesData, categoryIndx) {
    var dataPoint = {};
    if (categoryIndx != undefined)
    dataPoint['x'] = categoryIndx;
    dataPoint['y'] = serieProps.use_null ? null : 0;
    dataPoint['name'] = x2Vals[indx].displayValue;
    dataPoint['color'] = x2Colors[indx];
    dataPoint['table'] = tblName;
    dataPoint['table_display_plural'] = tblDispPlural;
    dataPoint['isOther'] = false;
    if (chartProps.origXValues[indx2] == chartProps.otherKey)
    dataPoint['isOther'] = true;
    dataPoint['valid'] = false;
    hc_addPropsForDataLabelsTruncation(dataPoint, serieProps);
    return dataPoint;
    }
    function hc_fillStackedSeriesDataPoint(dataPoint, indx, subSeriesData, chartProps, isUI, chartPropsSerie, categoryIndx, isSlowMetricTable, datetime) {
    dataPoint['valid'] = true;
    if ('percents_from_count' in chartPropsSerie &amp;&amp; chartPropsSerie.percents_from_count)
    dataPoint['percent_count'] = true;
    else
    dataPoint['percent_count'] = false;
    if (categoryIndx != undefined)
    dataPoint['x'] = categoryIndx;
    dataPoint['y'] = subSeriesData.yvalues[indx] ? parseFloat(subSeriesData.yvalues[indx]) : null;
    dataPoint['y_tooltip'] = subSeriesData.ydisplayvalues[indx];
    dataPoint['percent'] = subSeriesData.percentages[indx];
    if (isUI) {
    if (dataPoint['isOther'] || (subSeriesData.aggregate_query &amp;&amp; subSeriesData.aggregate_query[indx]))
    generateSeriesUrlInfo(dataPoint, indx, dataPoint['isOther'], subSeriesData, chartPropsSerie, undefined, chartProps, dataPoint['table']);
    dataPoint['list_ui_view_name'] = chartPropsSerie.list_ui_view_name;
    dataPoint['report_drilldown'] = chartPropsSerie.report_drilldown;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties) {
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    }
    if(isSlowMetricTable) {
    dataPoint['x'] = hc_convertDateTimeFormatToUnixTime(datetime);
    }
    }
    function hc_createLineSeriesData(hcOptions, chartData, chartProps, isUI) {
    return hc_createMultipleSeriesData(hcOptions, chartData, chartProps, isUI);
    }
    function hc_createControlSeriesData(hcOptions, chartData, chartProps, isUI) {
    var seriesData = chartData.series[0];
    var chartSerieProps = chartData.report_properties_series[0];
    var series = [];
    if (('yaxis_duration' in seriesData) &amp;&amp; seriesData.yaxis_duration &amp;&amp; hc_hasAxes(chartProps.chartType)) {
    if (isUI)
    hcOptions.yAxis[0].labels.formatter = hc_formatDurationLabel;
    else
    hcOptions.yAxis[0].labels.formatter = 'hc_formatDurationLabel';
    }
    var dataPtSeries = {};
    dataPtSeries.name = 'Data Points';
    dataPtSeries.color = 'black';
    dataPtSeries.data = [];
    for (var j = 0; j &lt; chartProps.xValues.length; j++) {
    var dataPoint = {};
    dataPoint['y'] = seriesData.yvalues[j] ? parseFloat(seriesData.yvalues[j]) : null;
    dataPoint['y_tooltip'] = seriesData.ydisplayvalues[j];
    dataPoint['table'] = seriesData.table_name;
    dataPoint['table_display_plural'] = seriesData.table_display_plural;
    if (isUI) {
    if ('aggregate_query' in seriesData)
    generateSeriesUrlInfo(dataPoint, j, false, seriesData, chartSerieProps, false, chartProps);
    if ('list_ui_view_name' in chartSerieProps)
    dataPoint['list_ui_view_name'] = chartSerieProps.list_ui_view_name;
    if ('report_drilldown' in chartSerieProps)
    dataPoint['report_drilldown'] = chartSerieProps.report_drilldown;
    dataPoint['drill_open_new_win'] = false;
    if ('drill_open_new_win' in chartProps.report_properties)
    dataPoint['drill_open_new_win'] = chartProps.report_properties.drill_open_new_win;
    if ('widget_navigation' in chartProps.report_properties) {
    dataPoint['widget_navigation'] = chartProps.report_properties.widget_navigation;
    dataPoint['widget_navigation_tooltip_text'] = chartProps.report_properties.translation.click_to_open;
    }
    }
    hc_addPropsForDataLabelsTruncation(dataPoint, chartProps.report_properties);
    dataPtSeries.data.push(dataPoint);
    }
    series.push(dataPtSeries);
    var trendLineSeries = {};
    trendLineSeries.name = 'Trend Line';
    if (isUI &amp;&amp; isAccessibilityPatternsEnabled()) {
    trendLineSeries.dashStyle = 'LongDashDot'
    trendLineSeries.color = '#000';
    }
    else
    trendLineSeries.color = 'yellow';
    trendLineSeries.data = [];
    for (var j = 0; j &lt; chartProps.xValues.length; j++) {
    var dataPt = {};
    var y = parseFloat(seriesData.trendvalues[j]);
    dataPt.y = y;
    dataPt.y_tooltip = seriesData.trenddisplayvalues[j];
    hc_addPropsForDataLabelsTruncation(dataPt, chartProps.report_properties);
    trendLineSeries.data.push(dataPt);
    }
    series.push(trendLineSeries);
    var controlVals = seriesData.controlvalues;
    var displayVals = [];
    displayVals.push(seriesData.controldisplayvalues[0]);
    displayVals.push(seriesData.controldisplayvalues[1]);
    displayVals.push(seriesData.controldisplayvalues[2]);
    displayVals.push(seriesData.controldisplayvalues[3]);
    displayVals.push(seriesData.controldisplayvalues[4]);
    series.push(hc_createControlPlotLine('-3Z', 'red', parseFloat(controlVals[0]), displayVals[0], chartProps, isUI));
    series.push(hc_createControlPlotLine('-2Z', 'green', parseFloat(controlVals[1]), displayVals[1], chartProps, isUI));
    series.push(hc_createControlPlotLine('Mean', 'blue', parseFloat(controlVals[2]), displayVals[2], chartProps, isUI));
    series.push(hc_createControlPlotLine('+2Z', 'green', parseFloat(controlVals[3]), displayVals[3], chartProps, isUI));
    series.push(hc_createControlPlotLine('+3Z', 'red', parseFloat(controlVals[4]), displayVals[4], chartProps, isUI));
    return series;
    }
    function hc_createControlPlotLine(label, color, val, disp, chartProps, isUI) {
    var series = {};
    series.name = label;
    if (isUI &amp;&amp; isAccessibilityPatternsEnabled()) {
    if (color === 'red')
    series.dashStyle = 'Dot';
    else if (color === 'green')
    series.dashStyle = 'ShortDash';
    else
    series.dashStyle = 'Dash';
    series.color = '#000';
    }
    else
    series.color = color;
    series.data = [];
    for (var j = 0; j &lt; chartProps.xValues.length; j++) {
    var dataPt = {};
    dataPt.y = val;
    dataPt.y_tooltip = disp;
    dataPt.marker = {};
    dataPt.marker.enabled = false;
    hc_addPropsForDataLabelsTruncation(dataPt, chartProps.report_properties);
    series.data.push(dataPt);
    }
    return series;
    }
    function hc_createBoxPlotData(hcOptions, chartData, chartProps, isUI) {
    var seriesData = chartData.series[0];
    var seriesName = seriesData.series_name + ':box';
    if (('yaxis_duration' in seriesData) &amp;&amp; seriesData.yaxis_duration &amp;&amp; hc_hasAxes(chartProps.chartType)) {
    if (isUI)
    hcOptions.yAxis[0].labels.formatter = hc_formatDurationLabel;
    else
    hcOptions.yAxis[0].labels.formatter = 'hc_formatDurationLabel';
    }
    var boxseries = {};
    boxseries.name = seriesName;
    if ('box_color' in chartProps.report_properties)
    boxseries.color = chartProps.report_properties.box_color;
    boxseries.data = [];
    for (var j = 0; j &lt; chartProps.xValues.length; j++) {
    var boxValArray = [];
    var boxDisplayValArray = [];
    boxDisplayValArray = seriesData.boxdisplayvalues[j];
    if (isUI)
    boxValArray = seriesData.boxvalues[j].split(',');
    else
    boxValArray = hc_strToArray(seriesData.boxvalues[j], ',');
    var boxVals = {};
    boxVals.low = parseFloat(boxValArray[0]);
    boxVals.q1 = parseFloat(boxValArray[1]);
    boxVals.median = parseFloat(boxValArray[2]);
    boxVals.q3 = parseFloat(boxValArray[3]);
    boxVals.high = parseFloat(boxValArray[4]);
    boxVals.low_display = boxDisplayValArray[0];
    boxVals.q1_display = boxDisplayValArray[1];
    boxVals.median_display = boxDisplayValArray[2];
    boxVals.q3_display = boxDisplayValArray[3];
    boxVals.high_display = boxDisplayValArray[4];
    boxseries.data.push(boxVals);
    }
    if (isUI) {
    boxseries.tooltip = {};
    boxseries.tooltip.pointFormat = '&lt;span style="color:{series.color};font-weight:bold"&gt;{series.name}&lt;/span&gt;&lt;br/&gt;' +
    chartProps.report_properties.box_max + ': {point.high_display}&lt;br/&gt;' +
    chartProps.report_properties.box_q3 + ': {point.q3_display}&lt;br/&gt;' +
    chartProps.report_properties.box_median + ': {point.median_display}&lt;br/&gt;' +
    chartProps.report_properties.box_q1 + ': {point.q1_display}&lt;br/&gt;' +
    chartProps.report_properties.box_min + ': {point.low_display}&lt;br/&gt;';
    }
    return boxseries;
    }
    function hc_createBoxMeanData(hcOptions, chartData, chartProps, isUI) {
    var seriesData = chartData.series[0];
    var seriesName = seriesData.series_name + ':mean';
    var meanseries = {};
    meanseries.name = seriesName;
    meanseries.type = 'scatter';
    if ('box_mean_color' in chartProps.report_properties)
    meanseries.color = chartProps.report_properties.box_mean_color;
    meanseries.data = [];
    for (var j = 0; j &lt; chartProps.xValues.length; j++) {
    var dataPoint = [];
    dataPoint.push(j);
    dataPoint.push(parseFloat(seriesData.yvalues[j]));
    meanseries.data.push(dataPoint);
    }
    if (isUI) {
    meanseries.tooltip = {};
    meanseries.tooltip.pointFormat = chartProps.report_properties.box_mean + ': {point.y}';
    }
    return meanseries;
    }
    function hc_isPresentInArray(arr, key) {
    for (var i = 0; i &lt; arr.length; i++) {
    if (arr[i] === key)
    return i;
    }
    return -1;
    }
    function hc_strToArray(str, delim) {
    var arr = [];
    var indx = str.indexOf(delim);
    while (indx &gt;= 0) {
    var elem = str.substring(0, indx);
    arr.push(elem);
    str = str.substring(indx + 1);
    indx = str.indexOf(delim);
    }
    str = str.trim();
    if (str.length &gt; 0)
    arr.push(str);
    return arr;
    }
    function hc_dataPointSelected(event) {
    var gridWindow = getGridWindow(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id);
    gridWindow.interactiveFilters = gridWindow.interactiveFilters || {};
    if (typeof this.publisher_filter === 'undefined' || event.accumulate === 'preventDataPointSelect' || isFilterAlreadyPublished(gridWindow))
    return;
    var queryCondition = this.publisher_filter.replace('^','^EQ^');
    var uniqueId = getDashboardMessageHandlerId(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id) + queryCondition;
    var filterMessage = hc_interactiveFilterMessage(uniqueId,this.table,queryCondition);
    filterMessage.sliced = true;
    if (gridWindow.queryCondition) {
    var oldUniqueId = getDashboardMessageHandlerId(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id) + gridWindow.queryCondition;
    delete gridWindow.interactiveFilters[oldUniqueId];
    }
    gridWindow.queryCondition = queryCondition;
    gridWindow.interactiveFilters[uniqueId] = filterMessage;
    initializeInteractiveChartStack(oldUniqueId,filterMessage,gridWindow);
    hc_dataPointPublishFilter(this.series.chart.userOptions.report_id,gridWindow.interactiveFilters,gridWindow._dashboardMessageHandler);
    }
    function hc_dataPointUnselected(event) {
    var gridWindow = getGridWindow(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id);
    if (typeof this.publisher_filter === 'undefined' || (typeof event.accumulate === 'undefined' &amp;&amp; event.type === 'unselect')
    || isFilterAlreadyPublished(gridWindow))
    return;
    gridWindow.interactiveFilters = gridWindow.interactiveFilters || {};
    var queryCondition = this.publisher_filter.replace('^','^EQ^');
    var uniqueId = getDashboardMessageHandlerId(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id) + queryCondition;
    delete gridWindow.interactiveFilters[uniqueId];
    popFromInteractiveChartStack();
    hc_dataPointPublishFilter(this.series.chart.userOptions.report_id,gridWindow.interactiveFilters,gridWindow._dashboardMessageHandler);
    }
    function hc_FilterPublisher(reportId, filter, dashboardMessageHandler) {
    var filterMessages = [];
    for(var key in filter){
    filterMessages.push(filter[key]);
    }
    var handler = dashboardMessageHandler || new DashboardMessageHandler(reportId);
    var isInCanvas = window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.interactiveFilters &amp;&amp; SNC.canvas.isGridCanvasActive;
    if(filterMessages.length&gt;0){
    if(isInCanvas)
    SNC.canvas.interactiveFilters.addFilterToDefaultValues(reportId,filterMessages);
    handler.publishMessage(filterMessages);
    }else{
    if(isInCanvas)
    SNC.canvas.interactiveFilters.removeFilterFromDefaultValues(reportId);
    handler.removeFilter();
    }
    };
    function hc_dataPointPublishFilter(reportId, filter, dashboardMessageHandler) {
    var currentFilterPublishedTime = Date.now();
    if(isRenderedInCanvas()){
    SNC.canvas.chartsActingAsFilters = SNC.canvas.chartsActingAsFilters || {};
    SNC.canvas.chartsActingAsFilters.lastPublishTime =  SNC.canvas.chartsActingAsFilters.currentPublishTime || currentFilterPublishedTime;
    SNC.canvas.chartsActingAsFilters.currentPublishTime = currentFilterPublishedTime;
    SNC.canvas.chartsActingAsFilters.previousId = SNC.canvas.chartsActingAsFilters.currentId || null;
    SNC.canvas.chartsActingAsFilters.currentId = reportId || null;
    }
    hc_FilterPublisher(reportId, filter, dashboardMessageHandler);
    }
    function hc_interactiveFilterMessage(uniqueId,table,filter){
    var filter_message = {};
    filter_message.id = uniqueId;
    filter_message.table = table;
    filter_message.filter = filter;
    return filter_message;
    }
    function hc_dataPointLegendClick(event) {
    var gridWindow = getGridWindow(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id);
    gridWindow.interactiveFilters = gridWindow.interactiveFilters || {};
    var uniqueId = getDashboardMessageHandlerId(this.series.chart.userOptions.publisher_id, this.series.chart.userOptions.report_id);
    var filtersFromLegend = {};
    if (gridWindow.filtersFromLegend)
    filtersFromLegend = gridWindow.filtersFromLegend;
    var selected = jQuery.grep(this.series.points, function(obj) {
    if(event.target == obj &amp;&amp; obj.visible)
    filtersFromLegend[obj.publisher_filter] = obj.publisher_filter;
    return event.target == obj ? !obj.visible : obj.visible
    });
    if (selected.length == this.series.points.length) {
    delete gridWindow.interactiveFilters[uniqueId];
    delete gridWindow.filtersFromLegend;
    } else {
    var queryArr = jQuery.map(selected, function(val, index) {
    return val.publisher_filter;
    });
    var queryCondition = queryArr.join('^NQ');
    var filterMessage = hc_interactiveFilterMessage(uniqueId,this.table,queryCondition);
    filterMessage.isFromLegend = true;
    gridWindow.interactiveFilters[uniqueId] = filterMessage;
    gridWindow.filtersFromLegend = filtersFromLegend;
    }
    hc_dataPointPublishFilter(this.series.chart.userOptions.report_id,gridWindow.interactiveFilters);
    }
    function getDashboardMessageHandlerId(publisherId, reportId) {
    var dashboardMesssageHandlerId = '';
    if (typeof glideGrid != "undefined") {
    var gridWindow = glideGrid.getWindowByGaugeId(publisherId);
    if (typeof gridWindow != 'undefined' &amp;&amp; gridWindow != null &amp;&amp; gridWindow)
    dashboardMesssageHandlerId = publisherId;
    else
    dashboardMesssageHandlerId = reportId;
    } else if (window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive) {
    var gridWindow = SNC.canvas.canvasUtils.getGlideWindow(reportId);
    if (typeof gridWindow != 'undefined' &amp;&amp; gridWindow != null &amp;&amp; gridWindow)
    dashboardMesssageHandlerId = reportId;
    else
    dashboardMesssageHandlerId = publisherId;
    }
    return dashboardMesssageHandlerId;
    }
    function getGridWindow(publisherId, reportId) {
    var gridWindow;
    if (typeof glideGrid != "undefined") {
    gridWindow = glideGrid.getWindowByGaugeId(publisherId);
    if(typeof gridWindow === 'undefined'|| gridWindow == null){
    gridWindow = glideGrid.getWindowByGaugeId(reportId);
    }
    } else if (window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive) {
    gridWindow = SNC.canvas.canvasUtils.getGlideWindow(reportId);
    }else{
    gridWindow = glideGrid.getWindowByGaugeId(reportId);
    }
    return gridWindow;
    }
    function hc_dataPointClicked(event) {
    var point = event.point || event.target;
    if (!point || point.valid === false || typeof point.click_url_info === "undefined" )
    return;
    var openNewTab;
    if (event.ctrlKey || event.metaKey)
    openNewTab = true;
    if (point.widget_navigation &amp;&amp; point.widget_navigation.length) {
    var widgetNav = point.widget_navigation[0];
    window.open(widgetNav.value, openNewTab ? '_blank' : '_self');
    } else if (point.isOther)
    openUrl(event, point.click_url_info);
    else {
    var element = event.srcElement || event.target;
    if (event.target &amp;&amp; event.target.graphic)
    element = event.target.graphic.element;
    var hcKey = '';
    if (typeof point.isLatLon !== 'undefined' &amp;&amp; !point.isLatLon)
    hcKey = point.properties['hc-key'];
    generateDataPointClickUrl(event, element, point.report_drilldown, point.table, point.click_url_info, point.list_ui_view_name, point.drill_open_new_win, point.isOther,
    (point.report_drilldown_zoom ? hcKey: null), point.report_drilldown_map, point.show_data_label, point.show_geographical_label);
    }
    }
    function hc_formatToolTip() {
    var tt = '';
    var parenthesisOpen = false;
    if (typeof this.point.valid == 'undefined' || this.point.valid === true) {
    if (this.series.name == 'pareto_series')
    tt = this.point.percent + '%';
    else {
    tt = this.x + ' = ' + this.point.y_tooltip + '&lt;br/&gt;(' + this.point.percent + '%';
    parenthesisOpen = true;
    }
    if (this.point.percent_count)
    tt += ' of ' + this.point.table_display_plural;
    if (parenthesisOpen)
    tt += ')';
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    return false;
    }
    function hc_formatGeneralLineBarToolTip(event) {
    var typeTooltip = this.series.options.tooltip.tooltipText;
    if ('stacked' === typeTooltip) {
    if (this.point.valid) {
    var xValue = this.x;
    if(hc_isSlowMetricChart(this.series.chart.options))
    xValue = hc_formatDatetimeString(this.x);
    var tt = xValue + ', ' + this.point.name + ' = ' + this.point.y_tooltip + '&lt;br/&gt;(' + this.point.percent + '%';
    if (this.point.percent_count)
    tt += ' of ' + this.point.table_display_plural + ')';
    else
    tt += ')';
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    return false;
    } else {
    var tt = '';
    var parenthesisOpen = false;
    if (typeof this.point.valid == 'undefined' || this.point.valid === true) {
    if (this.series.name == 'pareto_series')
    tt = this.point.percent + '%';
    else {
    var xValue = this.x;
    if(hc_isSlowMetricChart(this.series.chart.options))
    xValue = hc_formatDatetimeString(this.x);
    tt = xValue + ' = ' + this.point.y_tooltip + '&lt;br/&gt;(' + this.point.percent + '%';
    parenthesisOpen = true;
    }
    if (this.point.percent_count)
    tt += ' of ' + this.point.table_display_plural;
    if (parenthesisOpen)
    tt += ')';
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    return false;
    }
    }
    function hc_formatPie() {
    var tt = this.key + ' = ' + this.point.y_tooltip + '&lt;br/&gt;(' + this.point.percent + '%)';
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    function hc_formatHeatmapTooltip() {
    var tt = '&lt;b&gt;' + this.point.value_tooltip + '&lt;/b&gt;';
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    function hc_formatMapTooltip() {
    var tt = this.point.name + (this.point.y_tooltip!='' ? ':' + this.point.y_tooltip : '');
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    function hc_formatMapDataLabels() {
    var showGeoLabel = this.point.series.chart.series[0].options.dataLabels.show_geographical_label;
    var showDataLabel = this.point.series.chart.series[0].options.dataLabels.show_data_label;
    var name = this.point.name;
    var value = this.point.y_tooltip;
    var out = '';
    if (showDataLabel &amp;&amp; showGeoLabel)
    out = value !== undefined &amp;&amp; value != '' ? name + ':' + value : name;
    else if (showDataLabel &amp;&amp; !showGeoLabel)
    out = value;
    else  if (!showDataLabel &amp;&amp; showGeoLabel)
    out = name;
    return out;
    }
    function hc_formatStackedBarToolTip() {
    if (this.point.valid) {
    var tt = this.x + ', ' + this.point.name + ' = ' + this.point.y_tooltip + '&lt;br/&gt;(' + this.point.percent + '%';
    if (this.point.percent_count)
    tt += ' of ' + this.point.table_display_plural + ')';
    else
    tt += ')';
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    return false;
    }
    function hc_formatHistToolTip() {
    var rangevals = this.x.split(':');
    var tt = this.point.tt_label_min + ' = ' + rangevals[0] + '&lt;br/&gt;' +
    this.point.tt_label_max + ' = ' + rangevals[1] + '&lt;br/&gt;' +
    this.point.tt_label_cnt + ' = ' + this.y;
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    function hc_formatControlToolTip() {
    var tt = this.x + ' = ' + this.point.y_tooltip;
    if (this.point.widget_navigation &amp;&amp; this.point.widget_navigation.length &amp;&amp; this.point.widget_navigation[0].value.length)
    tt += '&lt;br/&gt;' + this.point.widget_navigation_tooltip_text + ' ' + this.point.widget_navigation[0].label;
    return tt;
    }
    function hc_addPropsForDataLabelsTruncation(dataPoint, reportProperties) {
    dataPoint.data_label_max_length = reportProperties.data_label_max_size;
    if ('truncate_data_labels' in reportProperties)
    dataPoint.truncate_data_labels = reportProperties.truncate_data_labels;
    if ('data_labels_remove_leading' in reportProperties)
    dataPoint.data_labels_remove_leading = reportProperties.data_labels_remove_leading;
    }
    function hc_addTotal(hcOptions, chartProps, series, chartData){
    if (!series.data.length) {
    return;
    }
    hcOptions.subtitle = {};
    hcOptions.subtitle.verticalAlign = 'middle';
    hcOptions.subtitle.align = 'center';
    hcOptions.subtitle.style = {};
    hcOptions.subtitle.style.fontFamily = 'Arial';
    hcOptions.subtitle.style.color = '#000';
    hcOptions.subtitle.style['text-align'] = 'center';
    var titleVerticalAlign = chartData.report_properties.title_vertical_alignment;
    var titleSize =  chartData.report_properties.chart_title_size;
    var fontHelper;
    if (hcOptions.chart.width &lt; hcOptions.chart.height)
    fontHelper = hcOptions.chart.width;
    else
    fontHelper = hcOptions.chart.height;
    var fontSize = fontHelper/15;
    var durationSubFontSize = parseInt(fontHelper/20);
    hcOptions.subtitle.style.fontSize = parseInt(fontSize) + "pt";
    var yPos = 0;
    if ("yaxis_duration" in chartData.series[0] &amp;&amp; chartData.series[0].yaxis_duration) {
    hcOptions.subtitle.useHTML = true;
    hcOptions.subtitle.style['line-height'] = parseInt(fontSize/1.2) + "pt";
    var days = 'Days';
    var hours = 'Hours';
    var minutes = 'Minutes';
    var seconds = 'Seconds';
    var translation = chartData.report_properties.translation;
    if (translation != undefined){
    days = translation.days;
    hours =  translation.hours;
    minutes = translation.minutes;
    seconds = translation.seconds;
    }
    series.total = series.total.replace(days, days + "&lt;br/&gt;&lt;span style='font-size:" + durationSubFontSize + "pt;'&gt;")
    .replace(" "+hours+" ", "h:").replace(" "+minutes+" ", "m:").replace(" "+seconds, "s")
    + "&lt;/span&gt;";
    if (chartProps.chartType == 'donut') {
    if (hcOptions.title.text === '') {
    yPos = 0 - fontSize * (.5 + fontSize/200);
    } else if (titleVerticalAlign === 'top') {
    yPos = titleSize/2 - fontSize * (fontSize/100);
    } else if (titleVerticalAlign === 'bottom') {
    yPos = 0 - (titleSize/2 + fontSize * (fontSize/100));
    }
    } else {
    if (hcOptions.title.text === '') {
    yPos = fontSize * 1.55;
    } else if (titleVerticalAlign === 'top') {
    yPos = titleSize/3 + fontSize * 1.55;
    } else if (titleVerticalAlign === 'bottom') {
    yPos = (fontSize * 1.55 + 11) - (titleSize/1.4);
    }
    }
    } else {
    series.total = "&lt;span title="+series.total_value+"&gt;" + series.total + "&lt;/span&gt;";
    if (chartProps.chartType == 'donut') {
    if (hcOptions.title.text === '') {
    yPos = 0 - fontSize * (.2 + fontSize/200);
    } else if (titleVerticalAlign === 'top') {
    yPos = titleSize/2 + fontSize * (.35 - fontSize/100);
    } else if (titleVerticalAlign === 'bottom') {
    yPos = 0 - (titleSize/2.5 + fontSize * (fontSize/150));
    }
    } else {
    if (hcOptions.title.text === '') {
    yPos = fontSize * (2.3 + fontSize/400);
    } else if (titleVerticalAlign === 'top') {
    yPos = titleSize/4 + fontSize * 2.55;
    } else if (titleVerticalAlign === 'bottom') {
    yPos = fontSize * (2.8 - fontSize/400) - titleSize/1.4;
    }
    }
    }
    hcOptions.subtitle.useHTML = true;
    hcOptions.subtitle.text = series.total;
    hcOptions.subtitle.y = yPos;
    hcOptions.legend.enabled = false;
    }
    function clickOnABreadcrumb(reportId, containerId, jsonProperties) {
    var decodedJsonProperties = decodeURIComponent(jsonProperties);
    var jsonProperties = JSON.parse(decodedJsonProperties);
    var content = jQuery("#"+containerId);
    var mapParams = '';
    var map;
    var contParams = 0;
    for(var i=0; i &lt; jsonProperties.length; i++){
    var jsonProp = jsonProperties[i];
    if (jsonProp.key === 'report_map')
    map = jsonProp.value;
    }
    mapParams += "&amp;sysparm_report_map_parent=" + map;
    drillReport(content.parent().parent(), reportId, '', mapParams);
    }
    function hc_isSlowMetricChart(hcOptions, seriesData) {
    if(hcOptions &amp;&amp; hcOptions.chart &amp;&amp; hcOptions.chart.isChartingSlowMetricTable !== undefined)
    return hcOptions.chart.isChartingSlowMetricTable;
    if(seriesData &amp;&amp; seriesData.table_name &amp;&amp; seriesData.xvalues &amp;&amp; seriesData.xvalues[0] &amp;&amp;
    seriesData.table_name.indexOf('v_rrd') === 0 &amp;&amp;
    /(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/.test(seriesData.xvalues[0])){
    hcOptions.chart.isChartingSlowMetricTable = true;
    return true;
    } else
    hcOptions.chart.isChartingSlowMetricTable = false;
    return false;
    }
    function hc_convertDateTimeFormatToUnixTime(datetime){
    var dateAndTimes = /(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/.exec(datetime);
    dateAndTimes.shift();
    for(var i = 0; i &lt; dateAndTimes.length; i++){
    dateAndTimes[i] = parseInt(dateAndTimes[i], 10);
    }
    return Date.UTC(dateAndTimes[0], dateAndTimes[1] - 1, dateAndTimes[2], dateAndTimes[3], dateAndTimes[4], dateAndTimes[5]);
    }
    function hc_setZoomTypeForSlowMetric(chartData, hcOptions) {
    if(hc_isSlowMetricChart(hcOptions, chartData.series[0])) {
    hcOptions.chart.zoomType = 'x';
    }
    }
    function hc_formatDatetimeString(x){
    var xValue = (new Date(x)).toUTCString();
    xValue = xValue.substring(0, xValue.length - 4);
    return xValue
    }
    function hc_addSummaryDataToLegendForSlowMetric(chartData, hcOptions, isUI){
    if(isUI &amp;&amp; !(window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; SNC.canvas.canvasUtils) &amp;&amp; hc_isSlowMetricChart(hcOptions, chartData.series[0])) {
    hcOptions.legend.statsTable = {
    active: true,
    seriesLinkGenerator: function linkSeriesInLegendToPattern(serie){
    try {
    var patternSysId = /pattern=(\w*)/.exec(serie.userOptions.data[0].click_url_info)[1];
    var patternType = serie.userOptions.data[0].table.split("_").pop();
    return "sys_" + patternType + "_pattern.do?sys_id=" + patternSysId;
    } catch(e) {
    return "";
    }
    }
    };
    if(chartData.title.indexOf("Time") &gt;= 0)
    hcOptions.legend.statsTable.unit = 'ms';
    hcOptions.chart.height -= 120;
    }
    }
    function hc_differenceOfClosestStringDateTimesInSeries(xValues) {
    var previousValue = hc_convertDateTimeFormatToUnixTime(xValues[0]);
    var smallestDifference = Number.MAX_VALUE;
    var currentValue, currentDifference;
    for (var i = 1; i &lt; xValues.length; i++) {
    currentValue = hc_convertDateTimeFormatToUnixTime(xValues[i]);
    currentDifference = currentValue - previousValue;
    if (currentDifference &lt; smallestDifference)
    smallestDifference = currentDifference;
    previousValue = currentValue;
    }
    if(smallestDifference === Number.MAX_VALUE)
    return 0;
    return smallestDifference;
    }
    function hc_disableTurboThreshold(hcOptions) {
    var threshold = 0;
    if (typeof hcOptions !== 'undefined' &amp;&amp; typeof hcOptions.series !== 'undefined') {
    for (var i=0; i &lt; hcOptions.series.length; i++)
    hcOptions.series[i].turboThreshold = threshold;
    }
    }
    function hc_setDataLabelPositionProperties(hcOptions, chartData) {
    var hcOptionSeriesCount = 0;
    var numberOfDatasets = chartData.series.length;
    for (var datasetIndex = 0; datasetIndex &lt; numberOfDatasets; datasetIndex++) {
    var dataset = chartData.series[datasetIndex];
    var numberOfHcSeriesPerDataset = 1;
    if ('sub_series' in dataset)
    numberOfHcSeriesPerDataset = dataset.x2values.length;
    for (var j = 0; j &lt; numberOfHcSeriesPerDataset; j++) {
    if (chartData.report_properties_series[datasetIndex].show_chart_data_label) {
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.enabled = true;
    if (chartData.report_properties_series[datasetIndex].show_data_label_position_middle) {
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.verticalAlign = 'middle';
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.inside = true;
    } else
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.inside = false;
    if (chartData.report_properties_series[datasetIndex].allow_data_label_overlap)
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.allowOverlap = true;
    else
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.allowOverlap = false;
    } else
    hcOptions.series[j + hcOptionSeriesCount].dataLabels.enabled = false;
    }
    hcOptionSeriesCount += numberOfHcSeriesPerDataset;
    }
    }
    function isAccessibilityPatternsEnabled() {
    return window.g_accessibility_visual_patterns === 'true' || window.g_accessibility_visual_patterns === true;
    }
    function getOldFilterIndexFromStack(oldUniqueId) {
    var oldItemIndex = -1;
    if (window.SNC &amp;&amp; SNC.interactiveChart &amp;&amp; oldUniqueId &amp;&amp; SNC.interactiveChart.length) {
    for (var index = 0, len = SNC.interactiveChart.length; index &lt; len; index++) {
    if (SNC.interactiveChart[index].id === oldUniqueId) {
    oldItemIndex = index;
    break;
    }
    }
    }
    return oldItemIndex;
    }
    function initializeInteractiveChartStack(oldUniqueId, filterMessage, gridWindow) {
    window.SNC = window.SNC || {};
    SNC.interactiveChart = SNC.interactiveChart || [];
    var oldItemIndex = gridWindow.queryCondition &amp;&amp; getOldFilterIndexFromStack(oldUniqueId);
    if (oldItemIndex &gt; -1)
    SNC.interactiveChart[oldItemIndex] = filterMessage;
    else
    SNC.interactiveChart.push(filterMessage);
    subscribeToDashboardTabChange(gridWindow);
    }
    function subscribeToDashboardTabChange(gridWindow) {
    if (gridWindow &amp;&amp; window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; window.SNC.canvas.eventbus &amp;&amp; !gridWindow.hasNotSubscribedToTabSwitch) {
    gridWindow.hasNotSubscribedToTabSwitch = true;
    window.SNC.canvas.eventbus.subscribe('dashboards:switchTab', function onTabChangeHandler() {
    if (SNC.canvas.canvasUtils.clearAllWidgetsCache)
    SNC.canvas.canvasUtils.clearAllWidgetsCache();
    window.SNC.canvas.eventbus.unsubscribe('dashboards:switchTab', onTabChangeHandler);
    });
    }
    }
    function popFromInteractiveChartStack() {
    if (window.SNC &amp;&amp; SNC.interactiveChart &amp;&amp; SNC.interactiveChart.length)
    SNC.interactiveChart.pop();
    }
    function isFilterAlreadyPublished(gridWindow) {
    var isFilterPublished = false;
    if (gridWindow) {
    var isBothPublisherNSubscriber = gridWindow.preferences.can_publish &amp;&amp; gridWindow.preferences.can_subscribe;
    var allConsumedFilter = gridWindow.consumed;
    var interactiveFilters = gridWindow.interactiveFilters || {};
    if (isBothPublisherNSubscriber &amp;&amp; allConsumedFilter &amp;&amp; Array.isArray(allConsumedFilter)) {
    var allConsumedFilterFlattend = [].concat.apply([], allConsumedFilter);
    for (var index = 0, len = allConsumedFilterFlattend.length; index &lt; len; index++) {
    var item = allConsumedFilterFlattend[index];
    if (interactiveFilters[item.id]) {
    isFilterPublished = true;
    break;
    }
    }
    }
    }
    return isFilterPublished;
    }
    ;
    /*! RESOURCE: /scripts/reportcommon/customvisuals/multilevel-pivot.js */
    var MultilevelPivot = function MultilevelPivot(reportUUID, runType, options, notSaveStatistics) {
    'use strict';
    var self = this;
    if (!options) {
    options = window.g_report_params[reportUUID];
    options.is_report_source_filter_already_combined = true;
    }
    options.not_save_statistics = notSaveStatistics;
    createReportTemplate(reportUUID, options);
    this.containerId = 'chart-container-' + reportUUID;
    this.showZero = options.show_zero;
    this.pivotExpanded = options.pivot_expanded !== 'false' &amp;&amp; options.pivot_expanded !== false;
    this.displayRowLines = options.display_row_lines !== 'false' &amp;&amp; options.display_row_lines !== false;
    this.displayColumnLines = options.display_column_lines !== 'false' &amp;&amp; options.display_column_lines !== false;
    this.fixedHeaders = window.chartHelpers.systemParams.fixedHeaders;
    this.table = options.table;
    this.$table = jQuery('&lt;table id="pivot_table" class="pivot-2-levels table" cellspacing="0" cellpadding="0" tabindex="0" role="grid" /&gt;');
    this.listUIViewName = '';
    this.isBuilder = jQuery('#reportform_control').length || (typeof gReport !== 'undefined' &amp;&amp; gReport &amp;&amp; gReport.isDesigner);
    this.isDesigner = (typeof gReport !== 'undefined' &amp;&amp; gReport &amp;&amp; gReport.isDesigner);
    this.isOldBuilder = jQuery('#reportform_control').length;
    this.isCanvas = window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive;
    this.options = options;
    this.title = options.title;
    var leftMostRowSpan = [];
    var leftMostRowValue = [];
    var showMessage = function showMessage(msg, level) {
    if (level === 'FAILURE')
    jQuery('#' + self.containerId).html('&lt;div class="pivot-error"&gt;ERROR: ' + msg + '&lt;/div&gt;');
    else
    jQuery('#' + self.containerId).before('&lt;div class="pivot-infomessage"&gt;' + msg + '&lt;/div&gt;');
    };
    this.init = function init() {
    self.runPivot(options, runType);
    self.eventHandlers();
    };
    this.runPivot = function runPivot() {
    self.startTime = new Date().getTime();
    var processor = (runType === 'run') ? 'PivotRunProcessor' : 'PivotRunPublishedProcessor';
    jQuery.ajax({
    method: 'POST',
    url: '/xmlhttp.do',
    dataType: 'xml',
    headers: { 'X-UserToken': window.g_ck },
    data: {
    sysparm_processor: processor,
    sysparm_scope: 'global',
    is_portal: options.is_portal,
    sysparm_timer: new Date().getTime(),
    sysparm_request_params: JSON.stringify(self.buildRequestParams(options))
    }
    }).done(function doneCb(xml) {
    self.processResponse(xml);
    }).fail(function failCb(jqXHR, textStatus, error) {
    console.log(textStatus, error);
    });
    };
    this.processResponse = function processResponse(response) {
    if (!response)
    showError(self.containerId, 'No response from the server');
    else {
    var resp = JSON.parse(jQuery(response).find('RESPONSE').text());
    if (resp.STATUS === 'SUCCESS')
    try {
    response = JSON.parse(resp.RESPONSE_DATA);
    if (response.widget_navigation &amp;&amp; response.widget_navigation.length)
    this.widgetNav = response.widget_navigation[0];
    self.reportDrilldown = response.report_drilldown;
    self.renderTable(response);
    if (self.isBuilder &amp;&amp; response.drill_message)
    showMessage(response.drill_message);
    if (response.message)
    showMessage(response.message, 'INFO');
    if (self.fixedHeaders)
    self.fixateHeader();
    } catch (err) {
    showMessage(chartHelpers.i18n.chartGenerationError, 'FAILURE');
    throw new Error(err);
    }
    else {
    jQuery('#' + self.containerId).empty();
    showMessage(resp.RESPONSE_DATA, resp.STATUS);
    }
    }
    var now = new Date().getTime();
    var elapsedTime = (now - self.startTime) / 1000;
    console.log('Time taken to render report: ' + elapsedTime);
    hideReportIsLoading(findGridWindowFromElementID(self.containerId));
    var whtpReadyState = document.getElementById('whtp_ready_state');
    if (whtpReadyState)
    whtpReadyState.value = 'complete';
    };
    this.reduceAxisCategories = function reduceAxisCategories(categories, sortKey) {
    var uniqueAxisCategories = {};
    for (var i = 0; i &lt; categories.length; i++) {
    if (!uniqueAxisCategories.hasOwnProperty(categories[i][sortKey])) {
    var record = {};
    record.count = 1;
    record.value = categories[i].value;
    uniqueAxisCategories[categories[i][sortKey]] = record;
    } else
    uniqueAxisCategories[categories[i][sortKey]].count += 1;
    }
    return uniqueAxisCategories;
    };
    this.renderTable = function renderTable(response) {
    var aggregateFunction = response.aggregate.function;
    var titleProps;
    var showTitle = true;
    var config = self.options;
    var $container = jQuery('#' + self.containerId);
    var $table = self.$table;
    var $caption = jQuery('&lt;caption class="sr-only"/&gt;');
    var $row = jQuery('&lt;tr role="row" /&gt;');
    var $yLabelsRow = jQuery('&lt;tr class="y-labels-row header-row" role="row"/&gt;');
    var yLastColSpan = 1;
    var xLastRowSpan = 1;
    var headerRows = [];
    var data = response.series.data;
    var xCategories = response.xAxisCategories;
    var yCategories = response.yAxisCategories;
    var xCategorySortKey = xCategories[0].fieldValues[0].hasOwnProperty('sys_id') ? 'sys_id' : 'value';
    var yCategorySortKey = yCategories[0].fieldValues[0].hasOwnProperty('sys_id') ? 'sys_id' : 'value';
    var subtotals = response.subtotals;
    self.listUIViewName = response.list_ui_view_name;
    self.drillOpenNewWin = response.drill_open_new_win;
    var xLevel = xCategories[0].fieldValues.length;
    var yLevel = yCategories[0].fieldValues.length;
    var yTopmostCategories = [];
    var xTopmostCategories = [];
    var nextBlocked = 0;
    $caption.text(config.chart_title || config.title);
    $table.append($caption);
    for (var i = 0; i &lt; xLevel; i++)
    headerRows.push(jQuery('&lt;tr class="header-row" role="row"/&gt;'));
    for (i = 0; i &lt; yCategories.length; i++)
    yTopmostCategories[i] = yCategories[i].fieldValues[0];
    for (i = 0; i &lt; xCategories.length; i++)
    xTopmostCategories[i] = xCategories[i].fieldValues[0];
    var yTopmostUniqueCategories = this.reduceAxisCategories(yTopmostCategories, yCategorySortKey);
    var xTopmostUniqueCategories = this.reduceAxisCategories(xTopmostCategories, xCategorySortKey);
    if (yLevel === 1)
    yLastColSpan = 2;
    if (xLevel === 1)
    xLastRowSpan = 2;
    for (i = 0; i &lt; yCategories.length; i++) {
    for (var j = 0; j &lt;= xCategories.length; j++)
    if (j &lt; xCategories.length) {
    var dataPoint = data[(xCategories.length * i) + j];
    var cellQueryParts = [];
    var dataPointValue = dataPoint[0];
    if (dataPointValue || (dataPointValue === 0 &amp;&amp; (aggregateFunction === 'AVG' || aggregateFunction === 'SUM'))) {
    var xCategoryQuery = response.otherQuery &amp;&amp; !xCategories[j].categoryQuery ? response.otherQuery : xCategories[j].categoryQuery;
    cellQueryParts = [xCategoryQuery, yCategories[i].categoryQuery, response.filter];
    }
    if (dataPointValue === null &amp;&amp; self.showZero &amp;&amp; dataPoint[1] === '0')
    dataPointValue = 0;
    var colorStyle = chartHelpers.evaluateColorRules(dataPointValue, response.rules);
    var $td = jQuery('&lt;td/&gt;');
    if (colorStyle &amp;&amp; colorStyle.color)
    $td.css('color', colorStyle.color);
    if (colorStyle &amp;&amp; colorStyle.bgColor)
    $td.css('background-color', colorStyle.bgColor);
    $td.appendTo($row).html(self.generateCell(dataPoint[1], cellQueryParts, dataPoint[2], aggregateFunction));
    }				else {
    var yAggregateQueryParts = [yCategories[i].categoryQuery];
    if (!response.sysparm_show_other &amp;&amp; response.otherQuery)
    yAggregateQueryParts.push(response.otherQuery);
    yAggregateQueryParts.push(response.filter);
    jQuery('&lt;td class="aggregate-right"/&gt;').appendTo($row).html(self.generateCell(yCategories[i].aggregatedValue, yAggregateQueryParts, yCategories[i].tooltipText));
    }
    for (var k = yLevel - 1; k &gt;= 0; k--)
    if (k === 0)
    if (nextBlocked === 0) {
    if (subtotals) {
    $row.addClass('below-subtotals');
    leftMostRowSpan.push(yTopmostUniqueCategories[yCategories[i].fieldValues[k][yCategorySortKey]].count);
    leftMostRowValue.push(yTopmostUniqueCategories[yCategories[i].fieldValues[k][yCategorySortKey]].value);
    } else
    jQuery('&lt;td/&gt;', { class: 'y-axis-category-field-leftmost header-left', scope: 'row', role: 'rowheader', colspan: yLastColSpan, rowspan: yTopmostUniqueCategories[yCategories[i].fieldValues[k][yCategorySortKey]].count }).prependTo($row).text(yTopmostUniqueCategories[yCategories[i].fieldValues[k][yCategorySortKey]].value);
    nextBlocked = yTopmostUniqueCategories[yCategories[i].fieldValues[k][yCategorySortKey]].count - 1;
    } else
    nextBlocked--;
    else
    if (k === yLevel - 1)
    jQuery('&lt;td/&gt;', { scope: 'row', colspan: 2, role: 'rowheader', class: 'y-axis-category-field header-left' }).prependTo($row).text(yCategories[i].fieldValues[k].value);
    else
    jQuery('&lt;td/&gt;', { scope: 'row', class: 'y-axis-category-field header-left', role: 'rowheader' }).prependTo($row).text(yCategories[i].fieldValues[k].value);
    if (!self.pivotExpanded &amp;&amp; subtotals)
    $row.css('display', 'none');
    $table.append($row.addClass('content-row'));
    $row = jQuery('&lt;tr role="row"/&gt;');
    }
    for (i = 0; i &lt;= xCategories.length; i++)
    if (i &lt; xCategories.length) {
    xCategoryQuery = response.otherQuery &amp;&amp; !xCategories[i].categoryQuery ? response.otherQuery : xCategories[i].categoryQuery;
    var $content = self.generateCell(xCategories[i].aggregatedValue, [xCategoryQuery, response.filter], xCategories[i].tooltipText);
    $row.addClass('totals');
    jQuery('&lt;td class="aggregate-bottom"/&gt;').appendTo($row).html($content);
    for (j = 0; j &lt; xLevel; j++)
    if (typeof xCategories[i].fieldValues[j] !== 'undefined')
    if (j === 0) {
    if (nextBlocked === 0) {
    jQuery('&lt;th/&gt;', { rowspan: xLastRowSpan, scope: 'col', role: 'columnheader', colspan: xTopmostUniqueCategories[xCategories[i].fieldValues[j][xCategorySortKey]].count }).appendTo(headerRows[j]).text(xCategories[i].fieldValues[j].value);
    nextBlocked = xTopmostUniqueCategories[xCategories[i].fieldValues[j][xCategorySortKey]].count - 1;
    }							else
    nextBlocked--;
    }						else if (j === xLevel - 2)
    jQuery('&lt;th/&gt;', { class: 'x-axis-category-field', scope: 'col', role: 'columnheader' }).appendTo(headerRows[j]).text(xCategories[i].fieldValues[j].value);
    else
    jQuery('&lt;th/&gt;', { rowspan: 2, class: 'x-axis-category-field', scope: 'col', role: 'columnheader' }).appendTo(headerRows[j]).text(xCategories[i].fieldValues[j].value);
    else
    headerRows[0].find('th:nth-child(' + chartHelpers.objectSize(xTopmostUniqueCategories) + ')').attr('rowspan', xLevel + 1);
    }			else {
    var grantTotalQueryParts = !response.sysparm_show_other &amp;&amp; response.otherQuery ? [response.otherQuery, response.filter] : [response.filter];
    $content = self.generateCell(response.aggregate.grandAggregate, grantTotalQueryParts, response.aggregate.tooltipText);
    jQuery('&lt;td class="grand"/&gt;').appendTo($row).html($content);
    $row.prepend('&lt;td colspan="' + (yLevel + 1) + '" class="header-left"&gt;' + response.aggregate.functionLabel + '&lt;/td&gt;');
    headerRows[0].append('&lt;th class="aggregate-right" scope="col" role="columnheader" rowspan="' + (xLevel + 1) + '"&gt; ' + response.aggregate.functionLabel + ' &lt;/th&gt;');
    }
    for (i = 0; i &lt; xLevel; i++) {
    for (k = yLevel - 1; k &gt;= 0; k--)
    if (i === xLevel - 1) {
    jQuery('&lt;th/&gt;', { class: 'y-axis-category header-left' }).prependTo($yLabelsRow).text(yCategories[0].fieldValues[k].field);
    headerRows[i + 1] = $yLabelsRow;
    }
    jQuery('&lt;th/&gt;', { class: 'x-axis-category' }).prependTo(headerRows[i]).text(xCategories[0].fieldValues[i].field);
    if (i === 0) {
    var aggregateFieldDisplayValue = '';
    var pointerButton = '';
    if (response.aggregate.aggregateFieldDisplayValue)
    aggregateFieldDisplayValue = response.aggregate.aggregateFieldDisplayValue;
    if (subtotals)
    pointerButton = '&lt;a href="#" class="collapse-all ' + (self.pivotExpanded ? 'expanded' : '') + '"/&gt;';
    headerRows[0].prepend('&lt;th class="top-left-hole" colspan="' + yLevel + '" rowspan="' + xLevel + '"&gt;' + pointerButton + aggregateFieldDisplayValue + '&lt;/th&gt;');
    }
    if (i === xLevel - 1)
    $yLabelsRow.append('&lt;th/&gt;');
    }
    $table.append($row);
    for (j = xLevel; j &gt;= 0; j--)
    $table.prepend(headerRows[j]);
    if (subtotals)
    self.generateSubtotals($table, subtotals, yLevel, xCategories, aggregateFunction);
    $container.empty().html('&lt;div class="pivot-wrap"/&gt;').find('.pivot-wrap').append($table);
    if (config.show_chart_title === 'never' || (!config.title &amp;&amp; !config.chart_title) || (config.show_chart_title === 'report' &amp;&amp; !self.isBuilder))
    showTitle = false;
    if (showTitle) {
    if (config.chart_title)
    config.title = config.chart_title;
    titleProps = {
    title: config.title,
    chart_title_size: config.chart_title_size,
    chart_title_x_position: config.chart_title_x_position,
    chart_title_y_position: config.chart_title_y_position,
    title_horizontal_alignment: config.title_horizontal_alignment,
    title_vertical_alignment: config.title_vertical_alignment
    };
    if (response.chart_title_color)
    titleProps.chart_title_color = response.chart_title_color;
    self.generateTitle(titleProps);
    }
    var isServicePortal = jQuery('html').attr('ng-app') === 'ng_spd' || (window.NOW &amp;&amp; window.NOW.hasOwnProperty('sp'));
    var tip = $container.find('td a');
    if (tip.tooltip &amp;&amp; !isServicePortal)
    tip.attr('data-placement', 'bottom').attr('data-container', 'body').tooltip().hideFix();
    if (!self.displayRowLines)
    jQuery('#pivot_table td').addClass('pivot-2-td-border-top-none');
    if (self.displayColumnLines)
    jQuery('#pivot_table td').addClass('pivot-2-td-border-left');
    };
    this.generateTitle = function generateTitle(titleProps) {
    var defaultFontSize = 14;
    var titleSelector = 'pivot_title';
    var $container = jQuery('#' + this.containerId).find('.pivot-wrap');
    var $titleEl = jQuery('&lt;div class="' + titleSelector + '"/&gt;').text(titleProps.title);
    if (titleProps.chart_title_color)
    $titleEl.css('color', titleProps.chart_title_color);
    if (titleProps.chart_title_size)
    $titleEl.css('font-size', titleProps.chart_title_size + 'px');
    if (titleProps.title_horizontal_alignment)
    $titleEl.css('text-align', titleProps.title_horizontal_alignment);
    if (!titleProps.custom_chart_title_position)
    switch (titleProps.title_vertical_alignment) {
    case 'top':
    $container.prepend($titleEl);
    break;
    case 'middle':
    $titleEl.css({ position: 'absolute', width: '100%', top: '50%', 'margin-top': -(titleProps.chart_title_size / 2) || -(defaultFontSize / 2) });
    $container.prepend($titleEl);
    break;
    case 'bottom':
    $container.append($titleEl);
    break;
    }
    else {
    $titleEl.css({ position: 'absolute', top: titleProps.chart_title_y_position, left: titleProps.chart_title_x_position });
    $container.css({ paddingTop: (titleProps.chart_title_size + 20) || (20 + defaultFontSize) });
    $container.prepend($titleEl);
    }
    };
    this.generateCell = function generateCell(displayValue, cellQueryParts, message, aggregateFunction) {
    var cellQuery = this.combineQueries(cellQueryParts);
    var encodedCellQuery = encodeURIComponent(cellQuery);
    var $content = jQuery('').html('&amp;nbsp;');
    var hrefVal = '';
    if (displayValue)
    hrefVal = getListURL(self.table, cellQuery, self.listUiViewName);
    if (aggregateFunction) {
    if (displayValue &amp;&amp; (displayValue !== '0' || (displayValue === '0'
    &amp;&amp; (self.showZero === 'true' || self.showZero === true || aggregateFunction === 'AVG' || aggregateFunction === 'SUM'))))
    if (cellQuery)
    $content = jQuery('&lt;a/&gt;', { href: hrefVal, rel: encodedCellQuery, class: 'datapoint', title: message }).text(displayValue);
    else
    $content = jQuery('&lt;span title="' + message + '"/&gt;').text(displayValue);
    } else
    if (displayValue)
    $content = jQuery('&lt;a/&gt;', { href: hrefVal, rel: encodedCellQuery, class: 'datapoint', title: message }).text(displayValue);
    return $content;
    };
    this.generateSubtotals = function generateSubtotals($table, subtotals, yLevel, xCategories, aggregateFunction) {
    $table.find('.below-subtotals').before('&lt;tr role="row" class="subtotals ' + (self.pivotExpanded ? 'expanded' : '') + '"/&gt;');
    $table.find('.subtotals').each(function eachCb(key) {
    var $currRow = jQuery(this);
    var totalCols = yLevel + xCategories.length + 1;
    var subtotalsData = subtotals.series.data;
    var subtotalsAgg = subtotals.yAxisCategories;
    for (var i = 0; i &lt; totalCols; i++)
    if (i === 0) {
    var rowSpan;
    if (self.pivotExpanded) {
    rowSpan = leftMostRowSpan[key] + 1;
    $currRow.addClass('expanded');
    } else
    rowSpan = 1;
    $currRow.append('&lt;td class="leftmost-cell" rowspan="' + rowSpan + '" scope="row" role="rowheader" data-mergerows="' + (leftMostRowSpan[key] + 1) + '"&gt;&lt;a href="#" class="subcollapse"/&gt;' + leftMostRowValue[key] + '&lt;/td&gt;');
    } else if (i === 1)
    $currRow.append('&lt;td class="subtotals-empty"&gt;' + chartHelpers.i18n.total + '&lt;/td&gt; &lt;td class="subtotals-empty"/&gt;');
    else if (i &gt; 1 &amp;&amp; i &lt; yLevel)
    $currRow.append('&lt;td class="subtotals-empty"/&gt;');
    else if (i === totalCols - 1)
    jQuery('&lt;td class="aggregate-right"/&gt;').appendTo($currRow).html(self.generateCell(subtotalsAgg[key].aggregatedValue, [subtotalsAgg[key].categoryQuery, subtotals.filter], subtotalsAgg[key].tooltipText));
    else {
    var currSubtotal = (xCategories.length * key) + (i - yLevel);
    var cellQueryParts = [];
    if (subtotalsData[currSubtotal][0] || (subtotalsData[currSubtotal][0] === 0 &amp;&amp; (aggregateFunction === 'AVG' || aggregateFunction === 'SUM'))) {
    var xCategoryQuery = subtotals.otherQuery &amp;&amp; !xCategories[i - yLevel].categoryQuery ? subtotals.otherQuery : xCategories[i - yLevel].categoryQuery;
    cellQueryParts = [xCategoryQuery, subtotalsAgg[key].categoryQuery, subtotals.filter];
    }
    jQuery('&lt;td/&gt;').appendTo($currRow).html(self.generateCell(subtotalsData[currSubtotal][1], cellQueryParts, subtotalsData[currSubtotal][2], aggregateFunction));
    }
    });
    };
    this.fixateHeader = function fixateHeader() {
    var $scrollContainer;
    var $table = self.$table;
    var tableOffset = $table.position().top;
    var offsetDiff = 0;
    var offsetFetched = false;
    var $fixedHeader = jQuery('&lt;table class="fixed-header pivot-2-levels table"/&gt;').insertBefore($table).html(self.getSizedHeaders(true));
    if (self.isDesigner) {
    $scrollContainer = jQuery('#main-content');
    tableOffset = $table.offset().top - $scrollContainer.offset().top;
    offsetDiff = tableOffset - $table.position().top;
    } else if (self.isOldBuilder)
    $scrollContainer = jQuery(document);
    else if (self.isCanvas)
    $scrollContainer = jQuery('#' + this.containerId).closest('.grid-widget-content');
    else
    $scrollContainer = jQuery('#' + this.containerId).closest('.widget_body');
    $scrollContainer.scroll(function scrollCb() {
    if (!offsetFetched &amp;&amp; self.isOldBuilder) {
    tableOffset = $table.offset().top;
    offsetDiff = tableOffset - $table.position().top;
    offsetFetched = true;
    }
    var offset = jQuery(this).scrollTop() - offsetDiff;
    if (self.isDesigner)
    offset -= jQuery('#condition-builder-wrap form').height();
    if (offset &gt;= tableOffset - offsetDiff)
    $fixedHeader.css({ top: offset, display: 'table' });
    else if (offset &lt; tableOffset - offsetDiff)
    $fixedHeader.hide();
    });
    };
    this.getSizedHeaders = function getSizedHeaders(createHeader) {
    var $headerRows = self.$table.find('.header-row');
    var $clonedHeaderRows = createHeader ? $headerRows.clone() : jQuery('#' + self.containerId).find('.fixed-header .header-row');
    $headerRows.each(function eachRowCb(i) {
    var $children = $headerRows.eq(i).children();
    var $clonedChildren = $clonedHeaderRows.eq(i).children();
    $children.each(function eachChildCb(j) {
    $clonedChildren.eq(j).css('min-width', $children.eq(j).outerWidth());
    });
    });
    return $clonedHeaderRows;
    };
    this.buildRequestParams = function buildRequestParams(params) {
    return {
    sysparm_table: params.table,
    sysparm_x_axis_category_fields: params.x_axis_category_fields != null ? params.x_axis_category_fields.trim().split(/[\s,]+/) : '',
    sysparm_y_axis_category_fields: params.y_axis_category_fields != null ? params.y_axis_category_fields.trim().split(/[\s,]+/) : '',
    sysparm_aggregate: params.aggregate,
    sysparm_show_other: params.show_other,
    sysparm_others: params.other_threshold,
    sysparm_chart_title_color: params.chart_title_color,
    sysparm_sumfield: params.agg_field,
    sysparm_query: params.filter,
    sysparm_report_id: params.report_id,
    sysparm_list_ui_view: params.list_ui_view,
    sysparm_interactive_report: params.interactive_report,
    sysparm_report_drilldown: params.report_drilldown,
    sysparm_homepage_sysid: params.homepage_sysid,
    sysparm_decimal_precision: params.decimal_precision,
    sysparm_report_source_id: params.report_source_id,
    sysparm_is_report_source_filter_already_combined: params.is_report_source_filter_already_combined,
    sysparm_is_published: params.is_published,
    sysparm_not_save_statistics: params.not_save_statistics,
    sysparm_set_redirect: params.set_redirect
    };
    };
    this.eventHandlers = function eventHandlers() {
    var $container = jQuery('#' + self.containerId);
    $container.on('click', '.subtotals .subcollapse', function subcollapseClickCb(ev) {
    ev.preventDefault();
    var $parentRow = jQuery(this).closest('.subtotals');
    var $parentCell = jQuery(this).closest('td');
    var $subRows = $parentRow.nextUntil('.subtotals,.totals');
    if ($parentCell.attr('rowspan') &gt; 1) {
    $parentCell.attr('rowspan', 1);
    $parentRow.removeClass('expanded');
    $subRows.hide();
    } else {
    $parentCell.attr('rowspan', $parentCell.data('mergerows'));
    $parentRow.addClass('expanded');
    $subRows.show();
    }
    if (self.fixedHeaders)
    self.getSizedHeaders(false);
    });
    $container.on('click', '.collapse-all', function collapseCb(ev) {
    ev.preventDefault();
    var $contentRows = $container.find('.content-row');
    var $el = jQuery(this);
    if ($el.is('.expanded')) {
    $container.find('.subtotals.expanded').each(function eachCb() {
    jQuery(this).removeClass('expanded');
    jQuery(this).find('.leftmost-cell').attr('rowspan', 1);
    });
    $el.closest('.pivot-wrap').find('.collapse-all').removeClass('expanded');
    $contentRows.hide();
    } else {
    $container.find('.subtotals:not(.expanded)').each(function eachCb() {
    jQuery(this).addClass('expanded');
    var $cell = jQuery(this).find('.leftmost-cell');
    $cell.attr('rowspan', $cell.data('mergerows'));
    });
    $el.closest('.pivot-wrap').find('.collapse-all').addClass('expanded');
    $contentRows.show();
    }
    if (self.fixedHeaders)
    self.getSizedHeaders(false);
    });
    $container.on('click', '.datapoint', function dataPointClickCb(ev) {
    ev.preventDefault();
    var openNewTab;
    if (ev.ctrlKey || ev.metaKey)
    openNewTab = true;
    if (self.widgetNav)
    window.open(self.widgetNav.value, openNewTab ? '_blank' : '_self');
    else
    generateDataPointClickUrl(ev, '#' + self.containerId, self.reportDrilldown, self.table, decodeURIComponent(jQuery(this).attr('rel')), self.listUIViewName, self.drillOpenNewWin);
    });
    };
    this.combineQueries = function combineQueries(queryParts) {
    if (typeof queryParts === 'string')
    return queryParts;
    queryParts = queryParts.filter(function filterCb(el) { return el; });
    if (!queryParts.length)
    return '';
    return queryParts.reduce(function reduceCb(acc, curr) {
    var accParts = acc.split('^NQ');
    var currParts = curr.split('^NQ');
    var finalParts = [];
    for (var i = 0; i &lt; accParts.length; i++)
    for (var j = 0; j &lt; currParts.length; j++)
    finalParts[(i * currParts.length) + j] = accParts[i] + '^' + currParts[j];
    return finalParts.join('^NQ');
    });
    };
    this.init();
    };
    ;
    /*! RESOURCE: /scripts/reportcommon/customvisuals/single-score.js */
    function SingleScore(reportUUID, runType, config) {
    'use strict';
    var self = this;
    if (!config) {
    config = window.g_report_params[reportUUID];
    config.is_report_source_filter_already_combined = true;
    }
    createReportTemplate(reportUUID, config);
    this.containerId = 'chart-container-' + reportUUID;
    this.msgContainerId = 'msg-container-' + reportUUID;
    this.$container = jQuery('#' + this.containerId);
    this.$wrap = this.$container;
    this.config = config;
    this.title = config.title;
    this.is_portal = config.is_portal;
    this.isServicePortal = jQuery('html').attr('ng-app') === 'ng_spd' || (window.NOW &amp;&amp; window.NOW.hasOwnProperty('sp'));
    this.reportId = config.report_id;
    this.table = config.table;
    this.condition = config.filter;
    this.minMargin = 5;
    this.maxFontSize = 200;
    this.minWrapHeight = 64;
    this.listUIViewName = '';
    this.relativeFontSize = 0.7;
    this.real_time = config.real_time;
    if (top.g_ambClient || (top.amb &amp;&amp; top.amb.getClient()))
    this.amb = top.g_ambClient || top.amb.getClient();
    this._channelListener = null;
    this.$el = jQuery('&lt;span/&gt;');
    this.rootReportElementClass = '.sysparm_root_report_id';
    this.defaults = {
    value: '0',
    chart_background_color: '#fff',
    displayvalue: 'No value',
    color: '#000',
    displayValueChars: 0
    };
    this.isBuilder = (reportUUID === 'builder');
    (function fetchData() {
    self.unsubscribeListener(self);
    var processor = (runType === 'run') ? 'SingleScoreRunProcessor' : 'SingleScoreRunPublishedProcessor';
    jQuery.ajax({
    method: 'POST',
    url: '/xmlhttp.do',
    dataType: 'xml',
    headers: { 'X-UserToken': window.g_ck },
    data: {
    sysparm_processor: processor,
    sysparm_scope: 'global',
    is_portal: self.is_portal,
    sysparm_timer: new Date().getTime(),
    sysparm_request_params: JSON.stringify(self.buildRequestParams(config))
    }
    }).done(function doneCb(xml) {
    self.render(xml);
    }).fail(function failCb(jqXHR, textStatus, error) {
    console.log(textStatus, error);
    });
    self.eventHandlers();
    }());
    }
    SingleScore.prototype.unsubscribeListener = function unsubscribeListener() {
    var self = this;
    if (top.SNC &amp;&amp; top.SNC.channelListeners) {
    self._channelListener = top.SNC.channelListeners[self.reportId];
    if (self._channelListener) {
    self._channelListener.unsubscribe();
    delete top.SNC.channelListeners[self.reportId];
    }
    }
    };
    SingleScore.prototype.shouldShowTitle = function shouldShowTitle() {
    if (this.config.show_chart_title === 'never' || (!this.config.title &amp;&amp; !this.config.chart_title) || (this.config.show_chart_title === 'report' &amp;&amp; this.isBuilder === false))
    return false;
    return true;
    };
    SingleScore.prototype.render = function render(response) {
    var self = this;
    var config = self.config;
    var responseData;
    if (!response) {
    hideReportIsLoading(findGridWindowFromElementID(self.containerId));
    showError(self.containerId, 'No response from the server');
    return;
    }
    var resp = JSON.parse(jQuery(response).find('RESPONSE').text());
    if (resp.STATUS === 'SUCCESS') {
    try {
    var contentEl;
    var respData = JSON.parse(resp.RESPONSE_DATA);
    var hrefVal;
    var titleProps;
    if (self.isBuilder &amp;&amp; respData.drill_message)
    showInfo(self.msgContainerId, respData.drill_message);
    this.reportDrilldown = respData.report_drilldown;
    if (respData.widget_navigation &amp;&amp; respData.widget_navigation.length)
    this.widgetNav = respData.widget_navigation;
    self.listUIViewName = respData.list_ui_view_name;
    self.drillOpenNewWin = respData.drill_open_new_win;
    responseData = jQuery.extend({}, self.defaults, respData);
    var evaluatedColor = self.evaluateColor(responseData.value, responseData.rules, responseData.color);
    hrefVal = getListURL(self.table, responseData.filter, responseData.list_ui_view_name);
    var encodedClickUrlInfo = encodeURIComponent(responseData.filter);
    contentEl = '&lt;a id="' + self.reportId + '" style="color:' + evaluatedColor + '" href="' + hrefVal + '" rel="' + encodedClickUrlInfo + '"&gt;' + responseData.displayvalue + '&lt;/a&gt;';
    self.$container.html('&lt;div class="single-score" aria-live="polite"/&gt;').find('.single-score').html(self.$el.html(contentEl));
    if (!window.isMSIE9) {
    jQuery(window).on('beforeunload', self.unsubscribeListener.bind(self));
    self.registerWatcher(responseData);
    }
    if (responseData.tooltip) {
    self.$el.attr('title', responseData.tooltip);
    if (!self.isServicePortal &amp;&amp; self.$el.tooltip)
    self.$el.attr('data-container', 'body').attr('data-placement', 'bottom').tooltip().hideFix();
    }
    if (!(window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; window.SNC.canvas.layoutJson &amp;&amp; window.SNC.canvas.layoutJson.isConverting))
    self.updateSize();
    if (self.shouldShowTitle()) {
    if (config.chart_title)
    config.title = config.chart_title;
    titleProps = {
    title: config.title,
    chart_title_size: config.chart_title_size,
    chart_title_x_position: config.chart_title_x_position,
    chart_title_y_position: config.chart_title_y_position,
    title_horizontal_alignment: config.title_horizontal_alignment,
    title_vertical_alignment: config.title_vertical_alignment
    };
    if (responseData.chart_title_color)
    titleProps.chart_title_color = responseData.chart_title_color;
    self.generateTitle(titleProps);
    self.updateSize();
    }
    } catch (error) {
    console.log(error);
    showError(self.containerId, 'An error occured while generating chart.');
    }
    } else
    self.showMessage(resp.RESPONSE_DATA, resp.STATUS);
    hideReportIsLoading(findGridWindowFromElementID(self.containerId));
    };
    SingleScore.prototype.evaluateColor = function evaluateColor(score, rules, defaultColor) {
    if (rules) {
    var colorStyle = chartHelpers.evaluateColorRules(score, rules);
    if (colorStyle.color)
    return colorStyle.color;
    }
    return defaultColor;
    };
    SingleScore.prototype.base64Encode = function base64Encode(queryString) {
    try {
    return btoa(queryString);
    } catch(error) {
    if (window.DOMException &amp;&amp; error instanceof window.DOMException &amp;&amp; error.name === 'InvalidCharacterError')
    return btoa(chartHelpers.hexEncode(queryString));
    throw error;
    }
    }
    SingleScore.prototype.registerWatcher = function registerWatcher(singleScoreResponse) {
    var self = this;
    if (self.is_portal &amp;&amp; top.SNC &amp;&amp; top.SNC.channelListeners) {
    try {
    var base64EncodeQuery = self.base64Encode(self.condition);
    var channelId = '/rw/count/' + self.table + '/' + base64EncodeQuery.replace(/=/g, '-');
    self._channelListener = top.SNC.channelListeners[self.reportId];
    if (self._channelListener) {
    self._channelListener.unsubscribe();
    delete top.SNC.channelListeners[self.reportId];
    }
    if (self.real_time === 'true' &amp;&amp; self.amb &amp;&amp; self.amb.getChannel(channelId)) {
    self._channelListener = self.amb.getChannel(channelId);
    self._channelListener.subscribe(function subscribeCb(channelData) { self.updateScore(channelData, singleScoreResponse); });
    top.SNC.channelListeners[self.reportId] = self._channelListener;
    }
    } catch(error) {
    }
    }
    };
    SingleScore.prototype.updateSize = function updateSize() {
    var self = this;
    var wrapHeight;
    var wrapWidth;
    var $widgetBody;
    var fontSize = self.maxFontSize;
    var $widgetContent;
    var titleHeight = 0;
    var isCanvas = window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive;
    self.$container.css({
    margin: '0'
    });
    if (!self.is_portal) {
    if (self.$wrap.closest('td').length)
    $widgetBody = self.$wrap.closest('td');
    else
    $widgetBody = jQuery('body');
    self.$container.css({ padding: '10px 0' });
    wrapHeight = 100;
    wrapWidth = $widgetBody.width() || 100;
    } else if (isCanvas &amp;&amp; self.containerId.indexOf('preview') === -1) {
    $widgetContent = self.$container.closest('.grid-widget-content');
    wrapHeight = $widgetContent.height();
    wrapWidth = $widgetContent.width() - (this.minMargin * 2);
    titleHeight = $widgetContent.find('.singlescore_title').height() || 0;
    } else if (isCanvas &amp;&amp; self.containerId.indexOf('preview') &gt;= -1) {
    $widgetContent = self.$container.closest('.widget-preview');
    wrapHeight = $widgetContent.height();
    wrapWidth = $widgetContent.width();
    titleHeight = $widgetContent.find('.singlescore_title').height() || 0;
    } else {
    $widgetBody = self.$wrap.closest('.widget_body');
    if (jQuery('.home_preview ' + self.$containerId).length) {
    self.$container = jQuery('.home_preview #' + self.containerId);
    self.$wrap = self.$container.closest('.single-score-wrap');
    $widgetBody = jQuery('.home_preview');
    }
    wrapHeight = $widgetBody.height();
    wrapWidth = $widgetBody.width() - (this.minMargin * 2);
    if (wrapWidth &lt; 0)
    wrapWidth = 150;
    if (wrapHeight &lt; self.minWrapHeight)
    wrapHeight = self.minWrapHeight;
    }
    wrapHeight -= titleHeight;
    self.$el.css({ 'font-size': fontSize });
    while (self.$container.find('span').width() &gt; wrapWidth &amp;&amp; fontSize &gt; 15) {
    fontSize -= 5;
    self.$el.css('font-size', fontSize);
    }
    fontSize = self.checkHeight(fontSize, wrapHeight);
    self.$el.css('font-size', fontSize);
    if (!isCanvas) {
    self.$container.css('margin-top', self.getMinMargin(parseInt((wrapHeight - fontSize) / 2, 10) - this.minMargin));
    self.$container.css('margin-bottom', self.getMinMargin(parseInt((wrapHeight - fontSize) / 2, 10) - this.minMargin));
    } else {
    self.$container.css('margin-top', self.getMinMargin(parseInt((wrapHeight - fontSize) / 2, 10)));
    self.$container.css('margin-bottom', self.getMinMargin(parseInt((wrapHeight - fontSize) / 2, 10)));
    }
    self.$container.css({
    'margin-left': this.minMargin + 'px',
    'margin-right': this.minMargin + 'px',
    });
    };
    SingleScore.prototype.updateScore = function updateScore(channelData, singleScoreResponse) {
    var self = this;
    try {
    var $element = jQuery('#' + self.reportId);
    var $parent = $element.closest('span');
    var score = singleScoreResponse.value * 1;
    if (typeof channelData.data.count !== 'undefined' &amp;&amp; typeof score === 'number') {
    score += (channelData.data.count * 1);
    if (score &lt; 0)
    score = 0;
    var localizedScore = score.toLocaleString();
    if (window.isMSIE10)
    localizedScore = localizedScore.substring(0, localizedScore.indexOf('.'));
    if ($parent.attr('data-original-title'))
    $parent.attr('data-original-title', $parent.attr('data-original-title').replace(singleScoreResponse.displayvalue, localizedScore));
    $element.text(localizedScore);
    $element.css('color', self.evaluateColor(score, singleScoreResponse.rules, singleScoreResponse.color));
    if (singleScoreResponse.displayValueChars !== singleScoreResponse.displayvalue.length) {
    self.updateSize();
    singleScoreResponse.displayValueChars = singleScoreResponse.displayvalue.length;
    }
    singleScoreResponse.value = score;
    singleScoreResponse.displayvalue = localizedScore;
    }
    } catch (error) {
    console.log(error);
    showError(SingleScore.containerId, 'An error occured while generating chart.');
    }
    };
    SingleScore.prototype.generateTitle = function generateTitle(titleProps) {
    var defaultFontSize = 14;
    var $container = jQuery('#' + this.containerId).find('.single-score');
    var $titleEl = jQuery('&lt;div class="singlescore_title"/&gt;')
    .text(titleProps.title)
    .attr('title', titleProps.title);
    if ($titleEl.tooltip &amp;&amp; !this.isServicePortal)
    $titleEl
    .attr('data-container', 'body')
    .attr('data-placement', 'top')
    .tooltip()
    .hideFix();
    if (titleProps.chart_title_color)
    $titleEl.css('color', titleProps.chart_title_color);
    if (titleProps.chart_title_size)
    $titleEl.css('font-size', titleProps.chart_title_size + 'px');
    if (titleProps.title_horizontal_alignment)
    $titleEl.css('text-align', titleProps.title_horizontal_alignment);
    if (!titleProps.custom_chart_title_position)
    switch (titleProps.title_vertical_alignment) {
    case 'top':
    $container.prepend($titleEl);
    break;
    case 'middle':
    $titleEl.css({ position: 'absolute', width: '100%', top: '50%', 'margin-top': -(titleProps.chart_title_size / 2) || -(defaultFontSize / 2) });
    $container.prepend($titleEl);
    break;
    case 'bottom':
    $container.append($titleEl);
    break;
    }
    else {
    $titleEl.css({ position: 'absolute', top: titleProps.chart_title_y_position, left: titleProps.chart_title_x_position });
    $container.css({ paddingTop: (titleProps.chart_title_size + 20) || (20 + defaultFontSize) });
    $container.prepend($titleEl);
    }
    };
    SingleScore.prototype.getMinMargin = function getMinMargin(val) {
    return (val &lt; this.minMargin) ? this.minMargin : val;
    };
    SingleScore.prototype.checkHeight = function checkHeight(fontSize, height) {
    return ((fontSize + (2 * this.minMargin)) &gt; height) ? parseInt(this.relativeFontSize * height, 10) : fontSize;
    };
    SingleScore.prototype.buildRequestParams = function buildRequestParams(params) {
    return {
    sysparm_table: params.table,
    sysparm_aggregate: params.aggregate,
    sysparm_sumfield: params.agg_field,
    sysparm_query: params.filter,
    sysparm_interactive_report: params.interactive_report,
    sysparm_report_drilldown: params.report_drilldown,
    sysparm_report_id: params.report_id,
    sysparm_score_color: params.score_color,
    sysparm_chart_title_color: params.chart_title_color,
    sysparm_homepage_sysid: params.homepage_sysid,
    sysparm_chart_background_color: params.chart_background_color,
    sysparm_list_ui_view: params.list_ui_view,
    sysparm_decimal_precision: params.decimal_precision,
    sysparm_report_source_id: params.report_source_id,
    sysparm_is_report_source_filter_already_combined: params.is_report_source_filter_already_combined,
    sysparm_show_zero: params.show_zero,
    sysparm_is_published: params.is_published,
    sysparm_set_redirect: params.set_redirect
    };
    };
    SingleScore.prototype.showMessage = function showMessage(msg, level) {
    var self = this;
    if (level === 'FAILURE')
    jQuery('#' + self.containerId).html('&lt;div class="single-score-error"&gt;ERROR: ' + msg + '&lt;/div&gt;');
    else
    jQuery('#' + self.containerId).html('&lt;div&gt;' + msg + '&lt;/div&gt;');
    };
    SingleScore.prototype.resizeHandlers = function resizeHandlers(data) {
    if (data.action === 'resize')
    this.updateSize();
    };
    SingleScore.prototype.eventHandlers = function eventHandlers() {
    var self = this;
    this.$container.on('click', 'a', function clickCb(ev) {
    ev.preventDefault();
    var openNewTab;
    if (ev.ctrlKey || ev.metaKey)
    openNewTab = true;
    if (self.widgetNav)
    window.open(self.widgetNav, openNewTab ? '_blank' : '_self');
    else {
    var drillDownUrl = jQuery(this).attr('rel');
    drillDownUrl = decodeURIComponent(drillDownUrl);
    generateDataPointClickUrl(ev, '#' + self.containerId, self.reportDrilldown, self.table, drillDownUrl, self.listUIViewName, self.drillOpenNewWin);
    }
    });
    if (jQuery &amp;&amp; window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; self.containerId.indexOf('preview') === -1) {
    var rootReportId = self.$container.closest('.grid-stack-item').find(self.rootReportElementClass).first().val();
    var uuid = self.$container.closest('.grid-stack-item').attr('data-uuid');
    if (uuid) {
    window.SNC.reportResizingFunctions = window.SNC.reportResizingFunctions || {};
    SNC.canvas.eventbus.subscribe(uuid, this.resizeHandlers.bind(this));
    SNC.reportResizingFunctions[uuid] = this.resizeHandlers;
    }
    window.SNC.reportResizingTimeouts = window.SNC.reportResizingTimeouts || {};
    window.addEventListener('resize', function resizeCb() {
    if (SNC.reportResizingTimeouts[rootReportId])
    clearTimeout(SNC.reportResizingTimeouts[rootReportId]);
    SNC.reportResizingTimeouts[rootReportId] = setTimeout(function resizingTimeoutCb() {
    self.updateSize();
    }, 250);
    }, false);
    }
    };
    ;
    /*! RESOURCE: /scripts/reportcommon/customvisuals/calendar.js */
    var Calendar = function Calendar(reportUUID, runType, reportParams) {
    'use strict';
    var Moment = moment;
    if (!reportParams) {
    reportParams = window.g_report_params[reportUUID];
    reportParams.is_report_source_filter_already_combined = true;
    }
    createReportTemplate(reportUUID, reportParams);
    this.combinedFilter = reportParams.filter;
    this.containerId = 'chart-container-' + reportUUID;
    this.startTime = new Date().getTime();
    var self = this;
    function showMessage(msg, level) {
    if (level === 'FAILURE')
    jQuery('#' + self.containerId).siblings('.report-message').addClass('pivot-error').text(msg);
    else
    jQuery('#' + self.containerId).siblings('.report-message').text(msg);
    }
    this.init = function init() {
    showReportIsLoading(findGridWindowFromElementID(self.containerId));
    self.runCalendar(reportParams, runType);
    };
    this.runCalendar = function runCalendar() {
    self.reportId = reportParams.report_id || 'calendar';
    window.calendarReport = window.calendarReport || {};
    window.calendarReport[self.reportId] = window.calendarReport[self.reportId] || {};
    reportParams.styleField = reportParams.styleField || window.calendarReport[self.reportId].highlight || reportParams.calstyle;
    var defaultDateOverride = null;
    if (reportParams.year || reportParams.month || reportParams.day)
    defaultDateOverride = moment({ year: reportParams.year, month: reportParams.month, day: reportParams.day }).format('YYYY-MM-DD');
    if (reportParams.calview === 'week')
    reportParams.calview = 'agendaWeek';
    else if (reportParams.calview === 'day')
    reportParams.calview = 'agendaDay';
    var calWidth = jQuery('#' + self.containerId).width();
    var yearCols = 2;
    if (calWidth &lt; 640)
    yearCols = 1;
    else if (calWidth &gt; 1280)
    yearCols = 3;
    jQuery('#' + self.containerId).empty().fullCalendar('destroy');
    jQuery('#' + self.containerId).fullCalendar({
    theme: false,
    buttonText: chartHelpers.i18n.buttonText,
    dayNames: chartHelpers.i18n.daysNames,
    dayNamesShort: chartHelpers.i18n.dayNamesShort,
    monthNames: chartHelpers.i18n.monthNames,
    monthNamesShort: chartHelpers.i18n.monthNamesShort,
    allDayHtml: chartHelpers.i18n.allDayHtml,
    weekNumberTitle: chartHelpers.i18n.weekNumberTitleShort,
    weekNumberCalculation: window.chartHelpers.systemParams.firstDay === 0 ? 'local' : 'ISO',
    isRTL: chartHelpers.i18n.isRTL,
    buttonIcons: {
    prev: 'left-single-arrow',
    next: 'right-single-arrow',
    prevYear: 'left-double-arrow',
    nextYear: 'right-double-arrow'
    },
    fixedWeekCount: true,
    timeFormat: 'H:mm',
    slotLabelFormat: 'H:mm',
    axisFormat: 'H:mm',
    firstDay: window.chartHelpers.systemParams.firstDay,
    defaultDate: window.calendarReport[self.reportId].start || defaultDateOverride || window.chartHelpers.systemParams.defaultDate,
    defaultView: window.calendarReport[self.reportId].view || reportParams.calview || 'month',
    defaultTimedEventDuration: window.chartHelpers.systemParams.defaultEventDuration,
    yearColumns: yearCols,
    slotEventOverlap: window.chartHelpers.systemParams.slotEventOverlap ? true : false,
    lazyFetching: false,
    height: 'auto',
    contentHeight: 'auto',
    eventLimit: parseInt(window.chartHelpers.systemParams.maxEventsDisplayedPerCell, 10) + 1,
    nextDayThreshold: '00:00:00',
    eventLimitText: function eventLimitText(amountOfEvents) {
    if (amountOfEvents &lt;= parseInt(window.chartHelpers.systemParams.maxMoreEventsPerDay, 10))
    return chartHelpers.i18n.plusMore.format(amountOfEvents);
    return chartHelpers.i18n.plusMany;
    },
    eventLimitClick: function eventLimitClick(cellInfo, jsEvent) {
    setTimeout(function timeoutCb() {
    jQuery('#' + self.containerId).find('.fc-close').attr('tabindex', 0);
    }, 500);
    if (cellInfo.date &amp;&amp; cellInfo.hiddenSegs &amp;&amp; cellInfo.hiddenSegs.length &gt; parseInt(window.chartHelpers.systemParams.maxMoreEventsPerDay, 10)) {
    var selectedDate = moment(cellInfo.date).format('YYYY-MM-DD');
    self.drillViewToList({ data: { startDate: selectedDate, endDate: selectedDate } });
    return false;
    }
    return 'popover';
    },
    views: {
    month: {
    weekNumbers: true
    },
    year: {
    weekNumbers: true
    }
    },
    header:	{
    left: 'agendaDay,agendaWeek,month,year',
    center: 'title',
    right: 'today prevYear,prev,next,nextYear'
    },
    eventDataTransform: function (event) {
    var view = jQuery('#' + self.containerId).fullCalendar('getView');
    if (view.name === 'agendaDay') {
    if (event.start &amp;&amp; event.end) {
    var viewStartMoment = new Moment(view.intervalStart.toISOString());
    var viewEndMoment = new Moment(view.intervalEnd.toISOString());
    if ((viewStartMoment.isSame(event.start) || viewStartMoment.isAfter(event.start))
    &amp;&amp; (viewEndMoment.isBefore(event.end) || viewEndMoment.isSame(event.end)))
    event.allDay = true;
    }
    }				else if (view.name === 'agendaWeek')
    if (event.start &amp;&amp; event.end) {
    var eventStartMoment = new Moment(event.start);
    var eventEndMoment = new Moment(event.end);
    var hoursDiff = eventEndMoment.diff(eventStartMoment, 'hours');
    var startOfDayOfEventStartMoment = new Moment(event.start).startOf('day');
    if (hoursDiff &gt;= 24
    &amp;&amp; ((startOfDayOfEventStartMoment).isSame(eventStartMoment)
    || eventEndMoment.diff(startOfDayOfEventStartMoment, 'day') &gt;= 2))
    event.allDay = true;
    }
    return event;
    },
    eventMouseover: function eventMouseover(event, jsEvent, view) {
    if (window.chartHelpers.systemParams.enablePreviewOnHover &amp;&amp; window.chartHelpers.systemParams.enablePreviewOnHover !== 'false')
    popRecordDiv(jsEvent, reportParams.table, event.id);
    },
    eventMouseout: function eventMouseout(event, jsEvent, view) {
    if (window.chartHelpers.systemParams.enablePreviewOnHover &amp;&amp; window.chartHelpers.systemParams.enablePreviewOnHover !== 'false')
    lockPopup(jsEvent);
    },
    viewRender: function viewRender(view, element) {
    jQuery('#' + self.containerId).siblings('.report-message').text(chartHelpers.i18n.building);
    },
    eventAfterAllRender: function eventAfterAllRender(view) {
    var start = new Moment(view.intervalStart.toISOString());
    if (start.isValid())
    window.calendarReport[self.reportId] = {
    view: view.name,
    start: start.format('YYYY-MM-DD'),
    highlight: reportParams.styleField
    };
    var viewStart = new Moment(view.start.toISOString());
    if (viewStart.isValid()) {
    var dateAfterLastDateInView = new Moment(view.end.toISOString());
    var viewEnd = dateAfterLastDateInView.subtract(1, 'day');
    self.buildDrillViewToListLink(viewStart.format('YYYY-MM-DD'), viewEnd.format('YYYY-MM-DD'));
    }
    jQuery('#' + self.containerId).siblings('.report-message').empty();
    if (window.g_accessibility === 'true' || window.g_accessibility === true)
    self.enableAccessibility();
    },
    eventSources: [{
    allDayDefault: false,
    backgroundColor: 'white',
    borderColor: 'lightgrey',
    textColor: 'black',
    editable: false,
    events: function events(start, end, timezone, fullCalendarCallback) {
    var processor = runType === 'run' ? 'CalendarRunProcessor' : 'CalendarRunPublishedProcessor';
    jQuery.ajax({
    method: 'POST',
    url: '/xmlhttp.do',
    dataType: 'xml',
    headers: { 'X-UserToken': window.g_ck },
    data: {
    sysparm_processor: processor,
    sysparm_scope: 'global',
    is_portal: reportParams.is_portal,
    start_date: start.format('YYYY-MM-DD').toString(),
    end_date: end.format('YYYY-MM-DD').toString(),
    style_field: reportParams.styleField,
    sysparm_timer: new Date().getTime(),
    sysparm_request_params: JSON.stringify(self.buildRequestParams(reportParams))
    }
    }).done(function doneCb(xml) {
    self.processResponse(xml, fullCalendarCallback);
    }).fail(function failCb(jqXHR, textStatus, error) {
    console.log(textStatus, error);
    });
    }
    }],
    dayClick: function dayClick(date, jsEvent, view) {
    jQuery('#' + self.containerId).fullCalendar('changeView', 'agendaDay');
    jQuery('#' + self.containerId).fullCalendar('gotoDate', date);
    }
    });
    };
    this.buildDrillViewToListLink = function buildDrillViewToListLink(startDateString, endDateString) {
    var $drillToListLink = jQuery('#' + self.containerId + ' #drillViewToList');
    if (!$drillToListLink.length) {
    $drillToListLink = jQuery('&lt;a/&gt;', { id: 'drillViewToList', class: 'all-records-link', target: '_blank' }).text(chartHelpers.i18n.viewAllRecords);
    jQuery('#' + self.containerId + ' .highlight-wrap').append($drillToListLink);
    }
    $drillToListLink.attr('href', self.buildDrillViewToListUrl(startDateString, endDateString));
    };
    this.buildDrillViewToListUrl = function buildDrillViewToListUrl(startDate, endDate) {
    var calField = reportParams.cal_field;
    var query = '';
    if (self.combinedFilter)
    query += self.combinedFilter + '^';
    var minutesToSubtract = moment.duration(window.chartHelpers.systemParams.defaultEventDuration, 'HH:mm:ss').asMinutes();
    query += calField + '&gt;=javascript:gs.dateAdd(\'minute\', -' + minutesToSubtract + ', gs.dateGenerate(\'' + startDate + '\',\'start\'))^' + calField + '&lt;=javascript:gs.dateGenerate(\'' + endDate + '\',\'end\')';
    var isStartField = calField.indexOf('_start', calField.length - '_start'.length) !== -1 || calField.indexOf('start_') === 0 || calField.indexOf('_start_') !== -1 || calField === 'start';
    if (isStartField) {
    var calEndField = calField.replace(/start/g, 'end');
    var hasEndField = true;
    if (typeof Table !== 'undefined') {
    var calendarTable = Table.get(reportParams.table);
    if (calendarTable)
    var element = calendarTable.getElement(calEndField);
    if (!element)
    hasEndField = false;
    }
    if (hasEndField) {
    var firstDateBeforeStart = new Moment(startDate).subtract(parseInt(window.chartHelpers.systemParams.maxDaysBack, 10), 'day').format('YYYY-MM-DD');
    query += '^NQ';
    if (self.combinedFilter)
    query += self.combinedFilter + '^';
    query += calField + '&gt;=javascript:gs.dateGenerate(\'' + firstDateBeforeStart + '\',\'start\')^'
    + calField + '&lt;=javascript:gs.dateGenerate(\'' + endDate + '\',\'end\')^'
    + calEndField + '&gt;=javascript:gs.dateGenerate(\'' + startDate + '\',\'start\')^EQ';
    }
    }
    return reportParams.table + '_list.do?sysparm_query=' + encodeURIComponent(query);
    };
    this.drillViewToList = function drillViewToList(event) {
    var startDate = event.data.startDate;
    var endDate = event.data.endDate;
    var drillViewToListUrl = self.buildDrillViewToListUrl(startDate, endDate);
    window.open(drillViewToListUrl, '_blank');
    };
    this.processResponse = function processResponse(response, fullcalendarCallback) {
    if (!response)
    showError(self.containerId, 'No response from the server');
    else {
    var resp = JSON.parse(jQuery(response).find('RESPONSE').text());
    if (resp.STATUS === 'SUCCESS')
    try {
    var responseData = resp.RESPONSE_DATA;
    self.combinedFilter = responseData.filterQuery;
    self.populateStyleFields(responseData.styleFields);
    fullcalendarCallback(responseData.calendarEvents);
    if (responseData.message)
    showMessage(responseData.message, 'INFO');
    } catch (err) {
    showMessage(chartHelpers.i18n.chartGenerationError, 'FAILURE');
    console.log(err);
    }
    else {
    fullcalendarCallback([]);
    showMessage(resp.RESPONSE_DATA, resp.STATUS);
    }
    }
    hideReportIsLoading(findGridWindowFromElementID(self.containerId));
    var now = new Date().getTime();
    var elapsedTime = (now - self.startTime) / 1000;
    console.log('Time taken to render report: ' + elapsedTime);
    };
    this.populateStyleFields = function populateStyleFields(styleFields, args) {
    if (jQuery('#' + self.containerId + ' .highlight-dropdown').length)
    return;
    var $highlightWrap = jQuery('#' + self.containerId).append('&lt;div class="highlight-wrap"/&gt;');
    if (styleFields &amp;&amp; styleFields.length) {
    var highlightOptions;
    var selectedOption = '';
    for (var i = 0; i &lt; styleFields.length; i++) {
    if (i === 0)
    highlightOptions += '&lt;option value=""&gt;' + chartHelpers.i18n.none + '&lt;/option&gt;';
    if (reportParams.styleField)
    if (styleFields[i].name === reportParams.styleField)
    highlightOptions += '&lt;option selected="selected" value="' + styleFields[i].name + '" &gt;' + styleFields[i].label + '&lt;/option&gt;';
    else
    highlightOptions += '&lt;option value="' + styleFields[i].name + '" &gt;' + styleFields[i].label + '&lt;/option&gt;';
    else
    highlightOptions += '&lt;option  value="' + styleFields[i].name + '" &gt;' + styleFields[i].label + '&lt;/option&gt;';
    }
    $highlightWrap.find('.highlight-wrap')
    .append(jQuery('&lt;label for="highlight_field" /&gt;').text(chartHelpers.i18n.highlightBasedOn)).append(jQuery('&lt;select id="highlight_field" class="highlight-dropdown form-control"/&gt;')
    .html(highlightOptions));
    jQuery('#' + self.containerId + ' .highlight-dropdown').on('change', function changeCb() {
    reportParams.styleField = this.value;
    jQuery('#' + self.containerId).fullCalendar('refetchEvents');
    });
    }
    };
    this.enableAccessibility = function enableAccessibility() {
    jQuery('#' + self.containerId).find('table').attr('role', 'grid').find('tr')
    .attr('role', 'row')
    .find('.fc-more')
    .attr('tabindex', 0);
    jQuery('#' + self.containerId).find('thead th').attr({ role: 'columnheader', scope: 'col' });
    jQuery('#' + self.containerId).find('tbody td').attr({ role: 'gridcell' });
    };
    this.buildRequestParams = function buildRequestParams() {
    return {
    sysparm_cal_field: reportParams.cal_field,
    sysparm_table: reportParams.table,
    sysparm_report_id: reportParams.report_id,
    sysparm_report_source_id: reportParams.report_source_id,
    sysparm_is_report_source_filter_already_combined: reportParams.is_report_source_filter_already_combined,
    sysparm_query: reportParams.filter,
    sysparm_list_ui_view: reportParams.list_ui_view,
    sysparm_homepage_sysid: reportParams.homepage_sysid,
    sysparm_is_published: reportParams.is_published
    };
    };
    this.init();
    };
    String.prototype.format = function formatString() {
    var args = arguments;
    return this.replace(/\{(\d+)\}/g, function replaceCb() {
    return args[arguments[1]];
    });
    };
    ;
    /*! RESOURCE: /scripts/reportcommon/hcformatterfuncs.js */
    function hc_legendLabelShortenedFormatter() {
    var legendLabelMaxLength = (this.userOptions !== undefined &amp;&amp; this.userOptions.legend_label_max_length !== undefined) ? this.userOptions.legend_label_max_length : 30;
    return this.name.length &gt; legendLabelMaxLength ? this.name.substring(0, legendLabelMaxLength) + '...' : this.name;
    }
    function hc_legendLabelPercentFormatter() {
    return this.name + ' = ' + this.y_tooltip + ' (' + this.percent + '%)';
    }
    function hc_legendLabelShortenedPercentFormatter() {
    var shortenedLabel = this.name.length &gt; this.options.legend_label_max_length ? this.name.substring(0, this.options.legend_label_max_length) + '...' : this.name;
    return shortenedLabel + ' = ' + this.y_tooltip + ' (' + this.percent + '%)';
    }
    function hc_formatNameValueLabel() {
    var label = this.point.name + ' = ' + ((typeof this.point.y_tooltip !== 'undefined') ? this.point.y_tooltip : this.point.y);
    var labelMaxLength = (this.point.data_label_max_length !== undefined) ? this.point.data_label_max_length : 16;
    var truncateLabels = (this.point.truncate_data_labels !== undefined) ? this.point.truncate_data_labels : 'false';
    var removeLeading = (this.point.data_labels_remove_leading !== undefined) ? this.point.data_labels_remove_leading : 'false';
    if (truncateLabels === true &amp;&amp; label.length &gt; labelMaxLength)
    label = (removeLeading === true) ? label = '...' + label.substring(label.length - labelMaxLength) : label.substring(0, labelMaxLength) + '...';
    return label;
    }
    function hc_formatParetoAxisLabels() {
    var total = 1.0;
    var pcnt = Highcharts.numberFormat(((this.value / parseFloat(total)) * 100), 0, '.');
    return pcnt + '%';
    }
    function hc_formatValueLabel() {
    var label = ((typeof this.point.y_tooltip !== 'undefined') ? this.point.y_tooltip : this.point.y);
    var labelMaxLength = (this.point.data_label_max_length !== undefined) ? this.point.data_label_max_length : 16;
    var truncateLabels = (this.point.truncate_data_labels !== undefined) ? this.point.truncate_data_labels : 'false';
    var removeLeading = (this.point.data_labels_remove_leading !== undefined) ? this.point.data_labels_remove_leading : 'false';
    if (truncateLabels === true &amp;&amp; label.length &gt; labelMaxLength)
    label = (removeLeading === true) ? label = '...' + label.substring(label.length - labelMaxLength) : label.substring(0, labelMaxLength) + '...';
    if (label)
    return label;
    return undefined;
    }
    function hc_formatParetoLabelLine() {
    var label = this.point.percent + '%';
    var labelMaxLength = (this.point.data_label_max_length !== undefined) ? this.point.data_label_max_length : 16;
    var truncateLabels = (this.point.truncate_data_labels !== undefined) ? this.point.truncate_data_labels : 'false';
    var removeLeading = (this.point.data_labels_remove_leading !== undefined) ? this.point.data_labels_remove_leading : 'false';
    if (truncateLabels === true &amp;&amp; label.length &gt; labelMaxLength)
    label = (removeLeading === true) ? label = '...' + label.substring(label.length - labelMaxLength) : label.substring(0, labelMaxLength) + '...';
    return label;
    }
    function hc_formatDurationLabel() {
    var secs = this.value;
    var prepend = '';
    if (secs &lt; 0)
    prepend = '-';
    if (secs &lt; 0)
    secs *= -1;
    var days = Math.floor(secs / 86400);
    var hours = Math.floor((secs % 86400) / 3600);
    var mins = Math.floor(((secs % 86400) % 3600) / 60);
    secs = ((secs % 86400) % 3600) % 60;
    var i18n = this.chart.options.lang;
    if (days &gt; 0)
    return prepend + days + ' ' + i18n.days.toLowerCase() + ' ' + hours + ' ' + i18n.hours.toLowerCase() + ' ' + mins + ' ' + i18n.minutes.toLowerCase() + ' ' + secs + ' ' + i18n.seconds.toLowerCase();
    if (hours &gt; 0)
    return prepend + hours + ' ' + i18n.hours.toLowerCase() + ' ' + mins + ' ' + i18n.minutes.toLowerCase() + ' ' + secs + ' ' + i18n.seconds.toLowerCase();
    if (mins &gt; 0)
    return prepend + mins + ' ' + i18n.minutes.toLowerCase() + ' ' + secs + ' ' + i18n.seconds.toLowerCase();
    return prepend + secs + ' ' + i18n.seconds.toLowerCase();
    }
    ;
    /*! RESOURCE: /scripts/interactive_reports.js */
    function getListURL(table, urlInfo, viewName) {
    var url = {};
    url.endpoint = '/' + table + '_list.do';
    url.params = {};
    if (urlInfo)
    url.params.sysparm_query = urlInfo;
    if (viewName)
    url.params.sysparm_view = viewName;
    return generateWholeUrl(url);
    }
    function generateWholeUrl(url) {
    if (!jQuery.isEmptyObject(url.params))
    return url.endpoint + '?' + Object.keys(url.params).map(function mapFunction(key) {
    return key + '=' + encodeURIComponent(url.params[key]).replace(/%40/gi, '@').replace(/%3A/gi, ':');
    }).join('&amp;');
    return url.endpoint;
    }
    function drillReport(targetSpan, reportDrillId, newQuery, extraParams) {
    var interactiveReport = {};
    var url = {};
    url.params = {};
    interactiveReport.additional_query = newQuery;
    url.endpoint = '/report_viewer.do';
    var $publicPage = jQuery('#public-page');
    if ($publicPage.length &amp;&amp; $publicPage.val() === 'true')
    url.endpoint = '/report_viewer_published.do';
    url.params.jvar_report_id = reportDrillId;
    url.params.sysparm_interactive_report = JSON.stringify(interactiveReport);
    if (extraParams)
    url.endpoint = url.endpoint + '?' + extraParams;
    reportReplace(targetSpan, url, true);
    }
    function drillList(targetSpan, table, newQuery, listView) {
    var url = {};
    url.endpoint = '/report_viewer.do';
    url.params = {
    sysparm_type: 'list',
    sysparm_query: newQuery,
    sysparm_view: listView,
    sysparm_table: table
    };
    reportReplace(targetSpan, url);
    }
    function embedReportById(targetSpan, reportId) {
    embedReportByParams(targetSpan, { jvar_report_id: reportId });
    }
    function isServicePortal() {
    return jQuery('html').attr('ng-app') === 'ng_spd' || (window.NOW &amp;&amp; window.NOW.hasOwnProperty('sp'));
    }
    function embedReportByParams(targetSpan, params) {
    var url = {};
    url.params = {};
    url.endpoint = '/report_viewer.do';
    if (!isServicePortal())
    url.params.sysparm_inline_embed = 'true';
    if (params)
    for (var key in params)
    if (typeof params[key] !== 'undefined')
    url.params[key] = params[key].toString() || '';
    reportReplace(targetSpan, url);
    }
    function reportReplace(targetSpan, url, stick) {
    if (!targetSpan)
    throw new Error('Report replace called, but the element to replace was not found!');
    CustomEvent.fireTop('request_start', document);
    url.params = url.params || {};
    url.params.sysparm_nostack = 'true';
    url.params['ni.nolog.x_referer'] = 'ignore';
    url.params.x_referer = buildReferringURL();
    var isPortal = targetSpan.find('.jvar_is_portal').first();
    var rootReportId;
    if (isPortal.length &amp;&amp; isPortal.val() === 'true')
    url.params.jvar_is_portal = 'true';
    if (isServicePortal())
    url.params.jvar_is_portal = 'true';
    if (window.isEmbeddedReport === 'true')
    window.location.href = generateWholeUrl(url);
    else {
    if (window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.reportResizingFunctions) {
    rootReportId = targetSpan.find('.sysparm_root_report_id').first().val();
    var uuid = SNC.canvas.canvasUtils.getUuidFromSysId(rootReportId);
    if (uuid &amp;&amp; SNC.reportResizingFunctions[uuid])
    SNC.canvas.eventbus.unsubscribe(uuid, SNC.reportResizingFunctions[uuid]);
    }
    url.params.sysparm_direct = 'true';
    if (window.isInlineEmbed) {
    rootReportId = targetSpan.find('.sysparm_root_report_id').first().val();
    url.params.sysparm_inline_embed = window.isInlineEmbed[rootReportId];
    }
    showReportIsLoading(findGridWindowFromElement(targetSpan), targetSpan, stick);
    url.params.sysparm_processor = '';
    url.params.sysparm_scope = 'global';
    url.params.jvar_report_id = url.params.jvar_report_id || '';
    url.params.sysparm_interactive_report = url.params.sysparm_interactive_report || '';
    jQuery.ajax({
    method: 'POST',
    url: url.endpoint,
    dataType: 'text',
    data: url.params
    }).done(function doneAjax(xml) {
    reportReplaceCallback(xml, targetSpan);
    }).fail(function failedAjax(jqXHR, textStatus, error) {
    console.log(textStatus, error);
    });
    }
    }
    function evaluateScriptTags(htmlNode) {
    var arr = htmlNode.getElementsByTagName('script');
    try {
    for (var n = 0; n &lt; arr.length; n++) {
    if (arr[n].type !== 'application/xml' &amp;&amp; arr[n].innerHTML)
    eval(arr[n].innerHTML);
    }
    } catch (error) {
    throw new Error(error);
    }
    }
    function reportReplaceCallback(html, targetSpan) {
    var scrollTop;
    if (window.isMSIE)
    scrollTop = document.body.scrollTop;
    var isList = html.indexOf('chart_type = "list"') &gt; -1;
    if (isRenderedInCanvas()) {
    html += ' &lt;div class="end-of-widget"&gt;&lt;/div&gt;';
    updateWidgetCacheInCanvas(html, targetSpan);
    }
    if (isList &amp;&amp; isServicePortal())
    html = '&lt;div style="margin:20px 10px;"&gt;List chart is not supported in Service Portal widgets. Please use Simple List widget instead.&lt;/div&gt;';
    if (targetSpan[0])
    targetSpan[0].innerHTML = html;
    var htmlNode = document.createElement('div');
    htmlNode.innerHTML = html;
    if (isList &amp;&amp; !isServicePortal())
    html.evalScripts();
    else
    evaluateScriptTags(htmlNode);
    CustomEvent.fireTop('request_complete', document);
    CustomEvent.fire('partial.page.reload', targetSpan);
    if (window.isMSIE)
    document.body.scrollTop = scrollTop;
    }
    function generateDataPointClickUrl(event, element, reportDrilldown, table, clickUrlInfo, listUiViewName, drillOpenNewWin, isOther, mapKey, actualMap, showDataLabel, showGeographicalLabel) {
        var clickUrl;
    if (typeof jQuery !== 'undefined') {
    var content = jQuery(element).closest('.report_content');
    if (content.length &amp;&amp; reportDrilldown) {
    var mapParams = '';
    if (mapKey)
    mapParams = 'sysparm_report_map_key=' + mapKey;
    if (actualMap)
    mapParams += '&amp;sysparm_report_map_parent=' + actualMap;
    if (showDataLabel)
    mapParams += '&amp;sysparm_show_chart_data_label=' + showDataLabel;
    if (showGeographicalLabel)
    mapParams += '&amp;sysparm_show_geographical_label=' + showGeographicalLabel;
    drillReport(content.parent(), reportDrilldown, clickUrlInfo, mapParams);
    return;
    }
    clickUrl = getListURL(table, clickUrlInfo, listUiViewName);
    }
    clickUrl = getListURL(table, clickUrlInfo, listUiViewName);
    if (isServicePortal())
    clickUrl = addNavToUrl(clickUrl);
    /*
    Edited By Rahul Pandey @rahul.pandey@hotmail.co.in
    this is an override for native UI navigation
	//
    */
    var portalUrl = portalify(table, clickUrlInfo, listUiViewName);
   
    openUrl(event, portalUrl, drillOpenNewWin, isOther);
    
    }
    function portalify (table, clickUrlInfo, listUiViewName){
        var portal = location.pathname.split('/')[1]; // getting the current portal name for dynamic navigation URL
     return portal+"?id=list&amp;table="+table+"&amp;filter="+clickUrlInfo+"&amp;view="+listUiViewName;
    
    }
    function addNavToUrl(url) {
    return '/nav_to.do?uri=' + encodeURIComponent(url);
    }
    function openUrl(event, clickUrl, drillOpenNewWin, isOther) {
    if (('metaKey' in event &amp;&amp; event.metaKey) || event.ctrlKey)
    window.open(clickUrl);
    else if (isServicePortal())
    top.location.href = clickUrl;
    else if (drillOpenNewWin &amp;&amp; !isOther)
    window.open(clickUrl);
    else if (clickUrl)
    window.location.href = clickUrl;
    }
    function applyExecutiveReport(reportId, groupEl, stackEl, filter) {
    var $groupEl = jQuery(groupEl);
    var $stackEl = jQuery(stackEl);
    var target = $groupEl.closest('.report_content');
    if (target.length)
    target = target.parent();
    var interactiveReport = {};
    interactiveReport.groupby = $groupEl.val();
    if (filter)
    interactiveReport.additional_query = filter;
    if ($stackEl)
    interactiveReport.stackby = $stackEl.val();
    var gaugeId = $groupEl.closest('.sysparm_gauge_id');
    var gridWindow;
    if (typeof glideGrid !== 'undefined' &amp;&amp; target &amp;&amp; target.length)
    gridWindow = glideGrid.getWindow(target.closest('[dragpart]').first().attr('dragpart'));
    else if (gaugeId)
    gridWindow = _getGridWindow(gaugeId.value, reportId);
    if (gridWindow &amp;&amp; gridWindow.getDashboardMessageHandler() !== undefined)
    interactiveReport.additional_filters = gridWindow.getDashboardMessageHandler().getCurrentFilters();
    interactiveReport = JSON.stringify(interactiveReport);
    var interactiveReportEl = jQuery('#sysparm_interactive_report')[0];
    if (((typeof runReport === 'function' &amp;&amp; interactiveReportEl) || (typeof gReport !== 'undefined' &amp;&amp; gReport.isDesigner)) &amp;&amp; !filter) {
    if (typeof runReport === 'function') {
    interactiveReportEl.value = interactiveReport;
    runReport(false);
    } else
    NOW.CustomEvent.fire('reportDesigner:runInteractiveReport', interactiveReport);
    } else {
    var $publicPage = jQuery('#public-page');
    var url = {
    endpoint: $publicPage.length &amp;&amp; $publicPage.val() === 'true' ? '/report_viewer_published.do' : '/report_viewer.do',
    params: {
    jvar_report_id: reportId,
    sysparm_interactive_report: interactiveReport
    }
    };
    reportReplace(target, url);
    }
    }
    function initializeInteractionOnGauge(reportId, rootReportId, gaugeId, homepageFilters, chartType, aggregateType) {
    if (!gaugeId)
    return;
    var gridWindow = _getGridWindow(gaugeId, rootReportId);
    if (typeof gridWindow === 'undefined' || !gridWindow)
    return;
    var realTime = chartType === 'single_score' &amp;&amp; aggregateType === 'COUNT';
    if (realTime) {
    gridWindow.setPreference('can_real_time', 'true');
    if (window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.appProperties.sysparm_media !== 'print') {
    var uuid = SNC.canvas.canvasUtils.getUuidFromSysId(reportId);
    SNC.canvas.canvasUtils.displayRealTimeIndicator(uuid, gridWindow.getPreference('real_time') === 'true');
    }
    }
    gridWindow.setPreference('can_subscribe', 'true');
    var supportedPublisherChartTypes = ['pie', 'donut', 'semi_donut', 'funnel', 'pyramid', 'map'];
    if (supportedPublisherChartTypes.indexOf(chartType) &gt; -1)
    gridWindow.setPreference('can_publish', 'true');
    else
    gridWindow.removePreference('can_publish');
    if (gridWindow.getDashboardMessageHandler() !== undefined) {
    gridWindow.getDashboardMessageHandler().setCurrentFilters(homepageFilters);
    gridWindow.overwriteRefresh(function overwriteRefreshCallback() {
    updateReportInGauge(gridWindow, true, reportId);
    });
    var updateReportFn = updateReportInGauge.bind(null, gridWindow, false, reportId);
    var updateReportWithDelay = debounceHandler(updateReportFn,600,false);
    var updateReportNow = debounceHandler(updateReportFn,0,true);
    gridWindow.getDashboardMessageHandler().setCallback(function getDashboardMessageHandlerCallback() {
    var target = getTargetFromGridWindow(gridWindow);
    if(isRenderedInCanvas())
    showCanvasStyleLoading(target);
    applyInteractiveFiltersToReport(updateReportWithDelay,updateReportNow);
    });
    } else
    gridWindow.overwriteRefresh(function overwriteRefreshSimpleCallback() {
    simpleReportRefresh(gaugeId, rootReportId);
    });
    }
    function _getGridWindow(gaugeId, reportId) {
    var gridWindow;
    if (typeof glideGrid !== 'undefined') {
    gridWindow = glideGrid.getWindowByGaugeId(gaugeId);
    if (typeof gridWindow === 'undefined')
    gridWindow = glideGrid.getWindowByGaugeId(reportId);
    } else if (window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; window.SNC.canvas.canvasUtils) {
    gridWindow = SNC.canvas.canvasUtils.getGlideWindow(gaugeId);
    if (typeof gridWindow === 'undefined')
    gridWindow = SNC.canvas.canvasUtils.getGlideWindow(reportId);
    }
    return gridWindow;
    }
    function updateReportInGauge(gridWindow, refresh, reportId) {
    var interactiveReport = {};
    if (gridWindow)
    interactiveReport.additional_filters = getAdditionalFilter(gridWindow);
    if (refresh &amp;&amp; gridWindow &amp;&amp; gridWindow.consumed)
    interactiveReport.additional_filters = gridWindow.consumed;
    updateAdditionalReportConfig(gridWindow, reportId, interactiveReport, refresh);
    if (gridWindow) {
    gridWindow.consumed = gridWindow.consumed || {};
    gridWindow.consumed = interactiveReport.additional_filters;
    }
    var target;
    target = getTargetFromGridWindow(gridWindow);
    if (target &amp;&amp; target.length) {
    if (refresh) {
    reportId = target.find('.sysparm_root_report_id').first().val();
    } else {
    var filter = target.find('.sysparm_interactive_filter').first().val();
    if (typeof filter !== 'undefined' &amp;&amp; filter)
    interactiveReport.additional_query = filter;
    var groupEl = gel('additional_groupby_' + reportId);
    var stackEl = gel('additional_stackby_' + reportId);
    if (groupEl)
    interactiveReport.groupby = groupEl.value;
    if (stackEl)
    interactiveReport.stackby = stackEl.value;
    }
    }
    var url = {
    endpoint: '/report_viewer.do',
    params: {
    jvar_report_id: reportId,
    jvar_real_time: gridWindow &amp;&amp; gridWindow.getPreference('real_time') &amp;&amp; gridWindow.getPreference('can_real_time'),
    sysparm_interactive_report: JSON.stringify(interactiveReport)
    }
    };
    reportReplace(target, url);
    if (!isRenderedInCanvas())
    showFilterIndicator(target, gridWindow);
    }
    function simpleReportRefresh(gaugeId, reportId) {
    var gridWindow = _getGridWindow(gaugeId, reportId);
    if (typeof gridWindow !== 'undefined' &amp;&amp; gridWindow) {
    if (typeof jQuery !== 'undefined')
    showReportIsLoading(gridWindow);
    gridWindow.render();
    }
    }
    function isRenderedInCanvas() {
    return window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive;
    }
    function findGridWindowFromElementID(id) {
    if (typeof jQuery === 'undefined')
    return null;
    if (typeof glideGrid !== 'undefined')
    return glideGrid.getWindow(jQuery(document).find('#' + id).closest('[dragpart]').first()
    .attr('dragpart'));
    return null;
    }
    function findGridWindowFromElement(target) {
    if (typeof jQuery === 'undefined')
    return null;
    if (typeof glideGrid !== 'undefined')
    return glideGrid.getWindow(target.closest('[dragpart]').first().attr('dragpart'));
    return null;
    }
    function showReportIsLoading(gridWindow, targetSpan, stick) {
    var reportContent;
    var loadingMsg = window.GwtMessage ? new GwtMessage().getMessage('Loading report...') : 'Loading report...';
    if (isServicePortal() || isRenderedInCanvas()) {
    showCanvasStyleLoading(targetSpan);
    return;
    }
    if (!gridWindow) {
    if (targetSpan &amp;&amp; targetSpan.length &gt; 0)
    reportContent = targetSpan[0];
    if (!reportContent)
    reportContent = document.querySelector('.report_content .chart-container');
    if (!reportContent)
    reportContent = document.querySelector('.report_content');
    if (reportContent)
    reportContent.textContent = loadingMsg;
    return;
    }
    gridWindow.showLoading(loadingMsg, stick);
    }
    function hideReportIsLoading(gridWindow) {
    if (typeof gridWindow === 'undefined' || !gridWindow)
    return;
    gridWindow.hideLoading();
    }
    function showFilterIndicator(target, gridWindow) {
    var isFilterSelected = gridWindow.getDashboardMessageHandler().getCurrentFilters().length &gt; 0;
    var isSubscribedAndOptedForFilterIndication = gridWindow.getPreference('can_subscribe') &amp;&amp; typeof gridWindow.getPreference('filter_indicator') === 'undefined' ? false : gridWindow.getPreference('filter_indicator');
    var condition = isFilterSelected &amp;&amp; (isSubscribedAndOptedForFilterIndication === 'true');
    var filterIndicatorPlaceholder = jQuery('#filter-indicator-' + gridWindow.id);
    if (condition)
    filterIndicatorPlaceholder.addClass('active');
    else
    filterIndicatorPlaceholder.removeClass('active');
    }
    function buildReferringURL() {
    var path = location.pathname;
    var args = location.search;
    if (path.substring(path.length - 1) === '/') {
    if (args)
    return args;
    return '';
    }
    return path.substring(path.lastIndexOf('/') + 1) + args;
    }
    function updateAdditionalReportConfig(gridWindow, reportId, interactiveReport, refresh) {
    var isBothPublisherNSubscriber = gridWindow &amp;&amp; gridWindow.preferences.can_publish &amp;&amp; gridWindow.preferences.can_subscribe;
    if (isBothPublisherNSubscriber) {
    var allFilters = isRenderedInCanvas() ? SNC.canvas.interactiveFilters.getDefaultValues() : getAllFiltersForHomePage();
    if (gridWindow.filtersFromLegend)
    interactiveReport.filtersFromLegend = gridWindow.filtersFromLegend;
    var otherFilterCount = 0;
    for (var key in allFilters) {
    if (allFilters.hasOwnProperty(key)) {
    var filter = allFilters[key];
    Array.isArray(filter) &amp;&amp; filter.forEach(function (item) {
    if (item.sliced)
    otherFilterCount++;
    });
    if (key == reportId) {
    Array.isArray(filter) &amp;&amp; filter.forEach(function (item) {
    if (item.sliced) {
    interactiveReport.selectedPoint = item.filter;
    otherFilterCount--;
    }
    });
    }
    }
    }
    if ((!refresh  &amp;&amp;  isFilterValidForRemoval(gridWindow)) || (refresh &amp;&amp; otherFilterCount === 0))
    removeSelfPublishedFilter(interactiveReport, reportId);
    }
    }
    function getAllFiltersForHomePage() {
    var draggables = glideGrid &amp;&amp; glideGrid._getDraggables();
    var allFilters = {};
    for (var i = 0; i &lt; draggables.length; i++) {
    var current = draggables[i];
    if (current &amp;&amp; current.gWindow &amp;&amp; current.gWindow.getDashboardMessageHandler() &amp;&amp;
    !jQuery.isEmptyObject(current.gWindow.getDashboardMessageHandler()._filters)) {
    var keys = Object.keys(current.gWindow.getDashboardMessageHandler()._filters);
    keys.forEach(function(item) {
    allFilters[item] = current.gWindow.getDashboardMessageHandler()._filters[item];
    });
    }
    }
    return allFilters;
    }
    function removeSelfPublishedFilter(interactiveReport, reportId) {
    var hasAdditionalFilter = interactiveReport.additional_filters &amp;&amp; interactiveReport.additional_filters.length &amp;&amp; interactiveReport.selectedPoint;
    if (hasAdditionalFilter || interactiveReport.filtersFromLegend) {
    var newFilter = [];
    interactiveReport.additional_filters.forEach(function(filter) {
    var isCascadingFilter = !Array.isArray(filter);
    if (!isCascadingFilter) {
    filter.forEach(function(childFilter) {
    if (childFilter.id &amp;&amp; childFilter.id.substring(0, reportId.length) != reportId) {
    newFilter.push(filter);
    } else if (!childFilter.id) {
    newFilter.push(filter);
    }
    });
    } else {
    newFilter.push(filter);
    }
    });
    interactiveReport.additional_filters = newFilter;
    }
    }
    function showCanvasStyleLoading(target){
    jQuery(target).find('.report_content').replaceWith('&lt;div class="spinner-container"&gt;&lt;div class="icon icon-loading"&gt;&lt;/div&gt;&lt;/div&gt;');
    }
    function debounceHandler(func, wait, immediate) {
    var timeout;
    return function() {
    var context = this, args = arguments;
    var later = function() {
    timeout = null;
    if (!immediate) func.apply(context, args);
    };
    var callNow = immediate &amp;&amp; !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
    };
    }
    function getTargetFromGridWindow(gridWindow){
    var target;
    if (typeof jQuery !== 'undefined' &amp;&amp; gridWindow) {
    if (isRenderedInCanvas())
    target = jQuery(SNC.canvas.canvasUtils.getWidgetContainer(gridWindow.getID()));
    else
    target = jQuery(gridWindow.body);
    }
    return target;
    }
    function applyInteractiveFiltersToReport(updateReportWithDelay,updateReportNow){
    if (!(window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.chartsActingAsFilters &amp;&amp; SNC.canvas.chartsActingAsFilters.lastPublishTime)) {
    updateReportNow();
    return;
    }
    var isFirstFilterPublished = SNC.canvas.chartsActingAsFilters.previousId == null;
    if (isFirstFilterPublished){
    updateReportWithDelay();
    return;
    }
    var currentTime = Date.now();
    var isFilterPublishedQuickly = (currentTime - SNC.canvas.chartsActingAsFilters.lastPublishTime) &lt; 600;
    var isNewFilterPublishedAfterDelay = (currentTime - SNC.canvas.chartsActingAsFilters.lastPublishTime) &gt; 1000;
    var isFilterFromSameReport =  SNC.canvas.chartsActingAsFilters.currentId === SNC.canvas.chartsActingAsFilters.previousId;
    var isFilterFromOneReport = ((isFilterPublishedQuickly || isNewFilterPublishedAfterDelay) &amp;&amp; isFilterFromSameReport);
    if (isFilterFromOneReport)
    updateReportWithDelay();
    else
    updateReportNow();
    }
    function updateWidgetCacheInCanvas(html, targetSpan) {
    try {
    if (SNC.canvas.canvasUtils.updateWidgetCache &amp;&amp; typeof SNC.canvas.canvasUtils.updateWidgetCache === "function" &amp;&amp; isOnlyInteractiveFilterApplied())
    SNC.canvas.canvasUtils.updateWidgetCache(html, targetSpan);
    } catch (error) {
    if (SNC.canvas.canvasUtils.clearAllWidgetsCache)
    SNC.canvas.canvasUtils.clearAllWidgetsCache();
    }
    }
    function isOnlyInteractiveFilterApplied() {
    var allFilters = window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.interactiveFilters &amp;&amp; SNC.canvas.interactiveFilters.getDefaultValues();
    var isOnlyInteractiveFilter = true;
    for (var key in allFilters) {
    if (allFilters.hasOwnProperty(key)) {
    var filter = allFilters[key];
    if (Array.isArray(filter) &amp;&amp; filter.length) {
    for (var index = 0, len = filter.length; index &lt; len; index++) {
    var item = filter[index];
    if (item.sliced || item.isFromLegend) {
    isOnlyInteractiveFilter = false;
    break;
    }
    }
    }
    }
    }
    return isOnlyInteractiveFilter;
    }
    function isFilterValidForRemoval(gridWindow) {
    var isValidForRemoval = false;
    if (gridWindow) {
    var isBothPublisherNSubscriber = gridWindow.preferences.can_publish &amp;&amp; gridWindow.preferences.can_subscribe;
    var interactiveFilters = gridWindow.interactiveFilters || {};
    var lastItemFromActiveFilterStack = window.SNC &amp;&amp; SNC.interactiveChart &amp;&amp; SNC.interactiveChart.length &amp;&amp; SNC.interactiveChart[SNC.interactiveChart.length - 1];
    if (isBothPublisherNSubscriber &amp;&amp; lastItemFromActiveFilterStack &amp;&amp; interactiveFilters[lastItemFromActiveFilterStack.id])
    isValidForRemoval = true;
    else if (gridWindow.filtersFromLegend &amp;&amp; !(hasBothLegendAndSlicedFilter(interactiveFilters)))
    isValidForRemoval = true;
    }
    return isValidForRemoval;
    }
    function getAllFiltersFromInteractiveUtil() {
    var allFilters = isRenderedInCanvas() ? SNC.canvas.interactiveFilters.getDefaultValues() : getAllFiltersForHomePage();
    var newFilter = [];
    for (var key in allFilters)
    newFilter.push(allFilters[key]);
    return newFilter;
    }
    function getAdditionalFilter(gridWindow) {
    var isBothPublisherNSubscriber = gridWindow &amp;&amp; gridWindow.preferences.can_publish &amp;&amp; gridWindow.preferences.can_subscribe;
    return isBothPublisherNSubscriber ? getAllFiltersFromInteractiveUtil() : gridWindow.getDashboardMessageHandler().getCurrentFilters();
    }
    function hasBothLegendAndSlicedFilter(interactiveFilters) {
    var fCount = 0;
    var filter;
    if (interactiveFilters) {
    for (var key in interactiveFilters) {
    if (interactiveFilters.hasOwnProperty(key)) {
    filter = interactiveFilters[key];
    if (filter.sliced || filter.isFromLegend)
    fCount++
    }
    }
    }
    return (fCount &gt;= 2);
    }
    ;
    /*! RESOURCE: /scripts/reportcommon/GlideReportChartAjax.js */
    var stopWatch;
    function runEmbeddedReport(msg_container_id, chart_container_id, title, display_grid, other_threshold, show_empty, table, group_by, filter, aggregate, agg_field, chart_type,
    stack_field, box_field, trend_field, trend_interval, compute_percent, show_other, use_color_palette, chart_size, funnel_neck_percent, donut_width_percent,
    gauge_autoscale, from, to, upper_limit, lower_limit, direction, chart_title, show_chart_title,
    chart_title_size, chart_title_color, custom_chart_title_position, chart_title_x_position, chart_title_y_position,
    title_horizontal_alignment, title_vertical_alignment, legend_horizontal_alignment, legend_vertical_alignment, report_id, show_chart_data_label,
    show_chart_border, chart_border_width, chart_border_radius, chart_border_color, chart_background_color, legend_border_width, legend_border_radius,
    legend_border_color, legend_background_color, show_legend, show_legend_border, chart_height, chart_width, custom_chart_size, report_source_id, bar_unstack
    , x_axis_title, x_axis_title_size, x_axis_title_color, x_axis_title_bold, x_axis_opposite
    , x_axis_grid_width, x_axis_grid_color, x_axis_display_grid, x_axis_grid_dotted
    , x_axis_label_size, x_axis_label_color, x_axis_label_bold
    , y_axis_title, y_axis_title_size, y_axis_title_color, y_axis_title_bold, y_axis_opposite
    , y_axis_grid_width, y_axis_grid_color, y_axis_display_grid, y_axis_grid_dotted
    , y_axis_from, y_axis_to, y_axis_label_size, y_axis_label_color, y_axis_label_bold, show_marker
    , sc_groupby_item_id, sc_groupby_variable_id, sc_stackby_item_id, sc_stackby_variable_id, list_ui_view, report_drilldown
    , show_chart_total, use_color_heatmap, axis_max_color, axis_min_color, ct_row, ct_column, show_zero, score_color, interactive_report
    , set_color, color, colors, color_palette, other_series, report_map
    ) {
    var params = {};
    params.title = title;
    params.display_grid = display_grid;
    params.other_threshold = other_threshold;
    params.show_empty = show_empty;
    params.table = table;
    params.group_by = group_by;
    params.filter = filter;
    params.aggregate = aggregate;
    params.agg_field = agg_field;
    params.chart_type = chart_type;
    params.stack_field = stack_field;
    params.box_field = box_field;
    params.trend_field = trend_field;
    params.trend_interval = trend_interval;
    params.compute_percent = compute_percent;
    params.show_other = show_other;
    params.chart_size = chart_size;
    params.funnel_neck_percent = funnel_neck_percent;
    params.donut_width_percent = donut_width_percent;
    params.gauge_autoscale = gauge_autoscale;
    params.from = from;
    params.to = to;
    params.upper_limit = upper_limit;
    params.lower_limit = lower_limit;
    params.direction = direction;
    params.chart_title = chart_title;
    params.show_chart_title = show_chart_title;
    params.chart_title_size = chart_title_size;
    params.chart_title_color = chart_title_color;
    params.custom_chart_title_position = custom_chart_title_position;
    params.chart_title_x_position = chart_title_x_position;
    params.chart_title_y_position = chart_title_y_position;
    params.title_horizontal_alignment = title_horizontal_alignment;
    params.title_vertical_alignment = title_vertical_alignment;
    params.legend_horizontal_alignment = legend_horizontal_alignment;
    params.legend_vertical_alignment = legend_vertical_alignment;
    params.report_id = report_id;
    params.show_chart_data_label = show_chart_data_label;
    params.show_chart_border = show_chart_border;
    params.chart_border_width = chart_border_width;
    params.chart_border_radius = chart_border_radius;
    params.chart_border_color = chart_border_color;
    params.chart_background_color = chart_background_color;
    params.legend_border_width = legend_border_width;
    params.legend_border_radius = legend_border_radius;
    params.legend_border_color = legend_border_color;
    params.legend_background_color = legend_background_color;
    params.show_legend = show_legend;
    params.show_legend_border = show_legend_border;
    params.chart_height = chart_height;
    params.chart_width = chart_width;
    params.custom_chart_size = custom_chart_size;
    params.report_source_id = report_source_id;
    params.bar_unstack = bar_unstack;
    params.x_axis_title = x_axis_title;
    params.x_axis_title_size = x_axis_title_size;
    params.x_axis_title_color = x_axis_title_color;
    params.x_axis_title_bold = x_axis_title_bold;
    params.x_axis_opposite = x_axis_opposite;
    params.x_axis_grid_width = x_axis_grid_width;
    params.x_axis_grid_color = x_axis_grid_color;
    params.x_axis_display_grid = x_axis_display_grid;
    params.x_axis_grid_dotted = x_axis_grid_dotted;
    params.x_axis_label_size = x_axis_label_size;
    params.x_axis_label_color = x_axis_label_color;
    params.x_axis_label_bold = x_axis_label_bold;
    params.y_axis_title = y_axis_title;
    params.y_axis_title_size = y_axis_title_size;
    params.y_axis_title_color = y_axis_title_color;
    params.y_axis_title_bold = y_axis_title_bold;
    params.y_axis_opposite = y_axis_opposite;
    params.y_axis_grid_width = y_axis_grid_width;
    params.y_axis_grid_color = y_axis_grid_color;
    params.y_axis_display_grid = y_axis_display_grid;
    params.y_axis_grid_dotted = y_axis_grid_dotted;
    params.y_axis_from = y_axis_from;
    params.y_axis_to = y_axis_to;
    params.y_axis_label_size = y_axis_label_size;
    params.y_axis_label_color = y_axis_label_color;
    params.y_axis_label_bold = y_axis_label_bold;
    params.show_marker = show_marker;
    params.sc_groupby_item_id = sc_groupby_item_id;
    params.sc_groupby_variable_id = sc_groupby_variable_id;
    params.sc_stackby_item_id = sc_stackby_item_id;
    params.sc_stackby_variable_id = sc_stackby_variable_id;
    params.list_ui_view = list_ui_view;
    params.report_drilldown = report_drilldown;
    params.show_chart_total = show_chart_total;
    params.use_color_heatmap = use_color_heatmap;
    params.axis_max_color = axis_max_color;
    params.axis_min_color = axis_min_color;
    params.ct_row = ct_row;
    params.ct_column = ct_column;
    params.show_zero = show_zero;
    params.score_color = score_color;
    params.interactive_report = interactive_report;
    params.set_color = set_color;
    params.color = color;
    params.colors = colors;
    params.color_palette = color_palette;
    params.other_series = other_series;
    params.report_map = report_map;
    runReportAsGauge(params, chart_container_id, msg_container_id, "false", "false", null, true);
    }
    function runReportAsGauge(params, chartContainerId, msgContainerId, isGauge, isGaugePreview, maxCancelationRetries, noRetry) {
    var startTime = new Date().getTime();
    setupSeries(params);
    if(isGaugePreview == "true")
    params.gauge_preview = true;
    var pageNum = document.getElementById('sysparm_page_num_'+params.report_id);
    if (pageNum &amp;&amp; pageNum.value)
    params.page_num = pageNum.value;
    else
    params.page_num = 0;
    if(isGauge === "true" || isGauge === true)
    isGauge = true;
    else
    isGauge = false;
    var additionalArgs = constructAdditionalArgs(params, chartContainerId, msgContainerId, isGauge, startTime);
    generateChart(params, additionalArgs, chartContainerId, maxCancelationRetries, 0, noRetry);
    }
    function constructAdditionalArgs(params, chartContainerId, msgContainerId, isGauge, startTime) {
    var additionalArgs = {};
    additionalArgs.chart_container_id = chartContainerId;
    additionalArgs.msg_container_id = msgContainerId;
    additionalArgs.chart_type = params.series[0].plot_type;
    additionalArgs.agg_type = params.series[0].aggregate_type;
    additionalArgs.chart_size = params.chart_size;
    additionalArgs.chart_height = params.chart_height;
    additionalArgs.chart_width = params.chart_width;
    additionalArgs.start_time = startTime;
    additionalArgs.compute_percent = params.compute_percent;
    additionalArgs.group_by = params.series[0].groupby;
    additionalArgs.stacked_field = '';
    if(isBarType(additionalArgs.chart_type))
    additionalArgs.stacked_field = params.series[0].stacked_field;
    additionalArgs.display_grid = false;
    if(params.display_grid === "true" || params.display_grid === true)
    additionalArgs.display_grid = true;
    additionalArgs.isGauge = isGauge;
    if(additionalArgs.isGauge) {
    additionalArgs.gauge_id = params.gauge_id;
    additionalArgs.gauge_preview = params.gauge_preview;
    }
    additionalArgs.chart_params = JSON.stringify(params);
    additionalArgs.report_id = params.report_id;
    additionalArgs.source_type = params.source_type;
    if (params.report_uuid)
    additionalArgs.report_uuid = params.report_uuid;
    additionalArgs.publisher_filter = params.publisher_filter;
    return additionalArgs;
    }
    function isHighChartsSupportedType(chart_type) {
    return chart_type == 'bar' || chart_type == 'horizontal_bar' || isPieType(chart_type) || chart_type == 'pareto' || chart_type == 'hist' || chart_type == 'trend'
    || chart_type == 'box' || chart_type == 'line' || chart_type == 'step_line' || chart_type == 'area' || chart_type == 'spline' || chart_type == 'line_bar' || chart_type == 'control' || chart_type == 'availability'
    || chart_type == 'tbox' || isGaugeType(chart_type) || chart_type == 'heatmap' || chart_type == 'bubble' || chart_type == 'map' ;
    }
    function runReportFromBuilder(reportUUID, fixedSize, params, maxCancelationRetries, noRetry) {
    if (!params)
    params = window.g_report_params[reportUUID];
    if (!params.report_uuid)
    params.report_uuid = reportUUID;
    createReportTemplate(reportUUID, params, fixedSize);
    runReportAsGauge(params, "chart-container-" + reportUUID, "msg-container-" + reportUUID, "false", "false", maxCancelationRetries, noRetry);
    }
    function createReportTemplate(reportUUID, params, fixedSize) {
    var $reportContainer = jQuery('#report-container-' + reportUUID);
    $reportContainer.empty();
    $reportContainer.append(jQuery("&lt;div class='gauge-size-handle report_breadcrumbs' /&gt;"));
    var $msgContainer = jQuery('&lt;div class="report-message gauge-size-handle" id="msg-container-' + reportUUID + '"/&gt;');
    var containerClass = "chart-container"
    if (isScrollableType(params.chart_type))
    containerClass += " scrollable";
    var $chartContainer = jQuery('&lt;div class="' + containerClass + '" id="chart-container-' + reportUUID + '"&gt;Loading report...&lt;/div&gt;');
    if (fixedSize) {
    var chartHeight = 550;
    var chartWidth = 750;
    var customChartSize = params.custom_chart_size;
    var customChartHeight = params.chart_height;
    var customChartWidth = params.chart_width;
    var chartSize = params.chart_size;
    if (customChartSize === 'true' &amp;&amp; customChartHeight !== 'null' &amp;&amp; customChartHeight !== '')
    chartHeight = customChartHeight;
    else if (chartSize === 'medium')
    chartHeight = 450;
    else if (chartSize === 'small')
    chartHeight = 375;
    if (customChartSize === 'true' &amp;&amp; customChartWidth !== 'null' &amp;&amp; customChartWidth !== '')
    chartWidth = customChartWidth;
    else if (chartSize === 'medium')
    chartWidth = 600;
    else if (chartSize === 'small')
    chartWidth = 450;
    $chartContainer.height(chartHeight).width(chartWidth);
    }
    $reportContainer.append($msgContainer);
    $reportContainer.append($chartContainer);
    if ((!params.page_num || params.page_num == "0") &amp;&amp; params.additional_groupby &amp;&amp; hasAdditionalGroupBy(params.chart_type)) {
    $reportContainer.append(jQuery('&lt;div id="interactive-container-'+ reportUUID +'" class="interactive_container gauge-size-handle" style="text-align: center; padding-top: 5px;"/&gt;'));
    }
    if ((params.display_grid === "true" || params.display_grid === true || window.g_accessibility === "true" || window.g_accessibility === true) &amp;&amp; isDisplayGridApplicable(params.chart_type)) {
    $reportContainer.append(jQuery('&lt;div class="display-grid-container"&gt;' +
    '&lt;table id="display-grid-table-' + reportUUID + '" align="center" border="0" cellpadding="0" cellspacing="0" class="chart_legend" style="margin-top: 5px; display:none; border-collapse: collapse !important;" /&gt;' +
    '&lt;/div&gt;'));
    }
    }
    function isScrollableType(type) {
    return "pivot_v2" == type || "calendar" == type;
    }
    function generateChart(params, additionalArgs, chartContainerId, maxCancelationRetries, cancelledCount, noRetry) {
    maxCancelationRetries =  parseInt(maxCancelationRetries) || 15;
    cancelledCount = parseInt(cancelledCount) || 0;
    if (cancelledCount == 0) {
    var paramsStringified = JSON.stringify(params);
    params = {};
    params.sysparm_request_params = paramsStringified;
    params.sysparm_timer = new Date().getTime();
    if ('chartOnForm' in params)
    params.sysparm_chartonform = true;
    params.sysparm_processor = 'ChartDataProcessor';
    params.sysparm_scope = 'global';
    params.sysparm_want_session_messages = true;
    }
    var config = { method: 'POST',
    url: 'xmlhttp.do',
    data: $j.param(params),
    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
    dataType: 'xml'
    };
    $j.ajax(config).then(function successCallback (response) {
    if (!response || (response.getElementById('transaction_canceled_island') &amp;&amp; response.getElementById('transaction_canceled_island').getAttribute('transaction_canceled') === 'true')) {
    var cancelledMsg = response ? response.getElementById('transaction_canceled_island').getAttribute('cancel_message') : '';
    cancelledMsg = cancelledMsg.toLowerCase();
    if (cancelledCount &gt; maxCancelationRetries) {
    if (window.console)
    console.log('Transaction has been cancelled ' + maxCancelationRetries + ' times and stop retrying');
    if (chartContainerId)
    document.getElementById(chartContainerId).innerHTML = cancelledMsg;
    } else {
    if (cancelledMsg &amp;&amp; cancelledMsg.indexOf('maximum execution time exceeded') !== -1 &amp;&amp; chartContainerId)
    document.getElementById(chartContainerId).innerHTML = cancelledMsg;
    else
    if (!noRetry)
    setTimeout(function(){ generateChart(params, additionalArgs, chartContainerId, maxCancelationRetries, ++cancelledCount, noRetry)}, 500);
    }
    } else
    getChartDataDone(response, additionalArgs);
    }, function errorCallback (response) {
    if (!noRetry)
    setTimeout(function(){ generateChart(params, additionalArgs, chartContainerId, maxCancelationRetries, ++cancelledCount, noRetry)}, 500);
    });
    }
    function getReportParams(chartonform, type) {
    var config = getReportConfig(chartonform, type);
    config.show_empty = getReportParamValue('sysparm_show_empty', chartonform);
    var pageNum = document.getElementById('sysparm_page_num_' + config.report_id);
    if (pageNum &amp;&amp; pageNum.value)
    config.page_num = pageNum.value;
    return config;
    }
    function getReportConfig(chartonform, type) {
    var params = {};
    params.sysparm_report_designer_builder = 'true';
    params.sysparm_is_published = getReportParamValue('sysparm_is_published', chartonform);
    if (type === 'list') {
    params.sysparm_type = type;
    params.sysparm_table = getReportParamValue('sysparm_table', chartonform);
    params.sysparm_field = getReportParamValue('sysparm_field', chartonform);
    params.sysparm_field_list = getReportParamValue('sysparm_field_list', chartonform);
    params.sysparm_full_query = getReportParamValue('sysparm_query', chartonform);
    params.sysparm_query = getReportParamValue('sysparm_query', chartonform);
    params.sysparm_additional_groupby = getReportParamValue('sysparm_additional_groupby', chartonform);
    params.sysparm_interactive_report = getReportParamValue('sysparm_interactive_report', chartonform);
    params.sysparm_report_source_id = getReportParamValue('sysparm_report_source_id', chartonform);
    params.sysparm_view = getReportParamValue('sysparm_view', chartonform);
    return params
    } else if (type === 'pivot') {
    params.sysparm_type = type;
    params.sysparm_table = getReportParamValue('sysparm_table', chartonform);
    params.sysparm_ct_row = getReportParamValue('sysparm_ct_row', chartonform);
    params.sysparm_ct_column = getReportParamValue('sysparm_ct_column', chartonform);
    params.sysparm_sumfield = getReportParamValue('sysparm_sumfield', chartonform);
    params.sysparm_aggregate = getReportParamValue('sysparm_aggregate', chartonform);
    params.sysparm_query = getReportParamValue('sysparm_query', chartonform);
    params.sysparm_title = getReportParamValue('sysparm_title', chartonform);
    params.sysparm_others = getReportParamValue('sysparm_others', chartonform);
    params.sysparm_show_other = getReportParamValue('sysparm_show_other', chartonform);
    params.sysparm_list_ui_view = getReportParamValue('sysparm_list_ui_view', chartonform);
    params.sysparm_report_drilldown = getReportParamValue('sysparm_report_drilldown', chartonform);
    params.sysparm_report_source_id = getReportParamValue('sysparm_report_source_id', chartonform);
    return params
    } else if (type === 'calendar') {
    params.sysparm_type = type;
    params.sysparm_table = getReportParamValue('sysparm_table', chartonform);
    params.sysparm_field = getReportParamValue('sysparm_field', chartonform);
    params.sysparm_cal_field = getReportParamValue('sysparm_cal_field', chartonform);
    params.sysparm_query = getReportParamValue('sysparm_query', chartonform);
    params.sysparm_list_ui_view = getReportParamValue('sysparm_list_ui_view', chartonform);
    params.sysparm_report_drilldown = getReportParamValue('sysparm_report_drilldown', chartonform);
    params.sysparm_report_source_id = getReportParamValue('sysparm_report_source_id', chartonform);
    return params
    }
    else {
    params.table = getReportParamValue('sysparm_table', chartonform);
    params.report_id = (typeof additionalArgs === 'undefined' ? '' : additionalArgs.report_id );
    if (params.report_id === '')
    params.report_id = getReportParamValue('sysparm_report_id', chartonform);
    params.title = getReportParamValue('sysparm_title', chartonform);
    params.display_grid = getReportParamValue('sysparm_display_grid', chartonform);
    params.other_threshold = getReportParamValue('sysparm_others', chartonform);
    params.compute_percent = getReportParamValue('sysparm_compute_percent', chartonform);
    params.chart_size = getReportParamValue('sysparm_chart_size', chartonform);
    params.custom_chart_size = getReportParamValue('sysparm_custom_chart_size', chartonform);
    params.chart_height = getReportParamValue('sysparm_custom_chart_height', chartonform);
    params.chart_width = getReportParamValue('sysparm_custom_chart_width', chartonform);
    params.show_other = getReportParamValue('sysparm_show_other', chartonform);
    params.chart_type = getReportParamValue('sysparm_type', chartonform);
    params.group_by = getReportParamValue('sysparm_field', chartonform);
    params.filter = getReportParamValue('sysparm_query', chartonform);
    params.aggregate = getReportParamValue('sysparm_aggregate', chartonform);
    params.agg_field = getReportParamValue('sysparm_sumfield', chartonform);
    params.stack_field = getReportParamValue('sysparm_stack_field', chartonform);
    params.box_field = getReportParamValue('sysparm_box_field', chartonform);
    params.trend_field = getReportParamValue('sysparm_trend_field', chartonform);
    params.trend_interval = getReportParamValue('sysparm_trend_interval', chartonform);
    params.funnel_neck_percent = getReportParamValue('sysparm_funnel_neck_percent', chartonform);
    params.donut_width_percent = getReportParamValue('sysparm_donut_width_percent', chartonform);
    params.gauge_autoscale = getReportParamValue('sysparm_gauge_autoscale', chartonform);
    params.from = getReportParamValue('sysparm_from', chartonform);
    params.to = getReportParamValue('sysparm_to', chartonform);
    params.upper_limit = getReportParamValue('sysparm_upper_limit', chartonform);
    params.lower_limit = getReportParamValue('sysparm_lower_limit', chartonform);
    params.direction = getReportParamValue('sysparm_direction', chartonform);
    params.chart_title = getReportParamValue('sysparm_chart_title', chartonform);
    params.show_chart_title = getReportParamValue('sysparm_show_chart_title', chartonform);
    params.chart_title_size = getReportParamValue('sysparm_chart_title_size', chartonform);
    params.chart_title_color = getReportParamValue('sysparm_chart_title_color', chartonform);
    params.custom_chart_title_position = getReportParamValue('sysparm_custom_chart_title_position', chartonform);
    params.chart_title_x_position = getReportParamValue('sysparm_chart_title_x_position', chartonform);
    params.chart_title_y_position = getReportParamValue('sysparm_chart_title_y_position', chartonform);
    params.show_chart_border = getReportParamValue('sysparm_show_chart_border', chartonform);
    params.title_horizontal_alignment = getReportParamValue('sysparm_title_horizontal_alignment', chartonform);
    params.title_vertical_alignment = getReportParamValue('sysparm_title_vertical_alignment', chartonform);
    params.legend_horizontal_alignment = getReportParamValue('sysparm_legend_horizontal_alignment', chartonform);
    params.legend_vertical_alignment = getReportParamValue('sysparm_legend_vertical_alignment', chartonform);
    params.chart_border_width = getReportParamValue('sysparm_chart_border_width', chartonform);
    params.chart_border_radius = getReportParamValue('sysparm_chart_border_radius', chartonform);
    params.chart_border_color = getReportParamValue('sysparm_chart_border_color', chartonform);
    params.score_color = getReportParamValue('sysparm_score_color', chartonform);
    params.chart_background_color = getReportParamValue('sysparm_chart_background_color', chartonform);
    params.legend_border_width = getReportParamValue('sysparm_legend_border_width', chartonform);
    params.legend_border_radius = getReportParamValue('sysparm_legend_border_radius', chartonform);
    params.legend_border_color = getReportParamValue('sysparm_legend_border_color', chartonform);
    params.legend_background_color = getReportParamValue('sysparm_legend_background_color', chartonform);
    params.legend_items_left_align = getReportParamValue('sysparm_legend_items_left_align', chartonform);
    params.show_legend = getReportParamValue('sysparm_show_legend', chartonform);
    params.show_legend_border = getReportParamValue('sysparm_show_legend_border', chartonform);
    params.show_chart_data_label = getReportParamValue('sysparm_show_chart_data_label', chartonform);
    params.show_data_label_position_middle = getReportParamValue('sysparm_show_data_label_position_middle', chartonform);
    params.allow_data_label_overlap = getReportParamValue('sysparm_allow_data_label_overlap', chartonform);
    params.show_geographical_label = getReportParamValue('sysparm_show_geographical_label', chartonform);
    params.show_zero = getReportParamValue('sysparm_show_zero', chartonform);
    params.show_marker = getReportParamValue('sysparm_show_marker', chartonform);
    params.bar_unstack = getReportParamValue('sysparm_bar_unstack', chartonform);
    params.x_axis_title = getReportParamValue('sysparm_x_axis_title', chartonform);
    params.x_axis_title_size = getReportParamValue('sysparm_x_axis_title_size', chartonform);
    params.x_axis_title_color = getReportParamValue('sysparm_x_axis_title_color', chartonform);
    params.x_axis_title_bold = getReportParamValue('sysparm_x_axis_title_bold', chartonform);
    params.x_axis_opposite = getReportParamValue('sysparm_x_axis_opposite', chartonform);
    params.x_axis_grid_width = getReportParamValue('sysparm_x_axis_grid_width', chartonform);
    params.x_axis_grid_color = getReportParamValue('sysparm_x_axis_grid_color', chartonform);
    params.x_axis_display_grid = getReportParamValue('sysparm_x_axis_display_grid', chartonform);
    params.x_axis_grid_dotted = getReportParamValue('sysparm_x_axis_grid_dotted', chartonform);
    params.x_axis_label_size = getReportParamValue('sysparm_x_axis_label_size', chartonform);
    params.x_axis_label_color = getReportParamValue('sysparm_x_axis_label_color', chartonform);
    params.x_axis_label_bold = getReportParamValue('sysparm_x_axis_label_bold', chartonform);
    params.y_axis_title = getReportParamValue('sysparm_y_axis_title', chartonform);
    params.y_axis_title_size = getReportParamValue('sysparm_y_axis_title_size', chartonform);
    params.y_axis_title_color = getReportParamValue('sysparm_y_axis_title_color', chartonform);
    params.y_axis_title_bold = getReportParamValue('sysparm_y_axis_title_bold', chartonform);
    params.y_axis_opposite = getReportParamValue('sysparm_y_axis_opposite', chartonform);
    params.y_axis_grid_width = getReportParamValue('sysparm_y_axis_grid_width', chartonform);
    params.y_axis_grid_color = getReportParamValue('sysparm_y_axis_grid_color', chartonform);
    params.y_axis_display_grid = getReportParamValue('sysparm_y_axis_display_grid', chartonform);
    params.y_axis_grid_dotted = getReportParamValue('sysparm_y_axis_grid_dotted', chartonform);
    params.y_axis_from = getReportParamValue('sysparm_y_axis_from', chartonform);
    params.y_axis_to = getReportParamValue('sysparm_y_axis_to', chartonform);
    params.y_axis_label_size = getReportParamValue('sysparm_y_axis_label_size', chartonform);
    params.y_axis_label_color = getReportParamValue('sysparm_y_axis_label_color', chartonform);
    params.y_axis_label_bold = getReportParamValue('sysparm_y_axis_label_bold', chartonform);
    params.report_source_id = getReportParamValue('sysparm_report_source_id', chartonform);
    params.sc_groupby_item_id = getReportParamValue('sysparm_sc_groupby_item_id', chartonform);
    params.sc_groupby_variable_id = getReportParamValue('sysparm_sc_groupby_variable_id', chartonform);
    params.sc_stackby_item_id = getReportParamValue('sysparm_sc_stackby_item_id', chartonform);
    params.sc_stackby_variable_id = getReportParamValue('sysparm_sc_stackby_variable_id', chartonform);
    params.list_ui_view = getReportParamValue('sysparm_list_ui_view', chartonform);
    params.report_drilldown = getReportParamValue('sysparm_report_drilldown', chartonform);
    params.show_chart_total = getReportParamValue('sysparm_show_chart_total', chartonform);
    params.use_color_heatmap = getReportParamValue('sysparm_use_color_heatmap_map', chartonform);
    params.axis_max_color = getReportParamValue('sysparm_axis_max_color', chartonform);
    params.axis_min_color = getReportParamValue('sysparm_axis_min_color', chartonform);
    params.ct_column = getReportParamValue('sysparm_ct_column', chartonform);
    params.ct_row = getReportParamValue('sysparm_ct_row', chartonform);
    params.interactive_report = getReportParamValue('sysparm_interactive_report', chartonform);
    params.set_color = getReportParamValue('sysparm_set_color', chartonform);
    params.color = getReportParamValue('sysparm_chart_color', chartonform);
    params.colors = getReportParamValue('sysparm_chart_colors', chartonform);
    params.color_palette = getReportParamValue('sysparm_color_palette', chartonform);
    params.decimal_precision = getReportParamValue('sysparm_decimal_precision', chartonform);
    params.show_empty = true;
    params.other_series = '';
    params.report_map = getReportParamValue('sysparm_report_map', chartonform);
    params.report_map_source = getReportParamValue('sysparm_report_map_source', chartonform);
    params.additional_groupby = getReportParamValue('sysparm_additional_groupby', chartonform);
    params.original_groupby = getReportParamValue('sysparm_field', chartonform);
    params.original_stackby = getReportParamValue('sysparm_stack_field', chartonform);
    params.is_published = params.sysparm_is_published;
    params.use_null_in_trend = getReportParamValue('sysparm_use_null_in_trend', chartonform);
    params.series_name_text = getReportParamValue('sysparm_series_name_text', chartonform);
    params.x_axis_category_fields = getReportParamValue('sysparm_x_axis_category_fields', chartonform);
    params.y_axis_category_fields = getReportParamValue('sysparm_y_axis_category_fields', chartonform);
    params.pivot_expanded = getReportParamValue('sysparm_pivot_expanded', chartonform);
    params.display_row_lines = getReportParamValue('sysparm_display_row_lines', chartonform);
    params.display_column_lines = getReportParamValue('sysparm_display_column_lines', chartonform);
    params.cal_field = getReportParamValue('sysparm_cal_field', chartonform);
    params.source_type = getReportParamValue('sysparm_source_type', chartonform);
    params.custom_config = getReportParamValue('sysparm_custom_config', chartonform);
    params.start_time = getReportParamValue('sysparm_start_time', chartonform);
    params.end_time = getReportParamValue('sysparm_end_time', chartonform);
    params.pa_indicator = getReportParamValue('sysparm_pa_indicator', chartonform);
    params.pa_breakdown = getReportParamValue('sysparm_pa_breakdown', chartonform);
    params.pa_element = getReportParamValue('sysparm_pa_element', chartonform);
    params.pa_breakdown_level2 = getReportParamValue('sysparm_pa_breakdown_level2', chartonform);
    params.pa_element_level2 = getReportParamValue('sysparm_pa_element_level2', chartonform);
    params.pa_aggregate = getReportParamValue('sysparm_pa_aggregate', chartonform);
    return setupSeries(params);
    }
    }
    function getReportParamValue(name, chartonform) {
    var fullName = name;
    if (chartonform)
    fullName += chartonform;
    var element = document.getElementById(fullName);
    if (element)
    return element.value;
    return '';
    }
    function setupSeries(params) {
    if (params.chart_type == 'line' || params.chart_type == 'area' || params.chart_type == 'spline' ||
    params.chart_type == 'line_bar' || params.chart_type == 'step_line')
    params.other_threshold = -1;
    params.series = new Array();
    var curSeries = {};
    var interactiveReport = {};
    if (params.interactive_report) {
    try {
    interactiveReport = JSON.parse(params.interactive_report);
    } catch(err) {
    console.log("unable to parse interactive reports JSON definition")
    }
    }
    curSeries.table = params.table;
    curSeries.report_source_id = params.report_source_id;
    if (interactiveReport.groupby || interactiveReport.groupby === '')
    curSeries.groupby = interactiveReport.groupby;
    else
    curSeries.groupby = params.group_by;
    curSeries.location = params.location;
    curSeries.report_map_source = params.report_map_source;
    curSeries.report_map = params.report_map;
    curSeries.sc_groupby_item_id = params.sc_groupby_item_id;
    curSeries.sc_groupby_variable_id = params.sc_groupby_variable_id;
    curSeries.sc_stackby_item_id = params.sc_stackby_item_id;
    curSeries.sc_stackby_variable_id = params.sc_stackby_variable_id;
    curSeries.filter = params.filter;
    curSeries.interactive_report = params.interactive_report;
    curSeries.plot_type = params.chart_type;
    if (curSeries.plot_type == 'pareto')
    curSeries.aggregate_type = 'COUNT';
    else {
    curSeries.aggregate_type = params.aggregate;
    if (params.aggregate != 'COUNT')
    curSeries.aggregate_field = params.agg_field;
    }
    if (isBarType(curSeries.plot_type)) {
    if (interactiveReport.stackby === '' || interactiveReport.stackby)
    curSeries.stacked_field = interactiveReport.stackby;
    else
    curSeries.stacked_field = params.stack_field;
    } else if (curSeries.plot_type == 'hist') {
    curSeries.hist_field = params.box_field;
    } else if (curSeries.plot_type == 'box') {
    curSeries.box_field = params.box_field;
    } else if (curSeries.plot_type == 'trend' || curSeries.plot_type == 'line'  || curSeries.plot_type == 'area'  || curSeries.plot_type == 'spline'  || curSeries.plot_type == 'line_bar' ||
    curSeries.plot_type == 'control' || curSeries.plot_type == 'availability'
    || curSeries.plot_type == 'tbox' || curSeries.plot_type == 'step_line') {
    curSeries.trend_field = params.trend_field;
    curSeries.trend_interval = params.trend_interval;
    } else if (curSeries.plot_type == 'heatmap' || curSeries.plot_type == 'bubble'){
    curSeries.ct_row = params.ct_row;
    curSeries.ct_column = params.ct_column;
    } else if (curSeries.plot_type == 'map' )
    curSeries.show_geographical_label = params.show_geographical_label;
    curSeries.show_chart_data_label = params.show_chart_data_label;
    curSeries.show_data_label_position_middle = params.show_data_label_position_middle;
    curSeries.allow_data_label_overlap = params.allow_data_label_overlap;
    curSeries.show_marker = params.show_marker;
    curSeries.bar_unstack = params.bar_unstack;
    curSeries.list_ui_view = params.list_ui_view;
    curSeries.set_color = params.set_color;
    curSeries.color = params.color;
    curSeries.colors = params.colors;
    curSeries.color_palette = params.color_palette;
    curSeries.show_y_axis = params.show_y_axis;
    curSeries.y_axis_from = params.y_axis_from;
    curSeries.y_axis_to = params.y_axis_to;
    curSeries.y_axis_title = params.y_axis_title;
    curSeries.series_name_text = params.series_name_text;
    curSeries.source_type = params.source_type;
    curSeries.custom_config = params.custom_config;
    curSeries.use_null_in_trend = params.use_null_in_trend;
    params.series.push(curSeries);
    return params;
    }
    function getChartDataDone(response, args) {
    var chartDataResponse = response.getElementsByTagName('CHART_DATA_RESPONSE');
    if(!response || !chartDataResponse){
    showError(args['msg_container_id'], "No response from the server");
    }
    else {
    var resp = JSON.parse(getTextValue( (chartDataResponse)[0]));
    processChartDataResponse(resp, args);
    }
    var now = new Date().getTime();
    var elapsedTime = (now - args['start_time']) / 1000;
    console.log('Time taken to render chart: ' + elapsedTime);
    }
    function processChartDataResponse(resp, args) {
    if (resp.STATUS == 'SUCCESS') {
    var mychart;
    if ('chartOnForm' in args)
    mychart = new GlideReportChart(args['chart_container_id'], args['msg_container_id'], args['isGauge'], args['chart_size'],
    args['chart_type'], args['report_id'], args['chart_params'], args['chart_height'], args['chart_width'], args['source_type']);
    else
    mychart = new GlideReportChart(args['chart_container_id'], args['msg_container_id'], args['isGauge'], args['chart_size'],
    args['chart_type'], args['report_id'], args['chart_params'], args['chart_height'], args['chart_width'], args['source_type']);
    if ('isPub' in args &amp;&amp; args.isPub) {
    mychart.setPub(args.isPub);
    } else
    mychart.setPub(false);
    var chart_data = JSON.parse(resp.CHART_DATA);
    if (!renderChart(mychart, chart_data, args, interval )) {
    var interval = setInterval(function() {
    if (renderChart(mychart, chart_data, args, interval )) {
    clearInterval(interval);
    }
    }, 1000);
    }
    } else if (resp.STATUS == 'INFO'){
    showInfo(args['chart_container_id'], resp.INFO_MESSAGE);
    document.getElementById(args['msg_container_id']).innerHTML = '';
    } else {
    showError(args['chart_container_id'], resp.ERROR_MESSAGE);
    document.getElementById(args['msg_container_id']).innerHTML = '';
    }
    }
    function renderChart(mychart, chart_data, args, interval) {
    if (jQuery("#" + args['chart_container_id']).is(":visible")) {
    if (args['source_type'] === 'metricbase') {
    var chartParams;
    if(mychart.chartParams)
    chartParams = JSON.parse(mychart.chartParams);
    mychart.buildMetricBase(chart_data, chartParams);
    } else {
    chart_data.report_properties.publisher_id = args['publisher_id'];
    chart_data.report_properties.report_id = args['report_id'];
    chart_data.report_properties.publisher_filter = args['publisher_filter'];
    checkAndEnableInteractiveFilters(chart_data, args);
    mychart.buildGroupChartForSingleSeries(chart_data, args['stacked_field'], args['agg_type'], args['source_type']);
    checkAndEnableDisplayGrid(chart_data, args);
    }
    return true;
    } else
    return false;
    }
    function isBarType(chart_type) {
    return chart_type === 'bar' || chart_type === 'horizontal_bar';
    }
    function isPieType(chart_type) {
    return (chart_type === 'pie' || chart_type === 'funnel' || chart_type === 'semi_donut' || chart_type === 'pyramid' || chart_type === 'donut');
    }
    function isGaugeType(chartType) {
    return (chartType === 'angular_gauge' || chartType === 'solid_gauge');
    }
    function formatDuration(secs) {
    var days = Math.floor(secs / 86400);
    var hours = Math.floor((secs % 86400) / 3600);
    var mins = Math.floor(((secs % 86400) % 3600) / 60);
    var secs = ((secs % 86400) % 3600) % 60;
    if (days &gt; 0)
    return days + ' days ' +  hours + ' hours ' + mins + ' minutes ' + secs + ' seconds';
    if (hours &gt; 0)
    return hours + ' hours ' + mins + ' minutes ' + secs + ' seconds';
    if (mins &gt; 0)
    return mins + ' minutes ' + secs + ' seconds';
    return secs + ' seconds';
    }
    function showError(container, errorMsg) {
    document.getElementById(container).innerHTML = '&lt;div style="text-align:center;color:red"&gt;' + 'ERROR: ' + errorMsg + '&lt;/div&gt;';
    }
    function showInfo(container, infoMsg) {
    document.getElementById(container).innerHTML = '&lt;div style="text-align:center;color:black"&gt;' + infoMsg + '&lt;/div&gt;';
    }
    ;
    /*! RESOURCE: /scripts/reportcommon/GlideReportChart.js */
    var GlideReportChart = function GlideReportChart() {
    this.initialize.apply(this, arguments);
    };
    GlideReportChart.prototype = {
    initialize: function initialize(elemId1, elemId2, isGauge, chartSize, chartType, reportId, chartParams, chartHeight, chartWidth, sourceType) {
    this.chartContainerId = elemId1;
    this.msgContainerId = elemId2;
    this.isGauge = isGauge;
    this.chartSize = chartSize;
    this.chartHeight = chartHeight;
    this.chartWidth = chartWidth;
    this.chartOptions = {};
    this.chartingEngine = 'Highcharts';
    this.chartType = chartType;
    this.reportId = reportId;
    this.chartParams = chartParams;
    this.isPub = false;
    this.sourceType = sourceType;
    this.titleMargin = 50;
    },
    setPub: function setPub(isPub) {
    this.isPub = isPub;
    },
    showError: function showError(errorMsg) {
    document.getElementById(this.chartContainerId).innerHTML = '&lt;div style="text-align:center;color:red"&gt;ERROR: ' + errorMsg + '&lt;/div&gt;';
    },
    showWarning: function showWarning(warnMsg) {
    document.getElementById(this.msgContainerId).innerHTML = '&lt;div style="text-align:center;color:black"&gt;WARNING: ' + warnMsg + '&lt;/div&gt;';
    },
    showMessage: function showMessage(msg) {
    document.getElementById(this.msgContainerId).innerHTML = '&lt;div style="text-align:center;color:black"&gt;' + msg + '&lt;/div&gt;';
    },
    setRenderTo: function setRenderTo(elem) {
    this.chartOptions.renderTo = elem;
    },
    initDefaultChartOptions: function initDefaultChartOptions(chartData, aggType, stackedField) {
    var isRtl = (jQuery('html').hasClass('rtl') || jQuery('html').attr('dir') === 'rtl');
    var	chartOptionsProps = hc_initDefaultChartOptions(this.chartOptions, chartData, this.chartType, this.chartSize, this.isGauge, this.isPub, this.chartContainerId, aggType, stackedField, true, this.chartHeight, this.chartWidth, isRtl) || {};
    var chartParamsObj = JSON.parse(this.chartParams);
    chartOptionsProps.other_threshold = chartParamsObj.other_threshold;
    chartOptionsProps.display_grid = chartParamsObj.display_grid;
    chartOptionsProps.show_other = chartParamsObj.show_other;
    chartOptionsProps.interactive_report = chartParamsObj.interactive_report;
    chartOptionsProps.page_num = chartParamsObj.page_num ? chartParamsObj.page_num : 0;
    chartOptionsProps.box_field = chartParamsObj.box_field;
    chartOptionsProps.filter_with_orderby = chartParamsObj.filter;
    chartOptionsProps.agg_field = chartParamsObj.agg_field;
    chartOptionsProps.other_series = chartParamsObj.other_series;
    chartOptionsProps.stack_field = chartParamsObj.stack_field;
    chartOptionsProps.box_field = chartParamsObj.box_field;
    chartOptionsProps.trend_field = chartParamsObj.trend_field;
    chartOptionsProps.trend_interval = chartParamsObj.trend_interval;
    chartOptionsProps.colors = chartParamsObj.colors;
    chartOptionsProps.sourceType = this.sourceType;
    return chartOptionsProps;
    },
    createBreadcrumbsMapChart: function createBreadcrumbsMapChart(reportId, containerId, breadcrumbs) {
    if (reportId) {
    var breadcrumbsContainer = jQuery('#' + containerId).siblings('.report_breadcrumbs')[0];
    if (breadcrumbsContainer) {
    var ol = document.createElement('ol');
    ol.className = 'breadcrumb';
    ol.style.marginBottom = '0';
    for (i = 0; i &lt; breadcrumbs.length; i++) {
    var breadcrumb = breadcrumbs[i];
    var li = document.createElement('li');
    var text = document.createTextNode(breadcrumb.name);
    if (i === breadcrumbs.length - 1) {
    li.className = 'active';
    li.appendChild(text);
    } else {
    var a = document.createElement('a');
    a.setAttribute('href', 'javascript:void(0)');
    a.setAttribute('onclick', 'clickOnABreadcrumb(\'' + reportId + '\',\'' + containerId + '\',\'' + encodeURIComponent(JSON.stringify(breadcrumb.params)) + '\')');
    a.appendChild(text);
    li.appendChild(a);
    }
    ol.appendChild(li);
    }
    breadcrumbsContainer.appendChild(ol);
    }
    }
    },
    buildMetricBase: function buildMetricBase(chartData, chartParams) {
    this.showMessage('');
    this.chartOptions = chartData;
    if (this.chartContainerId)
    this.chartOptions.chart.renderTo = this.chartContainerId;
    hc_setHeightWidthChart(this.chartOptions, chartData, this.chartSize, this.isGauge, this.chartContainerId, chartParams.custom_chart_size, this.chartHeight, this.chartWidth);
    var props = {};
    props.sourceType = this.sourceType;
    props.display_grid = JSON.parse(this.chartParams).display_grid;
    props.isGauge = this.isGauge;
    props.isPub = this.isPub;
    var hcWrapper = new GlideHCWrapper(this.chartOptions, chartData, props, this.reportId, this.chartParams, this.chartSize, this.sourceType);
    hcWrapper.createMetricBase(chartParams, this.chartType);
    },
    buildGroupChartForSingleSeries: function buildGroupChartForSingleSeries(chartData, stackedField, aggType, sourceType) {
    this.showMessage('');
    if ('additional_msg' in chartData)
    this.showMessage(chartData.additional_msg);
    if ('additional_msg' in chartData.report_properties_series[0])
    this.showMessage(chartData.report_properties_series[0].additional_msg);
    if ('additional_msg' in chartData.report_properties_series[0])
    this.showMessage(chartData.report_properties_series[0].additional_msg);
    if (this.chartType !== 'heatmap' &amp;&amp; 'warning' in chartData.series[0])
    this.showWarning(chartData.series[0].warning);
    if (this.chartingEngine === 'Highcharts') {
    if (this.chartType === 'map') {
    var reportId = this.reportId;
    var containerId = this.chartContainerId;
    var breadcrumbs = chartData.report_properties_series[0].breadcrumbs;
    this.createBreadcrumbsMapChart(reportId, containerId, breadcrumbs);
    }
    var props = this.initDefaultChartOptions(chartData, aggType, stackedField);
    var hcWrapper = new GlideHCWrapper(this.chartOptions, chartData, props, this.reportId, this.chartParams, this.chartSize, sourceType);
    hc_setLegendLabelFormatter(this.chartOptions, true, false);
    if (this.isBarType(this.chartType)) {
    if (stackedField === '')
    hcWrapper.createBarChart(this.chartType);
    else
    hcWrapper.createStackedBarChart(this.chartType);
    } else if (this.chartType === 'pie' || this.chartType === 'semi_donut' || this.chartType === 'donut')
    hcWrapper.createPieChart(this.chartType);
    else if (this.chartType === 'funnel')
    hcWrapper.createFunnelChart(this.chartType);
    else if (this.chartType === 'heatmap')
    hcWrapper.createHeatmapChart(this.chartType);
    else if (this.chartType === 'map')
    hcWrapper.createMapChart(this.chartType);
    else if (this.chartType === 'bubble')
    hcWrapper.createBubbleChart(this.chartType);
    else if (this.chartType === 'pyramid')
    hcWrapper.createPyramidChart(this.chartType);
    else if (this.chartType === 'hist')
    hcWrapper.createHistogramChart(this.chartType);
    else if (this.chartType === 'pareto')
    hcWrapper.createParetoChart(this.chartType);
    else if (this.chartType === 'box' || this.chartType === 'tbox')
    hcWrapper.createBoxChart(this.chartType);
    else if (this.chartType === 'trend')
    hcWrapper.createTrendChart(this.chartType);
    else if (isLineType(this.chartType))
    hcWrapper.createLineChart(this.chartType);
    else if (this.chartType === 'control')
    hcWrapper.createControlChart(this.chartType);
    else if (this.chartType === 'availability')
    hcWrapper.createAvailChart(this.chartType);
    else if (this.chartType === 'angular_gauge' || this.chartType === 'solid_gauge')
    hcWrapper.createGaugeChart(this.chartType);
    }
    },
    isBarType: function isBarType(type) {
    if (type === 'bar' || type === 'horizontal_bar')
    return true;
    return false;
    },
    isLineType: function isLineType(type) {
    return (type === 'line' || type === 'area' || type === 'spline' || type === 'line_bar' || type === 'step_line') ;
    },
    type: 'GlideReportChart'
    };
    ;
    /*! RESOURCE: /scripts/reportcommon/GlideHCWrapper.js */
    var GlideHCWrapper = function GlideHCWrapper() {
    this.initialize.apply(this, arguments);
    };
    GlideHCWrapper.prototype = {
    initialize: function initialize(defaultChartOptions, data, chartProps, reportId, chartParams, chartSize, sourceType) {
    this.chartOptions = defaultChartOptions;
    this.chartData = data;
    this.chartProps = chartProps;
    this.chartSize = chartSize;
    this.chartPropsSeries = data.report_properties_series;
    this.isReportViewer = window.location.pathname.indexOf('report_viewer.do') !== -1;
    this.defaultFontFamily = 'Helvetica';
    this.otherDisplay = 'Other';
    this.otherDisplayMore = '(more...)';
    this.isGauge = chartProps.isGauge;
    this.origXValues = [];
    this.xValues = [];
    this.maxAllowedLabelLen = 20;
    this.grayColor = '#666';
    this.blackColor = '#000';
    this.aggType = chartProps.aggType;
    this.otherKey = 'zzyynomatchaabb';
    this.chartType = chartProps.chartType;
    this.report_properties = {};
    if (chartProps.isPub) {
    this.chartOptions.exporting = {};
    this.chartOptions.exporting.enabled = false;
    } else
    this.setupExportOptions(reportId, chartParams, chartProps.isGauge);
    if (sourceType !== 'metricbase') {
    this.report_properties = {};
    if ('report_properties' in data) {
    this.report_properties = data.report_properties;
    if ('font_family' in this.report_properties &amp;&amp; this.report_properties.font_family !== '')
    this.defaultFontFamily = this.report_properties.font_family;
    this.otherDisplay = this.report_properties.other_display;
    this.otherDisplayMore = this.report_properties.other_display_more;
    }
    this.chartOptions.publisher_id = this.chartData.report_properties.publisher_id;
    this.chartOptions.report_id = this.chartData.report_properties.report_id;
    this.isPublisher = false;
    var gridWindow = '';
    if (typeof glideGrid !== 'undefined') {
    gridWindow = glideGrid.getWindowByGaugeId(this.chartOptions.publisher_id);
    if (typeof gridWindow === 'undefined' || !gridWindow)
    gridWindow = glideGrid.getWindowByGaugeId(this.chartOptions.report_id);
    } else if (window.SNC &amp;&amp; SNC.canvas &amp;&amp; SNC.canvas.canvasUtils &amp;&amp; SNC.canvas.isGridCanvasActive) {
    gridWindow = SNC.canvas.canvasUtils.getGlideWindow(this.chartOptions.report_id);
    if (!gridWindow)
    gridWindow = SNC.canvas.canvasUtils.getGlideWindow(this.chartOptions.publisher_id);
    }
    if (typeof gridWindow !== 'undefined' &amp;&amp; gridWindow) {
    var publisherWidget = gridWindow.getPreference('publisher_widget');
    this.isPublisher = publisherWidget === 'true';
    }
    }
    this.chartOptions.credits = { enabled : false};
    },
    setupExportOptions: function setupExportOptions(reportId, chartParams, isGauge) {
    if (!this.chartData.series.length || (this.chartData.series[0].xvalues &amp;&amp; !this.chartData.series[0].xvalues.length)) {
    this.chartOptions.exporting = false;
    return;
    }
    this.chartOptions.exporting = {};
    this.chartOptions.exporting.enabled = !(typeof chartHelpers !== 'undefined' &amp;&amp; chartHelpers &amp;&amp; chartHelpers.device)
    || (chartHelpers.device.type !== 'mobile' &amp;&amp; chartHelpers.device.type !== 'm' &amp;&amp; chartHelpers.device.type !== 'tablet');
    this.chartOptions.exporting.reportId = reportId;
    this.chartOptions.exporting.isGauge = isGauge;
    var jsonParameters = JSON.parse(chartParams);
    jsonParameters.is_gauge = isGauge;
    this.chartOptions.exporting.params = JSON.stringify(jsonParameters);
    this.chartOptions.exporting.buttons = {
    contextButton: {
    align: 'right',
    x: 0,
    y: -2,
    theme: {
    stroke: 'silver'
    },
    menuItems: []
    }
    };
    var oldFirefox = false;
    if (window.isFirefox &amp;&amp; this.getVersion('firefox') &lt; '40')
    oldFirefox = true;
    var oldChrome = false;
    if (window.isChrome &amp;&amp; this.getVersion('chrome') &lt; '64')
    oldChrome = true;
    var isEdge = this.isBrowser('edge');
    var oldBrowser = window.isMSIE9 || window.isMSIE10 || oldFirefox || oldChrome || isEdge;
    this.chartOptions.exporting.downloadMsg = chartHelpers.i18n.downloadComplete;
    var self = this;
    var item1 = {};
    var item2 = {};
    item1.text = chartHelpers.i18n.saveAsPng;
    item2.text = chartHelpers.i18n.saveAsJpg;
    if (oldBrowser)
    this.chartOptions.exporting.enabled = false;
    item1.onclick = function(){self.saveChartClientSide('png', this)};
    item2.onclick = function(){self.saveChartClientSide('jpg', this)};
    this.chartOptions.exporting.buttons.contextButton.menuItems.push(item1);
    this.chartOptions.exporting.buttons.contextButton.menuItems.push(item2);
    },
    getVersion: function(browser) {
    var userAgent = navigator.userAgent.toLowerCase()
    userAgent = userAgent.substring(userAgent.indexOf(browser + '/') + (browser === 'firefox' ? 8 : 7));
    userAgent = userAgent.substring(0,userAgent.indexOf('.'));
    var version = userAgent;
    return version;
    },
    isBrowser: function(browser) {
    var userAgent = navigator.userAgent.toLowerCase()
    return userAgent.indexOf(browser.toLowerCase()) &gt; 0;
    },
    saveChartClientSide: function(type, obj) {
    if (typeof obj.options.exporting == '')
    obj.options.exporting = {};
    obj.options.exporting.fallbackToExportServer =  false;
    obj.options.exporting.type = 'image/' + type;
    var titleReport = obj.options.title.text;
    if(titleReport){
    titleReport = titleReport.length&gt;100 ? titleReport.substring(0, 100) : titleReport;
    titleReport = titleReport.replace(/\s+/g,"_");
    obj.options.exporting.filename = titleReport;
    }
    var expParams = JSON.parse(obj.options.exporting.params);
    var widthTmp = obj.options.chart.width;
    var heightTmp = obj.options.chart.height;
    obj.options.chart.width = expParams.chart_width;
    obj.options.chart.height = expParams.chart_height;
    obj.exportChartLocal();
    obj.options.chart.width = widthTmp;
    obj.options.chart.height = heightTmp;
    this.showMessage(obj.options.exporting.downloadMsg,'info', 8000);
    },
    showMessage: function showMessage(message, type, timeInMiliSeconds) {
    if (message) {
    var span = document.createElement('span');
    span.setAttribute('data-type', (type ? type : this.msgType.type_default));
    span.setAttribute('data-text', message);
    span.setAttribute('data-duration', (timeInMiliSeconds ? timeInMiliSeconds: '5000'));
    if (typeof GlideUI !== 'undefined')
    GlideUI.get().fire(new GlideUINotification({ xml: span }));
    }
    },
    saveChartServerSide: function(type, obj) {
    var reportDetails = {};
    reportDetails['report_id'] = obj.options.exporting.reportId;
    reportDetails['is_gauge'] = obj.options.exporting.isGauge;
    var chartExportParams = obj.options.exporting.params;
    obj.options.exporting.fallbackToExportServer = true;
    if (chartExportParams === '')
    hc_saveChart('report_id', 'hcexport_' + type, JSON.stringify(reportDetails));
    else
    hc_saveChart('report_params', 'hcexport_' + type, chartExportParams);
    },
    createHeatmapChart: function(chartType) {
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    var curSeries =  hc_createHeatmapSeriesData( this.chartData, this.chartProps, true);
    this.chartOptions.series.push(curSeries);
    hc_addHeatmapChartOptions(this.chartOptions,this.chartProps,true,this.chartData, curSeries);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_addHeatmapAxisCategories(this.chartOptions, this.chartData);
    hc_sanitizeCategoryValues(this.chartOptions, this.chartProps);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createMapChart: function(chartType) {
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    hc_addMapChartOptions(this.chartOptions,this.chartProps,true, this.chartData);
    var curSeries =  hc_createMapSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series = curSeries;
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_updateDataLabelOptionsGeographical(this.chartOptions, this.chartData, this.chartType);
    hc_updateMapVisualizationOptions(this.chartOptions, this.chartData, this.chartProps);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart(true);
    },
    createBubbleChart: function(chartType) {
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    this.chartOptions.series = hc_createBubbleSeriesData( this.chartData, this.chartProps, true);
    this.chartOptions.xAxis = this.chartData.series[0].xAxis;
    this.chartOptions.yAxis = this.chartData.series[0].yAxis;
    hc_addBubbleChartOptions(this.chartOptions,true,this.chartData.series[0].legend.enabled);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createBarChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addBarChartOptions(this.chartOptions, this.chartProps, this.chartData, this.getHighChartsType(this.chartData.series[0].series_plot_type), true);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    this.chartOptions.series =  hc_createMultipleSeriesData(this.chartOptions, this.chartData, this.chartProps, true, this.chartPropsSeries);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createMetricBase: function (chartParams, chartType) {
    if (chartParams.show_chart_title === 'never' || (this.isGauge &amp;&amp; chartParams.show_chart_title === 'report')) {
    this.chartOptions.title = {};
    this.chartOptions.title.text = '';
    }
    hc_configureLegendAlignment(chartType, chartParams, this.chartOptions, false, true);
    hc_setLegendLabelFormatter(this.chartOptions, true, false);
    this.chartOptions.series.forEach(function (series) {
    series.dataLabels = series.dataLabels || {};
    series.dataLabels.formatter = hc_formatValueLabel;
    });
    this.renderChart();
    },
    createStackedBarChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addStackedBarChartOptions(this.chartOptions, this.chartProps, this.chartData, this.getHighChartsType(this.chartData.series[0].series_plot_type), true, this.chartPropsSeries);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    this.chartOptions.series =  hc_createMultipleSeriesData(this.chartOptions, this.chartData, this.chartProps, true, this.chartPropsSeries);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, 'trend', true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createPieChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addXYChartOptions(this.chartOptions, this.chartProps, this.chartData, true);
    hc_addPieChartOptions(this.chartOptions, this.chartProps, true, chartType == "semi_donut", this.isPublisher);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    var curSeries =  hc_createSingleSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    if (chartType == "semi_donut" || chartType == "donut") {
    curSeries.innerSize = (100 - this.chartProps.report_properties.donut_width_percent) + "%";
    if(this.chartProps.report_properties.show_chart_total)
    hc_addTotal(this.chartOptions, this.chartProps, curSeries, this.chartData);
    }
    this.chartOptions.series.push(curSeries);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createFunnelChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addXYChartOptions(this.chartOptions, this.chartProps, this.chartData, true);
    hc_addFunnelChartOptions(this.chartOptions, this.chartProps, true, this.chartData, this.isPublisher);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    var curSeries =  hc_createSingleSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(curSeries);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createPyramidChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addXYChartOptions(this.chartOptions, this.chartProps, this.chartData, true);
    hc_addPyramidChartOptions(this.chartOptions, this.chartProps, true, this.chartData, this.isPublisher);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    var curSeries =  hc_createSingleSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(curSeries);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createGaugeChart: function(chartType) {
    hc_addGaugeChartOptions(this.chartOptions, this.chartProps, this.chartData, this.getHighChartsType(this.chartData.series[0].series_plot_type), true);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    var curSeries =  hc_createSingleSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(curSeries);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, 'gauge', true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createHistogramChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addHistogramOptions(this.chartOptions, this.chartProps, this.chartData, true);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    var histogramSeries = hc_createSingleSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(histogramSeries);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createBoxChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addBoxChartOptions(this.chartOptions, this.chartProps, this.chartData, true);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    var boxSeries = hc_createBoxPlotData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(boxSeries);
    var meanSeries = hc_createBoxMeanData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(meanSeries);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createParetoChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addBarChartOptions(this.chartOptions, this.chartProps, this.chartData, 'column', true);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    this.chartOptions.plotOptions.column.point = {};
    this.chartOptions.plotOptions.column.point.events = {};
    this.chartOptions.plotOptions.column.point.events.click = hc_dataPointClicked;
    var series0 = hc_createSingleSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    this.chartOptions.series.push(series0);
    var cumulative_series = hc_createParetoCumulSeries( this.chartOptions, this.chartProps, series0, true);
    this.chartOptions.series.push(cumulative_series);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createTrendChart: function(chartType) {
    if('sub_series' in this.chartData.series[0])
    this.createStackedBarChart();
    else
    this.createBarChart('trend');
    },
    createLineChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addLineChartOptions(this.chartOptions, this.chartProps, this.chartData, true,chartType);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    this.chartOptions.series = hc_createLineSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createAvailChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_addAvailChartOptions(this.chartOptions, this.chartProps, this.chartData, true);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    this.chartOptions.series = hc_createLineSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    createControlChart: function(chartType) {
    hc_sanitizeXValues(this.chartData, this.chartProps);
    hc_configureChartProportions(chartType, this.chartData, this.chartOptions, false, true);
    hc_addControlChartOptions(this.chartOptions, this.chartProps, this.chartData, true);
    this.chartOptions.series = hc_createControlSeriesData(this.chartOptions, this.chartData, this.chartProps, true);
    hc_addDataLabelOptions(this.chartOptions, this.chartProps, this.chartData, chartType, true);
    hc_disableTurboThreshold(this.chartOptions);
    this.renderChart();
    },
    renderChart: function renderChart(isMap) {
    var chart;
    var chartData = this.chartData;
    var chartType = this.chartProps.chartType;
    var self = this;
    if (typeof isMap === 'undefined' || isMap !== true) {
    this.setAnimation(chartData);
    this.setBoost(chartData);
    chart = new Highcharts.Chart(this.chartOptions);
    } else
    chart = new Highcharts.Map(this.chartOptions, function (chart) {
    var reportId = self.chartOptions.mapVisualization.report_id;
    if (reportId) {
    var iconHeatmap = '/images/icons/button-heatmap.png';
    var iconHeatmapActive = '/images/icons/button-heatmap-selected.png';
    var iconMarker = '/images/icons/button-pin.png';
    var iconMarkerActive = '/images/icons/button-pin-selected.png';
    var heatmapImg;
    var markerImg;
    var isLastLevel = chartData.report_properties_series[0].map_source.is_map_source_last_level;
    var containsLatLonLevel = chartData.report_properties_series[0].map_source.map_source_contains_lat_lon_level;
    var showPinLocations = containsLatLonLevel &amp;&amp; !isLastLevel;
    var useLatLon = chartData.report_properties_series[0].map_source.use_lat_lon;
    if (showPinLocations &amp;&amp; !chart.options.chart.forExport) {
    if (!useLatLon) {
    heatmapImg = chart.renderer.image(iconHeatmapActive, chart.chartWidth - 85, 10, 20, 20);
    markerImg = chart.renderer.image(iconMarker, chart.chartWidth - 60, 10, 20, 20);
    } else {
    heatmapImg = chart.renderer.image(iconHeatmap, chart.chartWidth - 85, 10, 20, 20);
    markerImg = chart.renderer.image(iconMarkerActive, chart.chartWidth - 60, 10, 20, 20);
    }
    heatmapImg.add();
    heatmapImg.css({ cursor: 'pointer' });
    heatmapImg.attr({ title: chartHelpers.i18n.showAsHeatmap, class: 'hc-image' });
    heatmapImg.on('click', function clickHeatmapImg(ev) {
    heatmapImg.attr({ href: iconHeatmapActive });
    markerImg.attr({ href: iconMarker });
    self.onClickCustomButton(ev, 'heatmap', reportId);
    });
    markerImg.add();
    markerImg.css({ cursor: 'pointer' });
    markerImg.attr({ title: chartHelpers.i18n.showAsMarkers, class: 'hc-image' });
    markerImg.on('click', function clickMarkerImg(ev) {
    markerImg.attr({ href: iconMarkerActive });
    heatmapImg.attr({ href: iconHeatmap });
    self.onClickCustomButton(ev, 'marker', reportId);
    });
    }
    }
    });
    var chartsWithDataTable = ['control', 'heatmap', 'bubble', 'tbox', 'box', 'hist'];
    var containerId = this.chartOptions.chart.renderTo;
    var shouldDisplayGridMetricbase = self.chartProps.sourceType === 'metricbase' &amp;&amp; self.chartProps.display_grid;
    if (((window.g_accessibility === 'true' || window.g_accessibility === true) &amp;&amp; chartsWithDataTable.indexOf(chartType) &gt; -1) || shouldDisplayGridMetricbase === true || shouldDisplayGridMetricbase === 'true') {
    chart.viewData();
    jQuery('#' + containerId).siblings('.highcharts-data-table').find('table').attr('tabindex', 0);
    }
    jQuery('#' + containerId + '&gt;div[role=region] h3,#' + containerId + '&gt; h3, #' + containerId + '&gt;div[role=region]&gt;div[tabindex=0]').remove();
    if (chart.exportSVGElements &amp;&amp; chart.exportSVGElements[0])
    chart.exportSVGElements[0].toFront();
    var isCanvas = window.SNC &amp;&amp; window.SNC.canvas &amp;&amp; SNC.canvas.canvasUtils;
    var rootReportId;
    if (this.isReportViewer || (isCanvas &amp;&amp; containerId.indexOf('preview') === -1)) {
    if (isCanvas) {
    rootReportId = jQuery('#' + containerId).closest('.grid-stack-item').find('.sysparm_root_report_id').first().val();
    var uuid = SNC.canvas.canvasUtils.getUuidFromSysId(rootReportId);
    if (uuid) {
    window.SNC.reportResizingFunctions = window.SNC.reportResizingFunctions || {};
    SNC.canvas.eventbus.subscribe(uuid, this.resizeChartFromCanvas.bind(this));
    SNC.reportResizingFunctions[uuid] = this.resizeChartFromCanvas;
    }
    }
    else
    rootReportId = jQuery('#' + containerId).parent().parent().find('.sysparm_root_report_id').first().val();
    window.SNC = window.SNC || {};
    window.SNC.reportResizingTimeouts = window.SNC.reportResizingTimeouts || {};
    window.addEventListener('resize', function(){
    if (SNC.reportResizingTimeouts[rootReportId])
    clearTimeout(SNC.reportResizingTimeouts[rootReportId]);
    SNC.reportResizingTimeouts[rootReportId] = setTimeout(function() {
    var containerDimensions = hc_getDimensions(containerId, true);
    chart.setSize(containerDimensions.width, containerDimensions.height);
    }, 250);
    } ,false);
    }
    this.applyPreviousStateForInteractiveFilter(chart);
    },
    setAnimation: function(chartData){
    this.chartOptions.plotOptions = this.chartOptions.plotOptions || {};
    this.chartOptions.plotOptions.series = this.chartOptions.plotOptions.series || {};
    if (chartData.report_properties) {
    this.chartOptions.plotOptions.series.animation = chartData.report_properties.chart_animation;
    this.chartOptions.chart.animation = chartData.report_properties.chart_animation;
    }
    var isEdge = this.isBrowser('edge');
    var isMSIE11 = this.isBrowser('trident');
    if (window.isMSIE || isMSIE11 || isEdge) {
    this.chartOptions.plotOptions.series.animation = false;
    this.chartOptions.chart.animation = false;
    }
    },
    setBoost: function(chartData){
    this.chartOptions.plotOptions = this.chartOptions.plotOptions || {};
    this.chartOptions.plotOptions.series = this.chartOptions.plotOptions.series || {};
    this.chartOptions.boost = {};
    this.chartOptions.boost.enabled = chartData.report_properties.chart_boost_enabled;
    if (chartData.report_properties &amp;&amp; chartData.report_properties.chart_boost)
    this.chartOptions.plotOptions.series.boostThreshold = chartData.report_properties.chart_boost;
    },
    applyPreviousStateForInteractiveFilter: function(chart) {
    var isChartFilterable = this.chartProps.chartType == 'pie' || this.chartProps.chartType == 'semi_donut' || this.chartProps.chartType == 'donut' ||
    this.chartProps.chartType == 'funnel' || this.chartProps.chartType == 'pyramid';
    if(isChartFilterable) {
    if (this.chartProps.interactive_report) {
    var interActiveReport = JSON.parse(this.chartProps.interactive_report);
    var selectedPointUrl = interActiveReport.selectedPoint || "";
    var filtersFromLegend = interActiveReport.filtersFromLegend || {};
    chart.series[0].data.forEach(function(dataPoint) {
    if(dataPoint['publisher_filter']) {
    var url = dataPoint['publisher_filter'].replace("^", "^EQ^");
    if (url === selectedPointUrl)
    dataPoint.select('select','preventDataPointSelect');
    url = dataPoint['publisher_filter'];
    if (filtersFromLegend[url])
    dataPoint.setVisible(false);
    }
    });
    }
    }
    },
    resizeChartFromCanvas: function resizeChartFromCanvas(data) {
    if (data.action === 'resize') {
    var containerId = this.chartOptions.chart.renderTo;
    var chart = jQuery('#' + containerId).highcharts();
    if (chart) {
    var containerDimensions = hc_getDimensions(containerId, true);
    chart.setSize(containerDimensions.width, containerDimensions.height);
    }
    }
    },
    onClickCustomButton: function onClickCustomButton(event, button, reportId) {
    if (typeof this.chartOptions.mapVisualization !== 'undefined') {
    var mapVis = this.chartOptions.mapVisualization;
    var fullQuery = mapVis.full_query;
    var showDataLabel = mapVis.show_data_label;
    var showGeographicalLabel = mapVis.show_geographical_label;
    var mapParams = '';
    var element = event.srcElement;
    if (!element)
    element = event.target;
    var content = jQuery(element).closest(".report_content");
    if (reportId) {
    var actualMap = mapVis.report_drilldown_map;
    if (actualMap)
    mapParams += "sysparm_report_map_parent=" + actualMap;
    if (showDataLabel)
    mapParams += "&amp;sysparm_show_chart_data_label=" + showDataLabel;
    if (showGeographicalLabel)
    mapParams += "&amp;sysparm_show_geographical_label=" + showGeographicalLabel;
    if (fullQuery)
    mapParams += "&amp;sysparm_full_query_map=" + fullQuery;
    if (button === 'heatmap')
    mapParams += '&amp;sysparm_report_map_exact_points=false';
    else
    mapParams += '&amp;sysparm_report_map_exact_points=true';
    drillReport(content.parent(), reportId, '', mapParams);
    }
    }
    },
    getHighChartsType: function getHighChartsType(snType) {
    if (snType == 'bar' || snType == 'trend')
    return 'column';
    else if (snType == 'horizontal_bar')
    return 'bar';
    else if (snType == 'pie')
    return 'pie';
    else if (snType == 'semi_donut')
    return 'pie';
    else if (snType == 'donut')
    return 'pie';
    else if (snType == 'funnel')
    return 'funnel';
    else if (snType == 'pyramid')
    return 'funnel';
    else if (snType == 'box')
    return 'boxplot';
    else if (snType == 'angular_gauge')
    return 'gauge';
    else if (snType == 'solid_gauge')
    return 'solidgauge';
    else if (snType == 'heatmap')
    return 'heatmap';
    else if (snType == 'bubble')
    return 'bubble';
    else
    return "";
    },
    type: "GlideHCWrapper"
    };
    ;
    /*! RESOURCE: /scripts/reportcommon/hc_legend_extension.js */
    (function extendHCLegend($,Highcharts) {
    var HIDDEN_SERIES = "hidden-series";
    Highcharts.wrap(Highcharts.Legend.prototype, 'init', function replaceDefaultLegendWithStatsTable(proceed, chart){
    if(chart.options.legend.statsTable &amp;&amp; chart.options.legend.statsTable.active)
    chart.options.legend.enabled = false;
    proceed.apply(this, Array.prototype.slice.call(arguments, 1));
    if(!chart.options.legend.statsTable || !chart.options.legend.statsTable.active)
    return;
    chart.options.legend.height = 100;
    var $container = $(chart.container);
    var maxLegendWidth = chart.options.legend.width ? chart.options.legend.width : chart.options.chart.width - 10;
    var tableWidth = maxLegendWidth - 25;
    var expanded = false;
    var $htmlLegend = $('&lt;div&gt;&lt;table style="border-spacing: 0 !important;"&gt;'+
    '&lt;thead&gt;'+
    '&lt;tr&gt;'+
    '&lt;th class="number"&gt;'+
    '&lt;/th&gt;'+
    '&lt;th class="symbol"&gt;'+
    '&lt;/th&gt;'+
    '&lt;th class="series-name"&gt;&lt;/th&gt;'+
    '&lt;th class="controls"&gt;&lt;/th&gt;'+
    '&lt;th class="max"&gt;Max&lt;/th&gt;'+
    '&lt;th class="min"&gt;Min&lt;/th&gt;'+
    '&lt;th class="average"&gt;Avg&lt;/th&gt;'+
    '&lt;th class="total"&gt;Total&lt;/th&gt;'+
    '&lt;/tr&gt;'+
    '&lt;/thead&gt;'+
    '&lt;tbody&gt;&lt;/tbody&gt;'+
    '&lt;/table&gt;&lt;/div&gt;')
    .addClass("stats-table")
    .css("max-width", maxLegendWidth)
    .css("height", chart.options.legend.height)
    .find('table')
    .css("max-width", tableWidth &gt;= 450 ? tableWidth : 450)
    .css("min-width", 450)
    .end()
    ;
    var series = chart.series;
    for(var i = series.length - 1; i &gt;= 0; i--){
    var serie = series[i];
    $('&lt;tr&gt;'+
    '&lt;td class="number"&gt;&lt;/td&gt;'+
    '&lt;td class="symbol"&gt;'+
    '&lt;div class="symbol"&gt;&lt;/div&gt;'+
    '&lt;/td&gt;'+
    '&lt;td class="series-name"&gt;&lt;/td&gt;'+
    '&lt;td class="controls"&gt;'+
    '&lt;button class="hide-others btn btn-default btn-xs"&gt;Hide Others&lt;/button&gt;'+
    '&lt;button class="hide-self btn btn-default btn-xs"&gt;Hide Self&lt;/button&gt;'+
    '&lt;/td&gt;'+
    '&lt;td class="max"&gt;'+
    '&lt;/td&gt;'+
    '&lt;td class="min"&gt;'+
    '&lt;/td&gt;'+
    '&lt;td class="average"&gt;'+
    '&lt;/td&gt;'+
    '&lt;td class="total"&gt;'+
    '&lt;/td&gt;'+
    '&lt;/tr&gt;')
    .find('td.number')
    .text(series.length - i + '.')
    .end()
    .find('td.series-name')
    .text(serie.name)
    .each(returnGenerateLinkIfDefined(serie))
    .end()
    .find('div.symbol')
    .css('background-color', serie.color)
    .end()
    .find('button.hide-others')
    .on('click', returnHideOtherSeries(serie))
    .end()
    .find('button.hide-self')
    .on('click', returnHideSelf(serie))
    .end()
    .find('td.max')
    .text(serie.options.max)
    .end()
    .find('td.min')
    .text(serie.options.min)
    .end()
    .find('td.average')
    .text(serie.options.average.toFixed(2))
    .end()
    .find('td.total')
    .text(serie.options.total)
    .end()
    .find('td.max, td.min, td.average, td.total')
    .each(returnAppendUnitIfDefined(serie))
    .end()
    .hover(returnHighlightSeries(serie), returnUnhighlightSeries(serie))
    .appendTo($htmlLegend.find('tbody'))
    ;
    }
    $container.after($htmlLegend);
    });
    function returnHideSelf(serie){
    return function hideSelf(event) {
    var $thisRow = $(this).closest('tr');
    event.stopPropagation();
    serie.setVisible();
    if(serie.visible)
    $thisRow.removeClass(HIDDEN_SERIES);
    else
    $thisRow.addClass(HIDDEN_SERIES);
    }
    }
    function returnHideOtherSeries(serie){
    return function hideOtherSeries(event) {
    event.stopPropagation();
    var series = serie.chart.series;
    var $this = $(this);
    var $thisRow = $(this).closest('tr');
    var $allRows = $this.closest('table').find('tr');
    if(serie.onlyVisible) {
    serie.onlyVisible = false;
    for(var i = 0; i &lt; series.length; i++)
    series[i].setVisible(true, false);
    } else {
    serie.onlyVisible = true;
    for(var i = 0; i &lt; series.length; i++) {
    var possiblyOurSeries = series[i];
    if(possiblyOurSeries !== serie) {
    possiblyOurSeries.setVisible(false, false);
    possiblyOurSeries.onlyVisible = false;
    } else
    possiblyOurSeries.setVisible(true, false);
    }
    }
    serie.chart.redraw();
    if(serie.onlyVisible) {
    $thisRow.removeClass(HIDDEN_SERIES);
    $allRows.not($thisRow).addClass(HIDDEN_SERIES);
    } else
    $allRows.removeClass(HIDDEN_SERIES);
    };
    }
    function returnHighlightSeries(serie){
    return function higlightSeries(){
    serie.setState("hover");
    };
    }
    function returnUnhighlightSeries(serie){
    return function higlightSeries(){
    serie.setState("");
    };
    }
    function returnGenerateLinkIfDefined(serie){
    return function generateLinkIfDefined(){
    if(serie.chart.options.legend.statsTable.seriesLinkGenerator){
    $(this).wrapInner('&lt;a href="' + serie.chart.options.legend.statsTable.seriesLinkGenerator(serie) + '"&gt;&lt;/a&gt;');
    }
    };
    }
    function returnAppendUnitIfDefined(serie){
    return function appendUnitIfDefined(){
    var $this = $(this);
    if(serie.chart.options.legend.statsTable.unit){
    $this.text($this.text() + serie.chart.options.legend.statsTable.unit);
    }
    };
    }
    })(jQuery,Highcharts);
    ;
    ;]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-09 08:27:56&lt;/sys_created_on&gt;&lt;sys_id&gt;de5096554fbf7f404b5c30318110c759&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;PortalifyReports&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_de5096554fbf7f404b5c30318110c759&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-09-09 10:11:09&lt;/sys_updated_on&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1663761039</payload_hash>
<remote_update_set display_value="SPReportViewer">71b826d54f33bf404b5c30318110c722</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2019-09-09 10:12:18</sys_created_on>
<sys_id>c6b8ee594f33bf404b5c30318110c716</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d158179ac0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2019-09-09 10:12:18</sys_updated_on>
<table/>
<target_name>PortalifyReports</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid>1978a219e533bf40afd00fb25ce10357</update_guid>
<update_guid_history>1978a219e533bf40afd00fb25ce10357:-1663761039,f0d76ed50033bf40c33f49dbd0c53f34:-444188496,0dd0d61594bf7f400b29c92754a39980:-1988109956</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
